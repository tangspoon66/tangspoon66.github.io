<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ThompsonTang&#39;s blog</title>
  
  <subtitle>判断得与失的时限大概要拉长一些，或许是一辈子</subtitle>
  <link href="https://blog.tangspoon.cn/atom.xml" rel="self"/>
  
  <link href="https://blog.tangspoon.cn/"/>
  <updated>2022-09-04T03:20:54.066Z</updated>
  <id>https://blog.tangspoon.cn/</id>
  
  <author>
    <name>ThompsonTang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Esp8266-01制作能使用siri控制的局域网开关</title>
    <link href="https://blog.tangspoon.cn/2022/09/04/Esp8266-01%E5%88%B6%E4%BD%9C%E8%83%BD%E4%BD%BF%E7%94%A8siri%E6%8E%A7%E5%88%B6%E7%9A%84%E5%B1%80%E5%9F%9F%E7%BD%91%E5%BC%80%E5%85%B3/"/>
    <id>https://blog.tangspoon.cn/2022/09/04/Esp8266-01%E5%88%B6%E4%BD%9C%E8%83%BD%E4%BD%BF%E7%94%A8siri%E6%8E%A7%E5%88%B6%E7%9A%84%E5%B1%80%E5%9F%9F%E7%BD%91%E5%BC%80%E5%85%B3/</id>
    <published>2022-09-04T00:35:42.000Z</published>
    <updated>2022-09-04T03:20:54.066Z</updated>
    
    <content type="html"><![CDATA[<p>搬了新房子，电灯开关比较多且布局不合理，关灯是个麻烦，所以做一个能用siri关灯的智能开关。tb上有现成的内置智能开关，价格不贵，但因为租房不好拆开关面板，所以只好选择外置物理方式的智能开关。且成本要低，体积要小。最终敲定的方案是使用<code>ESP8266</code>的<code>01s</code>来控制<code>舵机</code>的开关。下面讲讲遇到的坑和<code>troubleshooting</code>。</p><a id="more"></a><h2 id="一-思路"><a class="markdownIt-Anchor" href="#一-思路"></a> 一、思路</h2><p>通过Siri访问特定的Web URL，不同URL对应不同的舵机角度。</p><h2 id="二-材料清单"><a class="markdownIt-Anchor" href="#二-材料清单"></a> 二、材料清单</h2><img src="https://picbed.tangspoon.cn/uPic/image-20220904112036884.png" alt="image-20220904112036884" style="zoom:50%;" /><h2 id="二-熟悉esp"><a class="markdownIt-Anchor" href="#二-熟悉esp"></a> 二、熟悉Esp</h2><p>价格便宜，体积要小，这个要求<code>ESP8266-01s</code>最符合要求。</p><img src="https://picbed.tangspoon.cn/uPic/image-20220904085822232.png" alt="image-20220904085822232" style="zoom:50%;" /><img src="https://picbed.tangspoon.cn/uPic/image-20220904085947357.png" alt="image-20220904085947357" style="zoom:50%;" /><blockquote><p>ESP 01S规格书：<a href="https://docs.ai-thinker.com/_media/esp8266/docs/esp-01s_product_specification_zh_v1.0.pdf">https://docs.ai-thinker.com/_media/esp8266/docs/esp-01s_product_specification_zh_v1.0.pdf</a></p></blockquote><p>详细的规格书（说明书）看上面的PDF，里面有尺寸、电压等详细信息。我这里只讲我一个小白第一次看规格书的疑惑。</p><h3 id="1-外部拉低悬空外部拉高"><a class="markdownIt-Anchor" href="#1-外部拉低悬空外部拉高"></a> 1. 外部拉低，悬空，外部拉高</h3><img src="https://picbed.tangspoon.cn/uPic/image-20220904090408207.png" alt="image-20220904090408207" style="zoom: 33%;" /><p><code>外部拉低</code>：接地GND</p><p><code>悬空</code>：不接</p><p><code>外部拉高</code>：接高电平</p><h3 id="2-ldo供电"><a class="markdownIt-Anchor" href="#2-ldo供电"></a> 2. LDO供电</h3><p><code>LDO</code>：low dropout regulator 低压差稳压器。</p><p>因为<code>ESP 01S</code>的最佳工作电压是3.3v，我们一般的电源一般都是5v电源或3.7v的锂电池，且随着使用电压会不稳定，所以需要在Power Module后接一个稳压器给<code>ESP 01S</code>提供稳定的3.3v电源。</p><img src="https://picbed.tangspoon.cn/uPic/image-20220904091756828.png" alt="image-20220904091756828" style="zoom: 33%;" /><h3 id="3-at指令"><a class="markdownIt-Anchor" href="#3-at指令"></a> 3. AT指令</h3><p>AT指令一般是用来初次开发，不用上传烧录代码就可以给ESP发出指令，并同时能获得相应的response。</p><blockquote><p>官方AT指令集：<a href="https://docs.espressif.com/projects/esp-at/zh_CN/release-v2.2.0.0_esp8266/AT_Command_Set/index.html#at-command-types">https://docs.espressif.com/projects/esp-at/zh_CN/release-v2.2.0.0_esp8266/AT_Command_Set/index.html#at-command-types</a></p></blockquote><p>其他blog对AT指令使用的描述非常详细，这里不重复。</p><h2 id="三-程序"><a class="markdownIt-Anchor" href="#三-程序"></a> 三、程序</h2><h3 id="1-如何使用arduino软件"><a class="markdownIt-Anchor" href="#1-如何使用arduino软件"></a> 1. 如何使用Arduino软件</h3><p>很多人会用VS Code装Platform.io插件来写Arduino的代码，但其实一般使用Arduino这个软件就够用了。与其花那么多时间来折腾软件，不如潜心学习代码。</p><h4 id="1安装esp8266开发板"><a class="markdownIt-Anchor" href="#1安装esp8266开发板"></a> （1）安装ESP8266开发板</h4><p>在偏好设置（preference）中填入下面网址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;arduino.esp8266.com&#x2F;stable&#x2F;package_esp8266com_index.json</span><br></pre></td></tr></table></figure><img src="https://picbed.tangspoon.cn/uPic/image-20220904111022129.png" alt="image-20220904111022129" style="zoom:33%;" /><p>然后进入到开发板管理器，搜索esp8266，安装即可。安装过程非常慢，建议科学上网。如果没有只能慢慢等。</p><img src="https://picbed.tangspoon.cn/uPic/image-20220904110841007.png" alt="image-20220904110841007" style="zoom:50%;" /><h4 id="2打开串口监视器"><a class="markdownIt-Anchor" href="#2打开串口监视器"></a> （2）打开串口监视器</h4><p>在上传前打开串口监视器，可以看到<code>Serial.print</code>的内容，有利于调试。</p><h3 id="2-web-server"><a class="markdownIt-Anchor" href="#2-web-server"></a> 2. web server</h3><p>这部分是最重要且最有意思的，相对来说比较简单，看一个完整的web server代码就懂。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ESP8266WiFi.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ESP8266WebServer.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//设置您的WiFi接入信息</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* ssid = <span class="string">&quot;your Wi-Fi name&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* password = <span class="string">&quot;your Wi-Fi password&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//建立新的ESP8266WebServer对象 叫server</span></span><br><span class="line"><span class="function">ESP8266WebServer <span class="title">server</span><span class="params">(<span class="number">80</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//主页</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">homepage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  server.send(<span class="number">200</span>, <span class="string">&quot;text/plain&quot;</span>, <span class="string">&quot;测试网页 !&quot;</span>);</span><br><span class="line">  Serial.println(<span class="string">&quot;用户访问了主页&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">  <span class="comment">//初始化串口</span></span><br><span class="line">  Serial.begin(<span class="number">115200</span>);</span><br><span class="line">  Serial.println(<span class="string">&quot;&quot;</span>);</span><br><span class="line"> </span><br><span class="line">  <span class="comment">//初始化网络</span></span><br><span class="line">  <span class="comment">//STA：station模式</span></span><br><span class="line">  WiFi.mode(WIFI_STA);</span><br><span class="line">  WiFi.begin(ssid, password);</span><br><span class="line">  <span class="keyword">while</span> (WiFi.status() != WL_CONNECTED) &#123;</span><br><span class="line">    delay(<span class="number">500</span>);</span><br><span class="line">    Serial.print(<span class="string">&quot;.&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//打印ip地址</span></span><br><span class="line">  Serial.println(<span class="string">&quot;&quot;</span>);</span><br><span class="line">  Serial.print(<span class="string">&quot;IP Address: &quot;</span>);</span><br><span class="line">  Serial.println(WiFi.localIP());</span><br><span class="line"> </span><br><span class="line">  <span class="comment">//初始化WebServer</span></span><br><span class="line">  <span class="comment">//访问&#x27;/&#x27;默认路径，打开的是homepage()的内容。也可访问&#x27;/on&#x27;&#x27;/off&#x27;等路径。</span></span><br><span class="line">  server.on(<span class="string">&quot;/&quot;</span>, homepage);</span><br><span class="line">  server.begin();</span><br><span class="line">  Serial.println(<span class="string">&quot;HTTP server started&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">  <span class="comment">//监听客户请求并处理</span></span><br><span class="line">  server.handleClient();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>太极创客 ESP8266WebServer库的详细介绍：<a href="http://www.taichi-maker.com/homepage/iot-development/iot-dev-reference/esp8266-c-plus-plus-reference/esp8266webserver/">http://www.taichi-maker.com/homepage/iot-development/iot-dev-reference/esp8266-c-plus-plus-reference/esp8266webserver/</a></p></blockquote><p>上面的网址是有关<code>ESP8266WebServer</code>库的详细介绍，应该认真仔细看看。</p><h3 id="3-控制舵机"><a class="markdownIt-Anchor" href="#3-控制舵机"></a> 3. 控制舵机</h3><p>使用<code>Servo库</code>来控制舵机。</p><h4 id="1-servoattachpin"><a class="markdownIt-Anchor" href="#1-servoattachpin"></a> (1) <code>servo.attach(pin)</code></h4><p>告诉ESP是那个引脚控制舵机。</p><h4 id="2servowriteangle"><a class="markdownIt-Anchor" href="#2servowriteangle"></a> (2)<code>servo.write(angle)</code></h4><p>舵机度数</p><p>还有<code>read()</code>，<code>attached()</code>，<code>detach()</code>，详细请看👇</p><blockquote><p>SERVO库：<a href="http://www.taichi-maker.com/homepage/reference-index/arduino-library-index/servo-library/#circuit">http://www.taichi-maker.com/homepage/reference-index/arduino-library-index/servo-library/#circuit</a></p></blockquote><h3 id="4-完整程序"><a class="markdownIt-Anchor" href="#4-完整程序"></a> 4. 完整程序</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h2 id="四-ios快捷指令设置"><a class="markdownIt-Anchor" href="#四-ios快捷指令设置"></a> 四、iOS快捷指令设置</h2><img src="https://picbed.tangspoon.cn/uPic/image-20220904110009515.png" alt="image-20220904110009515" style="zoom:33%;" /><p>是<code>获取URL内容</code>，不用解锁iPhone就可以执行命令。<code>打开URL</code>就需要先解锁iPhone才能执行命令。</p><img src="https://picbed.tangspoon.cn/uPic/IMG_0061.jpg" alt="IMG_0061" style="zoom:33%;" /><p>开灯：192.168.xx.xx/on</p><p>关灯：192.168.xx.xx/off</p><h2 id="五-建模"><a class="markdownIt-Anchor" href="#五-建模"></a> 五、建模</h2><p>3d打印模型：</p><p>激光切割模型：</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;搬了新房子，电灯开关比较多且布局不合理，关灯是个麻烦，所以做一个能用siri关灯的智能开关。tb上有现成的内置智能开关，价格不贵，但因为租房不好拆开关面板，所以只好选择外置物理方式的智能开关。且成本要低，体积要小。最终敲定的方案是使用&lt;code&gt;ESP8266&lt;/code&gt;的&lt;code&gt;01s&lt;/code&gt;来控制&lt;code&gt;舵机&lt;/code&gt;的开关。下面讲讲遇到的坑和&lt;code&gt;troubleshooting&lt;/code&gt;。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Arduino" scheme="https://blog.tangspoon.cn/tags/Arduino/"/>
    
    <category term="ESP" scheme="https://blog.tangspoon.cn/tags/ESP/"/>
    
  </entry>
  
  <entry>
    <title>centOS出现no space left</title>
    <link href="https://blog.tangspoon.cn/2022/05/02/centOS%E5%87%BA%E7%8E%B0no-space-left/"/>
    <id>https://blog.tangspoon.cn/2022/05/02/centOS%E5%87%BA%E7%8E%B0no-space-left/</id>
    <published>2022-05-02T07:10:18.000Z</published>
    <updated>2022-05-02T07:35:50.074Z</updated>
    
    <content type="html"><![CDATA[<img src="https://picbed.tangspoon.cn/uPic/image-20220502152113625.png" alt="image-20220502152113625" style="zoom:50%;" /><p>出现了no space left on device</p><a id="more"></a><p>有两种情况会导致这种情况的出现——inode、block。具体作用先不作过多研究，只需要懂block更容易满。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 查看block情况</span><br><span class="line">df -h</span><br></pre></td></tr></table></figure><img src="https://picbed.tangspoon.cn/uPic/image-20220502151406753.png" alt="image-20220502151406753" style="zoom:50%;" /><p>可以判断是block满了。</p><p>所以接下来就是查找大文件：</p><p>看到是25个G</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 先查看占用block最多的地方</span><br><span class="line">du -sh &#x2F;*</span><br></pre></td></tr></table></figure><img src="../../../../Library/Application Support/typora-user-images/image-20220502151735997.png" alt="image-20220502151735997" style="zoom:50%;" /><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 查找大文件命令|注意是&#x2F;var路径</span><br><span class="line">du -sh &#x2F;var&#x2F;* |grep G</span><br></pre></td></tr></table></figure><img src="../../../../Library/Application Support/typora-user-images/image-20220502151855587.png" alt="image-20220502151855587" style="zoom:50%;" /><img src="../../../../Library/Application Support/typora-user-images/image-20220502151913332.png" alt="image-20220502151913332" style="zoom:50%;" /><p>进一步查看/log下面有个log文件占用了24G</p><p>rm -rf就可以</p>]]></content>
    
    
    <summary type="html">&lt;img src=&quot;https://picbed.tangspoon.cn/uPic/image-20220502152113625.png&quot; alt=&quot;image-20220502152113625&quot; style=&quot;zoom:50%;&quot; /&gt;
&lt;p&gt;出现了no space left on device&lt;/p&gt;</summary>
    
    
    
    
    <category term="linux" scheme="https://blog.tangspoon.cn/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>原创｜macOS 系统安装python库成功，但pycharm无法显示 解决方法</title>
    <link href="https://blog.tangspoon.cn/2022/04/15/macOS-%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85python%E5%BA%93%E6%88%90%E5%8A%9F%EF%BC%8C%E4%BD%86pycharm%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA-%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
    <id>https://blog.tangspoon.cn/2022/04/15/macOS-%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85python%E5%BA%93%E6%88%90%E5%8A%9F%EF%BC%8C%E4%BD%86pycharm%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA-%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</id>
    <published>2022-04-15T08:30:05.000Z</published>
    <updated>2022-04-15T08:35:21.325Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://picbed.tangspoon.cn/uPic/image-20220415163327255.png" alt="image-20220415163327255" /></p><a id="more"></a><h2 id="一-分析"><a class="markdownIt-Anchor" href="#一-分析"></a> 一、分析</h2><p>原因：两个python解释器不一样。</p><p>pycharm的解释器安装位置：<img src="https://picbed.tangspoon.cn/uPic/image-20220415161119490.png" alt="image-20220415161119490" /></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;usr&#x2F;bin&#x2F;python3</span><br></pre></td></tr></table></figure><p>而系统的解释器pip安装位置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 使用如下命令查找随便一个module</span><br><span class="line">pip install xxxx</span><br></pre></td></tr></table></figure><p><img src="https://picbed.tangspoon.cn/uPic/image-20220415161451567.png" alt="image-20220415161451567" /></p><p>解释器其实也就是可执行的python程序，大概率实在这里。只要在这里路径找到python3.7的可执行程序就可以。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Location: &#x2F;Users&#x2F;spoon&#x2F;opt&#x2F;anaconda3</span><br></pre></td></tr></table></figure><p><img src="https://picbed.tangspoon.cn/uPic/image-20220415161803704.png" alt="image-20220415161803704" /></p><p>macOS的可执行程序都在bin文件夹中。果不其然～就在这里。</p><p><img src="https://picbed.tangspoon.cn/uPic/image-20220415162207465.png" alt="image-20220415162207465" /></p><h2 id="二-解决方式"><a class="markdownIt-Anchor" href="#二-解决方式"></a> 二、解决方式</h2><p>接下来在Python Interpreter中设置一个新的解释器就可以。</p><p><img src="https://picbed.tangspoon.cn/uPic/image-20220415162252164.png" alt="image-20220415162252164" /></p><p><img src="https://picbed.tangspoon.cn/uPic/image-20220415162538948-20220415163111895.png" alt="image-20220415162538948" /></p><p>稍微等待加载就可以。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://picbed.tangspoon.cn/uPic/image-20220415163327255.png&quot; alt=&quot;image-20220415163327255&quot; /&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="troubleshooting" scheme="https://blog.tangspoon.cn/categories/troubleshooting/"/>
    
    
    <category term="troubleshooting" scheme="https://blog.tangspoon.cn/tags/troubleshooting/"/>
    
    <category term="pycharm" scheme="https://blog.tangspoon.cn/tags/pycharm/"/>
    
  </entry>
  
  <entry>
    <title>Arduino学习日志-电子元器件</title>
    <link href="https://blog.tangspoon.cn/2022/03/03/Arduino%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%BF%97-%E7%94%B5%E5%AD%90%E5%85%83%E5%99%A8%E4%BB%B6/"/>
    <id>https://blog.tangspoon.cn/2022/03/03/Arduino%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%BF%97-%E7%94%B5%E5%AD%90%E5%85%83%E5%99%A8%E4%BB%B6/</id>
    <published>2022-03-03T02:34:59.000Z</published>
    <updated>2022-03-08T00:44:17.655Z</updated>
    
    <content type="html"><![CDATA[<img src="https://picbed.tangspoon.cn/uPic/image-20220301131415957.png" alt="image-20220301131415957" style="zoom: 40%;" /><p>终于开始接触很感兴趣的Arduino！！！</p><p>目前要用到的是nano，拓展版厂家未知，所以先了解每个nano串口的作用，才能够彻底弄懂这个拓展板。</p><a id="more"></a><h2 id="一-nano和拓展版和连接"><a class="markdownIt-Anchor" href="#一-nano和拓展版和连接"></a> 一、nano和拓展版和连接</h2><blockquote><p>方向接错很容易烧坏</p></blockquote><p>nano的<code>D13</code>对拓展版的<code>D13</code>（拓展版的右上角）</p><h2 id="二-nano的针脚说明"><a class="markdownIt-Anchor" href="#二-nano的针脚说明"></a> 二、nano的针脚说明</h2><img src="https://picbed.tangspoon.cn/uPic/image-20220301133112794.png" alt="image-20220301133112794" style="zoom:50%;" /><h3 id="系统功能针脚"><a class="markdownIt-Anchor" href="#系统功能针脚"></a> 系统功能针脚</h3><h4 id="1-tx-rx-12"><a class="markdownIt-Anchor" href="#1-tx-rx-12"></a> 1. TX、RX ｜(1)(2)</h4><p><code>TX、RX</code>是<strong>串口</strong>输入输出引脚。板上通过CH340芯片转为了USB信号，方便主机下载程序、通信用。 这两个脚尽量不做其它用途。–&gt; 作用：为了解决电脑没有串口的问题。</p><blockquote><p>说人话：因为目前多数是通过usb和电脑通信，但usb走的是<code>通用串行总线的协议</code>，而<code>TX、RX</code>是串口通信。也就是Arduino和电脑的通信协议方式不一样，所以Arduino为<strong>了解决电脑没有串口的问题</strong>，使用了usb转串口的适配器把usb数据转成串口，然后再接到arduino的tx和rx口。usb和rx、tx上的数据是一样的，只是使用的协议不一样而已。</p></blockquote><h4 id="2-reset-228"><a class="markdownIt-Anchor" href="#2-reset-228"></a> 2. RESET | (2)(28)</h4><p>RESET是复位键，在nano中间还有一个复位按钮，所以其实在nano上是有三个复位的口。</p><p>什么叫复位？作用是什么？简单说就是重启。当我们需要在重写刷写内容时，可以按下该键。这个一般会自动完成。但有时候会出现<strong>上传失败的错误</strong>，这个时候我们可以按下nano中心的reset键解决该问题。</p><h4 id="3-gnd429"><a class="markdownIt-Anchor" href="#3-gnd429"></a> 3. GND｜(4)(29)</h4><p>接地。信号、电源共用接地。</p><h4 id="4-vin30"><a class="markdownIt-Anchor" href="#4-vin30"></a> 4. VIN｜(30)</h4><p>外部电源。可以看到（13）是3.3v、（27）是5V的usb板载电源，当我们需要带动一些功率较大的电子器件时，需要外部电源。<strong>输入范围7～12v</strong></p><h3 id="复用接口针脚"><a class="markdownIt-Anchor" href="#复用接口针脚"></a> 复用接口针脚</h3><h4 id="1-d2-d13"><a class="markdownIt-Anchor" href="#1-d2-d13"></a> 1. D2-D13</h4><p>D代表Digital，数字信号。</p><p>数字信号<strong>输出时</strong>反馈给我们1/0的状态，对应高电平(5v)和低电平(0v)。</p><p>输入时电压由外部设备提供。该电压可以在0-5V之间变化，并转换成数字表示（0或1）。为了确定这一点，有2个阈值：低于0.8视为0，高于2视为1。如果电压在0.8～2之间，返回不确定。</p><p>**D3、D5、D6、D9、D10、D11 可以做PWM输出用。**PWM信号用于直流电机的速度控制，调光LED等。</p><h4 id="2-a0-a7"><a class="markdownIt-Anchor" href="#2-a0-a7"></a> 2. A0-A7</h4><p>A代表Analog，模拟信号。</p><p>生活中，接触到的大多数信号都是模拟信号，如声音、温度的变化等。模拟信号是用连续变化的物理量表示的信息，信号随时间作连续变化。</p><img src="https://picbed.tangspoon.cn/uPic/image-20220301142618580.png" alt="image-20220301142618580" style="zoom:50%;" /><hr /><p>最后，有arduino一些学习网站，不过基本都是基于uno的</p><blockquote><p>Arduino中文社区：<a href="https://www.arduino.cn/thread-75655-1-1.html">https://www.arduino.cn/thread-75655-1-1.html</a></p><p>菜鸟Arduino教程：<a href="http://www.log4cpp.com/Tutorials/">http://www.log4cpp.com/Tutorials/</a></p><p>丢石头：<a href="https://wiki.diustou.com/cn/ARDUINO_NANO">https://wiki.diustou.com/cn/ARDUINO_NANO</a></p></blockquote><h2 id="三-附件"><a class="markdownIt-Anchor" href="#三-附件"></a> 三、附件</h2><img src="https://picbed.tangspoon.cn/uPic/image-20220301150156408.png" alt="image-20220301150156408" style="zoom:50%;" /><h3 id="1-按钮led"><a class="markdownIt-Anchor" href="#1-按钮led"></a> 1. 按钮+led</h3><p>我们先看⑤LED灯和⑦按钮的联合</p><p>⑤接在拓展板的D2，⑦在D3。</p><p>先在Mind+中使用实时模式，调试好代码后再使用上传模式，把程序传送到芯片中。但注意：两个模式是分开的。也就是每个区写好的代码都复制不了到另一个区。即使我们在实时模式下把程序保存下来，在上传模式中打开保存好的程序，仍然会自动跳回到实时模式。</p><p>程序：</p><img src="https://picbed.tangspoon.cn/uPic/image-20220301151656546.png" alt="image-20220301151656546" style="zoom: 33%;" /><p>解释：</p><p>首先我们看到nano的引脚操作是有分<code>数字引脚</code> 和 <code>模拟引脚</code>，我们的开关和LED是通过1、0来控制的。所以程序中我们用尖头的数字引脚。</p><img src="https://picbed.tangspoon.cn/uPic/image-20220301151759338.png" alt="image-20220301151759338" style="zoom:50%;" /><h3 id="2-光敏电阻声音模块led"><a class="markdownIt-Anchor" href="#2-光敏电阻声音模块led"></a> 2. 光敏电阻/声音模块+led</h3><p>光敏电阻：光线越强，电阻越低，电压越低。</p><p>接在A口：模拟口1-1023值对应的是0-5v。我们接在A口时，会有个值能够触发led灯亮，用图形化编程无法确定这个值多少。我们取中法测试一下，当模拟口的值&lt;500时，设置为低电平。如果使用代码编写是可以打印出当前的模拟值是多少的。</p><img src="https://picbed.tangspoon.cn/uPic/image-20220301160915532.png" alt="image-20220301160915532" style="zoom:50%;" /><img src="../../../../Library/Application Support/typora-user-images/image-20220301221938159.png" alt="image-20220301221938159" style="zoom:60%;" /><p>通过代码编写可以实现获得当前引脚的数值：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Serial.begin(<span class="number">9600</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Serial.print(<span class="string">&quot;The ADC value is: &quot;</span>);</span><br><span class="line">  Serial.println(analogRead(<span class="number">1</span>));</span><br><span class="line">  delay(<span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然，我们也可以接在D口也可以实现led的亮灭。只是要非常黑，也就是阻值要非常大的时候才回触发led。</p><blockquote><p>DFRobot：<a href="https://mc.dfrobot.com.cn/thread-2505-1-1.html">https://mc.dfrobot.com.cn/thread-2505-1-1.html</a></p><p>其他博客：<a href="https://www.jianshu.com/p/a60b1673fea8">https://www.jianshu.com/p/a60b1673fea8</a></p></blockquote><h3 id="3-超声波"><a class="markdownIt-Anchor" href="#3-超声波"></a> 3. 超声波</h3><p>超声波模块上有4个引脚。只需特别注意两个：<code>Trig</code>和<code>Echo</code>。单片机给<code>trig</code>引脚发送10微秒的高电平，才能触发模块发射声波。<code>echo</code>用于接受返回的声波，如有返回，<code>echo</code>会输出高电平，高电平持续时间就是从发射到返回的时间。</p><img src="https://picbed.tangspoon.cn/uPic/image-20220302084912055.png" alt="image-20220302084912055" style="zoom:50%;" /><p>在该款拓展版中，<code>Trig</code>是对应<code>13引脚</code>，<code>Echo</code>对应<code>12引脚</code>。</p><p><code>Mind+</code>图形化编程：</p><img src="https://picbed.tangspoon.cn/uPic/image-20220302114153653.png" alt="image-20220302114153653" style="zoom:50%;" /><p>在开发平台「Arduino」中，设计一个探测距离的程序。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Trig = <span class="number">13</span>;                                           <span class="comment">// 设定SR04连接的Arduino引脚</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Echo = <span class="number">12</span>; </span><br><span class="line"><span class="keyword">double</span> distance,time ; </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;   </span><br><span class="line">        Serial.begin(<span class="number">9600</span>);                                    <span class="comment">// 初始化串口通信及连接SR04的引脚</span></span><br><span class="line">        pinMode(Trig, OUTPUT); </span><br><span class="line">  </span><br><span class="line">        pinMode(Echo, INPUT);                                  <span class="comment">//要检测引脚上输入的脉冲宽度，需要先设置为输入状态</span></span><br><span class="line">    Serial.println(<span class="string">&quot;The distance is :&quot;</span>);</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    </span><br><span class="line">        digitalWrite(Trig, LOW);                                 </span><br><span class="line">        delayMicroseconds(<span class="number">2</span>);                                   </span><br><span class="line">        digitalWrite(Trig, HIGH);                               </span><br><span class="line">        delayMicroseconds(<span class="number">10</span>);                                  <span class="comment">//产生一个10us的高脉冲去触发SR04</span></span><br><span class="line">        digitalWrite(Trig, LOW);                                </span><br><span class="line">        </span><br><span class="line">        time = pulseIn(Echo, HIGH);                              <span class="comment">// 检测脉冲宽度，注意返回值是微秒us</span></span><br><span class="line">        distance = time /<span class="number">58</span> ;                                  <span class="comment">//计算出距离,输出的距离的单位是厘米cm</span></span><br><span class="line"> </span><br><span class="line">        Serial.print(distance);                                <span class="comment">//把得到的距离值通过串口通信返回给电脑，通过串口监视器显示出来</span></span><br><span class="line">        Serial.println(<span class="string">&quot;cm&quot;</span>); </span><br><span class="line">        delay(<span class="number">1000</span>); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-180度舵机"><a class="markdownIt-Anchor" href="#4-180度舵机"></a> 4. 180度舵机</h3><p>注意：橙色为信号线。接的是数字D口。</p><img src="https://picbed.tangspoon.cn/uPic/image-20220302120742118.png" alt="image-20220302120742118" style="zoom:50%;" /><h3 id="5-电机驱动版"><a class="markdownIt-Anchor" href="#5-电机驱动版"></a> 5. 电机驱动版</h3><img src="https://picbed.tangspoon.cn/uPic/image-20220302121932497.png" alt="image-20220302121932497" style="zoom:50%;" /><img src="https://picbed.tangspoon.cn/uPic/image-20220302122138122.png" alt="image-20220302122138122" style="zoom:50%;" /><p>只有输出端两个口，<strong>一个高电平一个低电平组合</strong>，才会让机器转动。这个绿板注意第三点就行。一般用于mcirobit、掌控板、esp32。</p><h3 id="6-红外避障传感器"><a class="markdownIt-Anchor" href="#6-红外避障传感器"></a> 6. 红外避障传感器</h3><p>也就是上图中的6。当遇到障碍物时，低电平触发。</p><blockquote><p>相关详细说明、例子：<a href="https://www.arduino.cn/thread-89473-2-1.html">https://www.arduino.cn/thread-89473-2-1.html</a></p></blockquote><h3 id="7-倾斜开关"><a class="markdownIt-Anchor" href="#7-倾斜开关"></a> 7. 倾斜开关</h3><p>关闭：高电平；打开：低电平</p><h2 id="四-串口监控"><a class="markdownIt-Anchor" href="#四-串口监控"></a> 四、串口监控</h2><p>Mind+的串口监控</p><p><img src="https://picbed.tangspoon.cn/uPic/image-20220302114415281.png" alt="image-20220302114415281" /></p><hr /><p>学习文档：</p><blockquote><p>链接: <a href="https://pan.baidu.com/s/1kl5SkgCXUjOVF9U4ORW-Yg">https://pan.baidu.com/s/1kl5SkgCXUjOVF9U4ORW-Yg</a></p></blockquote><hr /><p>最后，下面的例子写得非常清晰：</p><p>一块扩展板完成Arduino的10类37项实验（代码+图形+仿真）<br /><a href="https://www.arduino.cn/thread-88696-1-1.html">https://www.arduino.cn/thread-88696-1-1.html</a><br />连杆形式的腿机构十一种：盘点机器人行走背后的机械原理<br /><a href="https://www.arduino.cn/thread-102573-1-1.html">https://www.arduino.cn/thread-102573-1-1.html</a><br />【花雕动手做】超低成本，尝试五十元的麦克纳姆轮小车！<br /><a href="https://www.arduino.cn/thread-102274-1-1.html">https://www.arduino.cn/thread-102274-1-1.html</a><br />【花雕动手做】超迷你哦，用徽商香烟盒做个智能小车！<br /><a href="https://www.arduino.cn/thread-102351-1-1.html">https://www.arduino.cn/thread-102351-1-1.html</a><br />【花雕动手做】太搞笑啦，一支胶管制成二只蠕动机器人<br /><a href="https://www.arduino.cn/thread-102506-1-1.html">https://www.arduino.cn/thread-102506-1-1.html</a><br />【花雕动手做】快餐盒盖，极低成本搭建机器人实验平台<br /><a href="https://www.arduino.cn/thread-102535-1-1.html">https://www.arduino.cn/thread-102535-1-1.html</a><br />【花雕动手做】OTTO 机器人—体验DIY的乐趣<br /><a href="https://www.arduino.cn/thread-101976-1-1.html">https://www.arduino.cn/thread-101976-1-1.html</a></p><p>实验一：干簧管传感器模块<br /><a href="https://www.arduino.cn/thread-86350-1-1.html">https://www.arduino.cn/thread-86350-1-1.html</a><br />实验二：光敏电阻传感器模块<br /><a href="https://www.arduino.cn/thread-86393-1-1.html">https://www.arduino.cn/thread-86393-1-1.html</a><br />实验三：微波雷达感应开关模块<br /><a href="https://www.arduino.cn/thread-86397-1-1.html">https://www.arduino.cn/thread-86397-1-1.html</a><br />实验四：振动传感器模块<br /><a href="https://www.arduino.cn/thread-86512-1-1.html">https://www.arduino.cn/thread-86512-1-1.html</a><br />实验五：热敏电阻温度传感器模块<br /><a href="https://www.arduino.cn/thread-86520-1-1.html">https://www.arduino.cn/thread-86520-1-1.html</a><br />实验六：KY-038高感度声音传感器模块<br /><a href="https://www.arduino.cn/thread-86576-1-1.html">https://www.arduino.cn/thread-86576-1-1.html</a><br />实验七：旋转电位器模块<br /><a href="https://www.arduino.cn/thread-86866-1-1.html">https://www.arduino.cn/thread-86866-1-1.html</a><br />实验八：湿度传感器模块<br /><a href="https://www.arduino.cn/thread-87993-1-1.html">https://www.arduino.cn/thread-87993-1-1.html</a><br />实验九：火焰（红外线）传感器模块<br /><a href="https://www.arduino.cn/thread-88283-1-1.html">https://www.arduino.cn/thread-88283-1-1.html</a><br />实验十：敲击传感器模块KY-031<br /><a href="https://www.arduino.cn/thread-88401-1-1.html">https://www.arduino.cn/thread-88401-1-1.html</a><br />实验十一：金属触摸传感器模块KY-36<br /><a href="https://www.arduino.cn/thread-88422-1-1.html">https://www.arduino.cn/thread-88422-1-1.html</a><br />实验十二：开关霍尔磁力传感器模块<br /><a href="https://www.arduino.cn/thread-88461-1-1.html">https://www.arduino.cn/thread-88461-1-1.html</a><br />实验十三：触摸传感器模块<br /><a href="https://www.arduino.cn/thread-88523-1-1.html">https://www.arduino.cn/thread-88523-1-1.html</a><br />实验十四：倾斜传感器模块（角度开关）<br /><a href="https://www.arduino.cn/thread-88530-1-1.html">https://www.arduino.cn/thread-88530-1-1.html</a><br />实验十五：手指侦测心跳传感器模块KY-039<br /><a href="https://www.arduino.cn/thread-88557-1-1.html">https://www.arduino.cn/thread-88557-1-1.html</a><br />实验十六：电容式数字触摸传感器模块（TTP223 ）<br /><a href="https://www.arduino.cn/thread-88567-1-1.html">https://www.arduino.cn/thread-88567-1-1.html</a><br />实验十七：HC-SR312微型热释电传感器模块<br /><a href="https://www.arduino.cn/thread-88578-1-1.html">https://www.arduino.cn/thread-88578-1-1.html</a><br />实验十八：0.25W太阳能滴胶板传感器模块（45X45毫米）<br /><a href="https://www.arduino.cn/thread-88669-1-1.html">https://www.arduino.cn/thread-88669-1-1.html</a><br />实验十九：常闭型SW-420震动开关传感器模块<br /><a href="https://www.arduino.cn/thread-88672-1-1.html">https://www.arduino.cn/thread-88672-1-1.html</a><br />实验二十：水银开关传感器模块（KY-017）<br /><a href="https://www.arduino.cn/thread-88787-1-1.html">https://www.arduino.cn/thread-88787-1-1.html</a><br />实验二十一：激光头传感器模块（KY-008）<br /><a href="https://www.arduino.cn/thread-88842-1-1.html">https://www.arduino.cn/thread-88842-1-1.html</a><br />实验二十二：MAX7219点阵显示模块（8X8 LED共阴）<br /><a href="https://www.arduino.cn/thread-88851-1-1.html">https://www.arduino.cn/thread-88851-1-1.html</a><br />实验二十三：NE555频率可调脉冲发生器模块（方波简版）<br /><a href="https://www.arduino.cn/thread-88867-1-1.html">https://www.arduino.cn/thread-88867-1-1.html</a><br />实验二十四：水位水滴传感器模块（Water Sensor）<br /><a href="https://www.arduino.cn/thread-88886-1-1.html">https://www.arduino.cn/thread-88886-1-1.html</a><br />实验二十五：MQ-2气敏式烟雾传感器模块（甲烷等）<br /><a href="https://www.arduino.cn/thread-88906-1-1.html">https://www.arduino.cn/thread-88906-1-1.html</a><br />实验二十六：4X4矩阵键盘模块（轻触式按键）<br /><a href="https://www.arduino.cn/thread-88966-1-1.html">https://www.arduino.cn/thread-88966-1-1.html</a><br />实验二十七：GY-BMP280-3.3 高精度大气压强传感器模块<br /><a href="https://www.arduino.cn/thread-89010-1-1.html">https://www.arduino.cn/thread-89010-1-1.html</a><br />实验二十八：三色5050 RGB全彩LED模块 KY-009<br /><a href="https://www.arduino.cn/thread-89022-1-1.html">https://www.arduino.cn/thread-89022-1-1.html</a><br />实验二十九：DS1302实时时钟模块（带电池 掉电走时）<br /><a href="https://www.arduino.cn/thread-89070-1-1.html">https://www.arduino.cn/thread-89070-1-1.html</a><br />实验三十：光敏二极管传感器模块（英语photodiode ）<br /><a href="https://www.arduino.cn/thread-89129-1-1.html">https://www.arduino.cn/thread-89129-1-1.html</a><br />实验三十一：ISD1820录音语音模块（8-20秒）<br /><a href="https://www.arduino.cn/thread-89154-1-1.html">https://www.arduino.cn/thread-89154-1-1.html</a><br />实验三十二：雨滴传感器模块（雨水/雨量/叶面湿度）<br /><a href="https://www.arduino.cn/thread-89184-1-1.html">https://www.arduino.cn/thread-89184-1-1.html</a><br />实验三十三：ESP8266串口WIFI收发无线模块 （ESP-01S）<br /><a href="https://www.arduino.cn/thread-89245-1-1.html">https://www.arduino.cn/thread-89245-1-1.html</a><br />实验三十四：三色LED交通灯模块（红绿黄灯）<br /><a href="https://www.arduino.cn/thread-89273-1-1.html">https://www.arduino.cn/thread-89273-1-1.html</a><br />实验三十五：模拟量声音传感器模块（4线制）<br /><a href="https://www.arduino.cn/thread-89289-1-1.html">https://www.arduino.cn/thread-89289-1-1.html</a><br />实验三十六：WS2812B智能外控集成LED四位彩灯模块<br /><a href="https://www.arduino.cn/thread-89297-1-1.html">https://www.arduino.cn/thread-89297-1-1.html</a><br />实验三十七：MQ-3酒精乙醇传感器模块<br /><a href="https://www.arduino.cn/thread-89300-1-1.html">https://www.arduino.cn/thread-89300-1-1.html</a><br />实验三十八：joystick双轴XY按键摇杆模块（游戏控制杆)<br /><a href="https://www.arduino.cn/thread-89365-1-1.html">https://www.arduino.cn/thread-89365-1-1.html</a><br />实验三十九：DS18B20单总线数字温度传感器模块<br /><a href="https://www.arduino.cn/thread-89368-1-1.html">https://www.arduino.cn/thread-89368-1-1.html</a><br />实验四十：360度旋转增量编码器模块（KY-040）<br /><a href="https://www.arduino.cn/thread-89427-1-1.html">https://www.arduino.cn/thread-89427-1-1.html</a><br />实验四十一：IS0203激光接收管传感器模块<br /><a href="https://www.arduino.cn/thread-89428-1-1.html">https://www.arduino.cn/thread-89428-1-1.html</a><br />实验四十二：DSM501A韩国PM2.5灰尘粉尘传感器模块<br /><a href="https://www.arduino.cn/thread-89441-1-1.html">https://www.arduino.cn/thread-89441-1-1.html</a><br />实验四十三：5V低电平触发单路继电器模块<br /><a href="https://www.arduino.cn/thread-89445-1-1.html">https://www.arduino.cn/thread-89445-1-1.html</a><br />实验四十四：类比霍尔磁性传感器 KY-035（模拟量）<br /><a href="https://www.arduino.cn/thread-89464-1-1.html">https://www.arduino.cn/thread-89464-1-1.html</a><br />实验四十五：红外避障传感器模块（光电接近开关）<br /><a href="https://www.arduino.cn/thread-89473-1-1.html">https://www.arduino.cn/thread-89473-1-1.html</a><br />实验四十六：350Ω高精度电阻式应变片传感器 (BF350)<br /><a href="https://www.arduino.cn/thread-89474-1-1.html">https://www.arduino.cn/thread-89474-1-1.html</a><br />实验四十七：七段LED数码管模块（共阴/共阳）<br /><a href="https://www.arduino.cn/thread-89475-1-1.html">https://www.arduino.cn/thread-89475-1-1.html</a><br />实验四十八：GY-291三轴重力加速度模块 （IIC/SPI传输）<br /><a href="https://www.arduino.cn/thread-89567-1-2.html">https://www.arduino.cn/thread-89567-1-2.html</a><br />实验四十九：有源蜂鸣器报警器发声模块（低电平触发）<br /><a href="https://www.arduino.cn/thread-89568-1-2.html">https://www.arduino.cn/thread-89568-1-2.html</a><br />实验五十：W25Q64 FLASH外扩存储模块 （SPI接口 ）<br /><a href="https://www.arduino.cn/thread-89570-1-2.html">https://www.arduino.cn/thread-89570-1-2.html</a><br />实验五十一：自锁点动触摸按键传感器模块（TTP223芯片）<br /><a href="https://www.arduino.cn/thread-89721-1-1.html">https://www.arduino.cn/thread-89721-1-1.html</a><br />实验五十二：SPI接口Micro SD卡模块（带电平转换芯片)<br /><a href="https://www.arduino.cn/thread-89729-1-1.html">https://www.arduino.cn/thread-89729-1-1.html</a><br />实验五十三： 土壤湿度水分传感器模块（电阻式）<br /><a href="https://www.arduino.cn/thread-89734-1-1.html">https://www.arduino.cn/thread-89734-1-1.html</a><br />实验五十四： 大按键点动轻触开关模块（高电平输出）<br /><a href="https://www.arduino.cn/thread-89785-1-1.html">https://www.arduino.cn/thread-89785-1-1.html</a><br />实验五十五：DHT11 温湿度传感器（数字型单总线通信）<br /><a href="https://www.arduino.cn/thread-89786-1-1.html">https://www.arduino.cn/thread-89786-1-1.html</a><br />实验五十六： 8路LED流水的灯跑马灯模块SUNLEPHANT<br /><a href="https://www.arduino.cn/thread-89832-1-1.html">https://www.arduino.cn/thread-89832-1-1.html</a><br />实验五十七： 四档频率占空比可调矩形波信号发生器（NE555）<br /><a href="https://www.arduino.cn/thread-89868-1-1.html">https://www.arduino.cn/thread-89868-1-1.html</a><br />实验五十八： HC-SR04超声波测距传感器模块（通用款）<br /><a href="https://www.arduino.cn/thread-89869-1-1.html">https://www.arduino.cn/thread-89869-1-1.html</a><br />实验五十九： RS232转TTL2代串口模块刷机板（MAX3232）<br /><a href="https://www.arduino.cn/thread-89895-1-1.html">https://www.arduino.cn/thread-89895-1-1.html</a><br />实验六十：ATTINY85 Digispark kickstarter 微型usb开发板<br /><a href="https://www.arduino.cn/thread-89898-1-1.html">https://www.arduino.cn/thread-89898-1-1.html</a><br />实验六十一： 直条8位 WS2812B 5050 RGB LED全彩模块<br /><a href="https://www.arduino.cn/thread-90147-1-1.html">https://www.arduino.cn/thread-90147-1-1.html</a><br />实验六十二：电压检测模块 Voltage Sensor 电压传感器<br /><a href="https://www.arduino.cn/thread-90149-1-1.html">https://www.arduino.cn/thread-90149-1-1.html</a><br />实验六十三： 1排4键薄膜开关 Arduino扩展键盘模块控制面板<br /><a href="https://www.arduino.cn/thread-90150-1-1.html">https://www.arduino.cn/thread-90150-1-1.html</a><br />实验六十四： TCS3200D颜色识别传感器（可编程彩色光频模块）<br /><a href="https://www.arduino.cn/thread-90168-1-1.html">https://www.arduino.cn/thread-90168-1-1.html</a><br />实验六十五： 5MM三色RGB全彩LED模块颜色传感器KY-016<br /><a href="https://www.arduino.cn/thread-90400-1-1.html">https://www.arduino.cn/thread-90400-1-1.html</a><br />实验六十六： TCRT5000红外反射光电开关寻迹传感器模块<br /><a href="https://www.arduino.cn/thread-90402-1-1.html">https://www.arduino.cn/thread-90402-1-1.html</a><br />实验六十七：HC-SR501 热释电人体红外感应传感器模块<br /><a href="https://www.arduino.cn/thread-90404-1-1.html">https://www.arduino.cn/thread-90404-1-1.html</a><br />实验六十八： GY-68 BMP180 新款 BOSCH温度模块气压传感器<br /><a href="https://www.arduino.cn/thread-90411-1-1.html">https://www.arduino.cn/thread-90411-1-1.html</a><br />实验六十九： AT24C256 I2C接口 EEPROM 存储模块 IIC<br /><a href="https://www.arduino.cn/thread-90412-1-1.html">https://www.arduino.cn/thread-90412-1-1.html</a><br />实验七十： GY-30 数字光强度传感器模块（BH1750FVI芯片）<br /><a href="https://www.arduino.cn/thread-90413-1-1.html">https://www.arduino.cn/thread-90413-1-1.html</a><br />实验七十一：电容式土壤湿度传感器模块（TL555I）<br /><a href="https://www.arduino.cn/thread-90471-1-1.html">https://www.arduino.cn/thread-90471-1-1.html</a><br />实验七十二：HX1838红外无线遥控套件红外扩展模块(遥控器+接收板)<br /><a href="https://www.arduino.cn/thread-90473-1-1.html">https://www.arduino.cn/thread-90473-1-1.html</a><br />实验七十三：人体秤50kg称重传感器模块（电阻应变半桥式）<br /><a href="https://www.arduino.cn/thread-90545-1-1.html">https://www.arduino.cn/thread-90545-1-1.html</a><br />实验七十四：4位LED数码管显示模块0.36英寸亮度可调带时钟点（ TM1637）<br /><a href="https://www.arduino.cn/thread-90546-1-1.html">https://www.arduino.cn/thread-90546-1-1.html</a><br />实验七十五： GY-NEO-6MV2新款飞控GPS模块 （带大天线）<br /><a href="https://www.arduino.cn/thread-90547-1-1.html">https://www.arduino.cn/thread-90547-1-1.html</a><br />实验七十六：TTL转RS-485模块 MAX485 RS485模块<br /><a href="https://www.arduino.cn/thread-90549-1-1.html">https://www.arduino.cn/thread-90549-1-1.html</a><br />实验七十七： 2路继电器模块 带光耦保护Arduino扩展板<br /><a href="https://www.arduino.cn/thread-90557-1-1.html">https://www.arduino.cn/thread-90557-1-1.html</a><br />实验七十八： LGT8F328P LQFP32 MiniEVB开发板（替代NANO V3.0 ）<br /><a href="https://www.arduino.cn/thread-90724-1-1.html">https://www.arduino.cn/thread-90724-1-1.html</a><br />实验七十九： 模拟灰度传感器 （反射式光电模块）<br /><a href="https://www.arduino.cn/thread-90725-1-1.html">https://www.arduino.cn/thread-90725-1-1.html</a><br />实验八十： ov7670摄像头模块30W采集拍照模组（替OV7725）<br /><a href="https://www.arduino.cn/thread-90726-1-1.html">https://www.arduino.cn/thread-90726-1-1.html</a><br />实验八十一：槽型光耦对射光电开关模块（红外计数测速传感器）<br /><a href="https://www.arduino.cn/thread-90833-1-1.html">https://www.arduino.cn/thread-90833-1-1.html</a><br />实验八十二： MQ135空气质量检测传感器模块（有害物体 氨气 硫化物检测)<br /><a href="https://www.arduino.cn/thread-90834-1-1.html">https://www.arduino.cn/thread-90834-1-1.html</a><br />实验八十三： 4路TTP224电容式触摸模块 人体数字触摸传感器<br /><a href="https://www.arduino.cn/thread-90835-1-1.html">https://www.arduino.cn/thread-90835-1-1.html</a><br />实验八十四： 8位LED数码管MAX7219模块（支持级联八位串行3个IO口控制）<br /><a href="https://www.arduino.cn/thread-90864-1-1.html">https://www.arduino.cn/thread-90864-1-1.html</a><br />实验八十五：开源 Mini MP3 Player SD卡播放器模块（YX5200-24SS）<br /><a href="https://www.arduino.cn/thread-90865-1-1.html">https://www.arduino.cn/thread-90865-1-1.html</a><br />实验八十六： 180度SG90舵机模块（模拟9G）<br /><a href="https://www.arduino.cn/thread-91033-1-1.html">https://www.arduino.cn/thread-91033-1-1.html</a><br />实验八十七： DS1307时钟模块 Tiny RTC I2C模块 24C32存储器 时钟(带电池）<br /><a href="https://www.arduino.cn/thread-91034-1-1.html">https://www.arduino.cn/thread-91034-1-1.html</a><br />实验八十八： LCD1602液晶屏5V显示模块<br /><a href="https://www.arduino.cn/thread-91047-1-1.html">https://www.arduino.cn/thread-91047-1-1.html</a><br />实验八十九： WS2812B-4<em>4位 RGB LED 全彩驱动16位彩灯开发板模块<br /><a href="https://www.arduino.cn/thread-91048-1-1.html">https://www.arduino.cn/thread-91048-1-1.html</a><br />实验九十：步进电机+ULN2003驱动板 4相 5线 5V步进电机模组<br /><a href="https://www.arduino.cn/thread-91049-1-1.html">https://www.arduino.cn/thread-91049-1-1.html</a><br />实验九十一： 1号霍尔水流量传感器咖啡机直饮机流量监控模块<br /><a href="https://www.arduino.cn/thread-91241-1-1.html">https://www.arduino.cn/thread-91241-1-1.html</a><br />实验九十二：8位 5V-3V IIC UART SPI TTL双向电平转换模块<br /><a href="https://www.arduino.cn/thread-91242-1-1.html">https://www.arduino.cn/thread-91242-1-1.html</a><br />实验九十三： CSR8350 蓝牙V4.1立体声音乐模块（带功放）<br /><a href="https://www.arduino.cn/thread-91243-1-1.html">https://www.arduino.cn/thread-91243-1-1.html</a><br />实验九十四： 4X4矩阵形薄膜键盘模块轻触开关模组<br /><a href="https://www.arduino.cn/thread-91244-1-1.html">https://www.arduino.cn/thread-91244-1-1.html</a><br />实验九十五：XD-58C pulsesensor光学心率脉搏生物模拟传感器<br /><a href="https://www.arduino.cn/thread-91245-1-1.html">https://www.arduino.cn/thread-91245-1-1.html</a><br />实验九十六： 433M无线发射接收模块 超再生防盗报警无线模组<br /><a href="https://www.arduino.cn/thread-91247-1-1.html">https://www.arduino.cn/thread-91247-1-1.html</a><br />实验九十七： 0.96寸I2C IIC通信128</em>64显示器 OLED液晶屏模块<br /><a href="https://www.arduino.cn/thread-91514-1-1.html">https://www.arduino.cn/thread-91514-1-1.html</a><br />实验九十八： L298N电机驱动板模块直流步进电机智能机器人小车模组<br /><a href="https://www.arduino.cn/thread-91515-1-1.html">https://www.arduino.cn/thread-91515-1-1.html</a><br />实验九十九： APDS-9960 GY-9960-3.3 RGB红外手势传感器 方向识别模块<br /><a href="https://www.arduino.cn/thread-91516-1-1.html">https://www.arduino.cn/thread-91516-1-1.html</a><br />实验一百： AT-09蓝牙4.0BLE 模块 串口引出 CC2541兼容HM-10模块<br /><a href="https://www.arduino.cn/thread-91517-1-1.html">https://www.arduino.cn/thread-91517-1-1.html</a><br />实验一百零一： 10段LED发光条MT102510AG数码显示光柱模块<br /><a href="https://www.arduino.cn/thread-91518-1-1.html">https://www.arduino.cn/thread-91518-1-1.html</a><br />实验一百零二：MFRC-522 RC522 RFID射频 IC卡感应模块读卡器S50复旦卡模组<br /><a href="https://www.arduino.cn/thread-91519-1-1.html">https://www.arduino.cn/thread-91519-1-1.html</a><br />实验一百零三： 8X32 LED点阵显示模块 MAX7219 输出 共阴 5V 模组<br /><a href="https://www.arduino.cn/thread-91520-1-1.html">https://www.arduino.cn/thread-91520-1-1.html</a><br />实验一百零四： MAX30102血氧仪手腕心率脉搏检测心跳传感器模块<br /><a href="https://www.arduino.cn/thread-91521-1-1.html">https://www.arduino.cn/thread-91521-1-1.html</a><br />实验一百零五：12位 WS2812 5050 RGB LED 智能全彩RGB环开发板大环<br /><a href="https://www.arduino.cn/thread-91522-1-1.html">https://www.arduino.cn/thread-91522-1-1.html</a><br />实验一百零六： TM1638按键数码管LED显示模组8位数码管\LED\按键智控模块<br /><a href="https://www.arduino.cn/thread-91523-1-1.html">https://www.arduino.cn/thread-91523-1-1.html</a><br />实验一百零七： 315MHz 四路无线遥控M4非锁接收板 配四键无线遥控器模组<br /><a href="https://www.arduino.cn/thread-91524-1-1.html">https://www.arduino.cn/thread-91524-1-1.html</a><br />实验一百零八： 16X16点阵LED汉字显示屏模块UART接口<br /><a href="https://www.arduino.cn/thread-91526-1-1.html">https://www.arduino.cn/thread-91526-1-1.html</a><br />实验一百零九：模拟量 压电陶瓷振动发电传感器 压电单片机模块 3PIN<br /><a href="https://www.arduino.cn/thread-91827-1-3.html">https://www.arduino.cn/thread-91827-1-3.html</a><br />实验一百一十：US-026超声波测距传感器模块 代替HC-SR04 工业级 3V~5.5V<br /><a href="https://www.arduino.cn/thread-91829-1-1.html">https://www.arduino.cn/thread-91829-1-1.html</a><br />实验一百一十一： IIC/I2C/接口 PCF8574 扩展板 LCD1602/LCD2004转接板模块<br /><a href="https://www.arduino.cn/thread-91830-1-1.html">https://www.arduino.cn/thread-91830-1-1.html</a><br />实验一百一十二： MPU-6050模块 三轴加速度 电子陀螺仪6DOF GY-521传感器<br /><a href="https://www.arduino.cn/thread-91832-1-1.html">https://www.arduino.cn/thread-91832-1-1.html</a><br />实验一百一十三： 电源模块3.3V 5V 12V多路输出 DC-DC电压转换模块<br /><a href="https://www.arduino.cn/thread-91834-1-1.html">https://www.arduino.cn/thread-91834-1-1.html</a><br />实验一百一十四： JDY-31蓝牙转串口适配器SPP模块组无线透传 替换HC-05/06从机<br /><a href="https://www.arduino.cn/thread-91835-1-1.html">https://www.arduino.cn/thread-91835-1-1.html</a><br />实验一百一十五： 震动马达模块 高低电平振动小电机 智能可穿戴式产品震动提醒模块<br /><a href="https://www.arduino.cn/thread-91836-1-1.html">https://www.arduino.cn/thread-91836-1-1.html</a><br />实验一百一十六：NRF24L01+ 无线模块 功率加强版 2.4G无线收发通信模块 黑金刚<br /><a href="https://www.arduino.cn/thread-91837-1-1.html">https://www.arduino.cn/thread-91837-1-1.html</a><br />实验一百一十七：蓝色诺基亚5110屏 LCD液晶屏模块 兼容3310 LCD<br /><a href="https://www.arduino.cn/thread-91838-1-1.html">https://www.arduino.cn/thread-91838-1-1.html</a><br />实验一百一十八：US-015 高分辨超声波测距模块 超声波传感器 US-020升级版<br /><a href="https://www.arduino.cn/thread-91839-1-1.html">https://www.arduino.cn/thread-91839-1-1.html</a><br />实验一百一十九：HB100微波雷达感应模块 10.525GHz多普勒探测器探头传感器<br /><a href="https://www.arduino.cn/thread-91840-1-1.html">https://www.arduino.cn/thread-91840-1-1.html</a><br />实验一百二十： SIM800L GPRS 转接板GSM模块 microSIM卡带天线4频通讯模块<br /><a href="https://www.arduino.cn/thread-91841-1-1.html">https://www.arduino.cn/thread-91841-1-1.html</a><br />实验一百二十一：五向导航按键模块 5D摇杆 单片机 独立键盘开关 按钮 Your Cee<br /><a href="https://www.arduino.cn/thread-91842-1-1.html">https://www.arduino.cn/thread-91842-1-1.html</a><br />实验一百二十二： BBC microbit micro:bit，bit go,bit club python图形编程开发板<br /><a href="https://www.arduino.cn/thread-91888-1-1.html">https://www.arduino.cn/thread-91888-1-1.html</a><br />实验一百二十三： P10单红V706模组 32<em>16单元板LED显示屏<br /><a href="https://www.arduino.cn/thread-91889-1-1.html">https://www.arduino.cn/thread-91889-1-1.html</a><br />实验一百二十四： PS2鼠标 键盘插座接口 PS2模块<br /><a href="https://www.arduino.cn/thread-91893-1-1.html">https://www.arduino.cn/thread-91893-1-1.html</a><br />实验一百二十五： 升级版 WeMos D1 R2 WiFi UNO 开发板 基于ESP8266<br /><a href="https://www.arduino.cn/thread-92178-1-1.html">https://www.arduino.cn/thread-92178-1-1.html</a><br />实验一百二十六：JQ6500语音模块 MP3模块 MCU串口控制播报一对一5路控制<br /><a href="https://www.arduino.cn/thread-92179-1-1.html">https://www.arduino.cn/thread-92179-1-1.html</a><br />实验一百二十七：JoyStick Shield PS2游戏摇杆扩展板 模拟键盘鼠标功能 大摇杆<br /><a href="https://www.arduino.cn/thread-92180-1-1.html">https://www.arduino.cn/thread-92180-1-1.html</a><br />实验一百二十八：日本夏普SHARP PM2.5 灰尘/粉尘传感器 GP2Y1014AU0F 带线<br /><a href="https://www.arduino.cn/thread-92181-1-1.html">https://www.arduino.cn/thread-92181-1-1.html</a><br />实验一百二十九：GY-302 数字量光强度检测 光照传感器 BH1750FVI 光线检测模块<br /><a href="https://www.arduino.cn/thread-92182-1-1.html">https://www.arduino.cn/thread-92182-1-1.html</a><br />实验一百三十：Multi-function Shield多功能扩展板（12合1版）<br /><a href="https://www.arduino.cn/thread-92184-1-1.html">https://www.arduino.cn/thread-92184-1-1.html</a><br />实验一百三十一：24位 WS2812 5050 RGB LED 内置全彩驱动彩灯 圆形开发板<br /><a href="https://www.arduino.cn/thread-92185-1-1.html">https://www.arduino.cn/thread-92185-1-1.html</a><br />实验一百三十二：WT588D语音模块 可反复擦写语音下载16P-16M 蓝板HW-708<br /><a href="https://www.arduino.cn/thread-92186-1-1.html">https://www.arduino.cn/thread-92186-1-1.html</a><br />实验一百三十三：夏普GP2Y0A02YK0F 红外测距传感器模块 20-150cm 距离传感器<br /><a href="https://www.arduino.cn/thread-92187-1-1.html">https://www.arduino.cn/thread-92187-1-1.html</a><br />实验一百三十四：2004A液晶屏 字符显示模块LCD/LCM 蓝屏5V（带背光 IIC/I2C）<br /><a href="https://www.arduino.cn/thread-92188-1-1.html">https://www.arduino.cn/thread-92188-1-1.html</a><br />实验一百三十五：ESP8266机智云开发板 ESP12F wifi模块（云端智能硬件套件）<br /><a href="https://www.arduino.cn/thread-92189-1-1.html">https://www.arduino.cn/thread-92189-1-1.html</a><br />实验一百三十六：IIC I2C电平转换模块 5-3v系统兼容 2路 传感器模块SUNLEPHANT<br /><a href="https://www.arduino.cn/thread-92403-1-1.html">https://www.arduino.cn/thread-92403-1-1.html</a><br />实验一百三十七：中文TTS文字转语音合成模块 替代SYN6288和XFS5152<br /><a href="https://www.arduino.cn/thread-92404-1-1.html">https://www.arduino.cn/thread-92404-1-1.html</a><br />实验一百三十八：电流互感器模块 5A量程 单相 交流电流传感器模块<br /><a href="https://www.arduino.cn/thread-92405-1-1.html">https://www.arduino.cn/thread-92405-1-1.html</a><br />实验一百三十九：YL-004老款20按键独立键盘 跑马灯矩阵键盘模块<br /><a href="https://www.arduino.cn/thread-92406-1-1.html">https://www.arduino.cn/thread-92406-1-1.html</a><br />实验一百四十：KY-027 魔术光杯 for UNO 魔术光环模块<br /><a href="https://www.arduino.cn/thread-92407-1-1.html">https://www.arduino.cn/thread-92407-1-1.html</a><br />实验一百四十一：LCD1602 字符液晶屏 输入输出扩展板 LCD Keypad Shield<br /><a href="https://www.arduino.cn/thread-92408-1-1.html">https://www.arduino.cn/thread-92408-1-1.html</a><br />实验一百四十二：I2C接口I/O扩展模块 支持级联PCF8574T模块<br /><a href="https://www.arduino.cn/thread-92409-1-1.html">https://www.arduino.cn/thread-92409-1-1.html</a><br />实验一百四十三：Ethernet W5100 网络扩展板 SD卡扩展模块 支持MEGA<br /><a href="https://www.arduino.cn/thread-92410-1-1.html">https://www.arduino.cn/thread-92410-1-1.html</a><br />实验一百四十四：0.91寸OLED液晶屏显示模块 IIC 12832液晶屏 兼容3.3v-5V<br /><a href="https://www.arduino.cn/thread-92411-1-1.html">https://www.arduino.cn/thread-92411-1-1.html</a><br />实验一百四十五：MT8870 DTMF语音解码板模块 电话拨号控制音频解码处理电路<br /><a href="https://www.arduino.cn/thread-92412-1-1.html">https://www.arduino.cn/thread-92412-1-1.html</a><br />实验一百四十六：64位 WS2812B8</em>8 xRGB 5050 LED模块 ws2812s像素点阵屏<br /><a href="https://www.arduino.cn/thread-92413-1-1.html">https://www.arduino.cn/thread-92413-1-1.html</a><br />实验一百四十七：E18-D80NK 红外避障传感器 接近开关 智能小车 3-80cm<br /><a href="https://www.arduino.cn/thread-92414-1-1.html">https://www.arduino.cn/thread-92414-1-1.html</a><br />实验一百四十八：MCU mini RS232 MAX3232电平转TTL电平转换板 串口转换板<br /><a href="https://www.arduino.cn/thread-92415-1-1.html">https://www.arduino.cn/thread-92415-1-1.html</a><br />实验一百四十九：AS608光学指纹识别模块 智能锁/考勤门禁开发/指纹采集模块<br /><a href="https://www.arduino.cn/thread-92416-1-1.html">https://www.arduino.cn/thread-92416-1-1.html</a><br />实验一百五十：RCWL-0531心律血氧模块绿版MAX30102脉搏传感器（适用于手腕）<br /><a href="https://www.arduino.cn/thread-92417-1-1.html">https://www.arduino.cn/thread-92417-1-1.html</a><br />实验一百五十一：基于STM32F103RCT6及多种传感器的UFUN2.0升级开发板<br /><a href="https://www.arduino.cn/thread-93214-1-1.html">https://www.arduino.cn/thread-93214-1-1.html</a><br />实验一百五十二：GY-25 串口倾斜度角度传感器模块 MPU-6050<br /><a href="https://www.arduino.cn/thread-94392-1-1.html">https://www.arduino.cn/thread-94392-1-1.html</a><br />实验一百五十三：Maixduino AI开发板 k210 RISC-V AI+lOT ESP32视觉听觉开发套装<br /><a href="https://www.arduino.cn/thread-94393-1-1.html">https://www.arduino.cn/thread-94393-1-1.html</a><br />实验一百五十四：ML8511紫外线传感器模块 模拟量输出UV Sensor Breakou<br /><a href="https://www.arduino.cn/thread-94394-1-1.html">https://www.arduino.cn/thread-94394-1-1.html</a><br />实验一百五十五：KA2284 电平指示模块 5点LED电量/音频音乐旋律显示器<br /><a href="https://www.arduino.cn/thread-94395-1-1.html">https://www.arduino.cn/thread-94395-1-1.html</a><br />实验一百五十六：恒压型LED无级触摸调光PWM控制板 电容式触摸开关器模块<br /><a href="https://www.arduino.cn/thread-94397-1-1.html">https://www.arduino.cn/thread-94397-1-1.html</a><br />实验一百五十七：SG3525 PWM控制器模块 频率可调 占空比可调 波形发生器<br /><a href="https://www.arduino.cn/thread-94414-1-1.html">https://www.arduino.cn/thread-94414-1-1.html</a><br />实验一百五十八：QMC5883L电子指南针罗盘模块 三轴磁场传感器GY-271<br /><a href="https://www.arduino.cn/thread-94412-1-1.html">https://www.arduino.cn/thread-94412-1-1.html</a><br />实验一百五十九：MAX9814麦克风放大器模块 MIC话筒声音放大/咪头传感器<br /><a href="https://www.arduino.cn/thread-94398-1-1.html">https://www.arduino.cn/thread-94398-1-1.html</a><br />实验一百六十：压力传感器MD-PS002-150KPaA 真空传感器 绝压传感器 高度<br /><a href="https://www.arduino.cn/thread-94416-1-1.html">https://www.arduino.cn/thread-94416-1-1.html</a><br />实验一百六十一：旋转角度传感器模块 SV01A103AEA01R00微调电位器模块<br /><a href="https://www.arduino.cn/thread-94417-1-1.html">https://www.arduino.cn/thread-94417-1-1.html</a><br />实验一百六十二：S12SD紫外线传感器模块太阳光强度检测传感器模块高灵敏<br /><a href="https://www.arduino.cn/thread-94418-1-1.html">https://www.arduino.cn/thread-94418-1-1.html</a><br />实验一百六十三：BMI160模块 6DOF 6轴 角速度 陀螺仪+重力加速度传感器<br /><a href="https://www.arduino.cn/thread-94419-1-1.html">https://www.arduino.cn/thread-94419-1-1.html</a><br />实验一百六十四：Seeeduino Lotus开发板 传感器9件套 主板+扩展板二合一<br /><a href="https://www.arduino.cn/thread-94953-1-1.html">https://www.arduino.cn/thread-94953-1-1.html</a><br />实验一百六十五：2.4寸TFT液晶触摸屏 彩屏模块 可直插UNO R3 Mega2560开发板<br /><a href="https://www.arduino.cn/thread-94955-1-1.html">https://www.arduino.cn/thread-94955-1-1.html</a><br />实验一百六十六：PS2无线遥控手柄 双振动摇杆 游戏2.4G手柄<br /><a href="https://www.arduino.cn/thread-94957-1-1.html">https://www.arduino.cn/thread-94957-1-1.html</a><br />实验一百六十七：霍尔电流检测模块 0-30A量程霍尔电流监测器 过流报警模块<br /><a href="https://www.arduino.cn/thread-94958-1-1.html">https://www.arduino.cn/thread-94958-1-1.html</a><br />实验一百六十八：小喵科技nanobit mini主控开发板迷你microbit图形化编程makecode<br /><a href="https://www.arduino.cn/thread-94961-1-1.html">https://www.arduino.cn/thread-94961-1-1.html</a><br />实验一百六十九：12864带中文字库LCD12864液晶12864模块12864液晶屏带字库12864屏<br /><a href="https://www.arduino.cn/thread-94962-1-1.html">https://www.arduino.cn/thread-94962-1-1.html</a><br />实验一百七十：L293D四路电机驱动模块 扩展板 motor control shield 马达板<br /><a href="https://www.arduino.cn/thread-101774-1-1.html">https://www.arduino.cn/thread-101774-1-1.html</a><br />实验一百七十一：HLK-V20 AI智能离线语音识别模块 150条本地指令离线识别<br /><a href="https://www.arduino.cn/thread-101816-1-1.html">https://www.arduino.cn/thread-101816-1-1.html</a><br />实验一百七十二：MX1508 四通道双路有刷直流马达驱动模块 2路直流电机驱动模块 双H桥步进电机 正反转PWM调速<br /><a href="https://www.arduino.cn/thread-102203-1-1.html">https://www.arduino.cn/thread-102203-1-1.html</a><br />实验一百七十三：2262/2272四路无线遥控套件 M4非锁接收板 四键无线遥控器发射模块<br /><a href="https://www.arduino.cn/thread-102440-1-1.html">https://www.arduino.cn/thread-102440-1-1.html</a><br />实验一百七十四：DRV8833 电机驱动板模块 小体积高性能 2路直流电机驱动板 自平衡小车 代替TB6612FNG<br /><a href="https://www.arduino.cn/thread-102287-1-1.html">https://www.arduino.cn/thread-102287-1-1.html</a><br />实验一百七十五：LD3320 语音识别模块 非特定人声 语音控制 智能家居开发板<br /><a href="https://www.arduino.cn/thread-102453-1-1.html">https://www.arduino.cn/thread-102453-1-1.html</a></p>]]></content>
    
    
    <summary type="html">&lt;img src=&quot;https://picbed.tangspoon.cn/uPic/image-20220301131415957.png&quot; alt=&quot;image-20220301131415957&quot; style=&quot;zoom: 40%;&quot; /&gt;
&lt;p&gt;终于开始接触很感兴趣的Arduino！！！&lt;/p&gt;
&lt;p&gt;目前要用到的是nano，拓展版厂家未知，所以先了解每个nano串口的作用，才能够彻底弄懂这个拓展板。&lt;/p&gt;</summary>
    
    
    
    <category term="Arduino" scheme="https://blog.tangspoon.cn/categories/Arduino/"/>
    
    
    <category term="Arduino" scheme="https://blog.tangspoon.cn/tags/Arduino/"/>
    
  </entry>
  
  <entry>
    <title>使用Respeaker语音接收模块的声卡配置</title>
    <link href="https://blog.tangspoon.cn/2022/03/03/%E4%BD%BF%E7%94%A8Respeaker%E8%AF%AD%E9%9F%B3%E6%8E%A5%E6%94%B6%E6%A8%A1%E5%9D%97%E7%9A%84%E5%A3%B0%E5%8D%A1%E9%85%8D%E7%BD%AE/"/>
    <id>https://blog.tangspoon.cn/2022/03/03/%E4%BD%BF%E7%94%A8Respeaker%E8%AF%AD%E9%9F%B3%E6%8E%A5%E6%94%B6%E6%A8%A1%E5%9D%97%E7%9A%84%E5%A3%B0%E5%8D%A1%E9%85%8D%E7%BD%AE/</id>
    <published>2022-03-03T02:16:08.000Z</published>
    <updated>2022-03-03T02:39:36.292Z</updated>
    
    <content type="html"><![CDATA[<img src="https://picbed.tangspoon.cn/uPic/image-20220303100857343.png" alt="image-20220303100857343" style="zoom: 33%;" /><p>很久很久之前，打算用树莓派做个具有语音识别功能的语音闹钟，但难度是意想不到的大，且该模块的唤醒距离要非常近。但其中遇到了一个问题非常值得记录：在类似树莓派、香橙派这种开发版中声卡的设置问题。</p><a id="more"></a><p>使用mplayer播放出现错误</p><img src="https://picbed.tangspoon.cn/uPic/image-20201224162311029.png" alt="image-20201224162311029" style="zoom:50%;" /><p>大概率是新加入的respeaker占用了原来音响的声卡位置。</p><p>我们先查看一下实现play的设备<code>aplay -l</code>。只有一个<code>card 0：Headphones</code></p><p><img src="https://picbed.tangspoon.cn/uPic/image-20201224163249311.png" alt="image-20201224163249311" /></p><p>我们再查找一下实现record的设备<code>arecord -l</code>。只有一个<code>card 1: seeed4micviocec</code>，也就是新加入的respeaker。</p><p><img src="https://picbed.tangspoon.cn/uPic/image-20201224163506998.png" alt="image-20201224163506998" /></p><p>我们查看一下配置默认声卡配置文件是<code>/etc/asound.conf</code></p><img src="https://picbed.tangspoon.cn/uPic/image-20201224162833679.png" alt="image-20201224162833679" style="zoom: 50%;" /><p>google之后，在这里找到了答案</p><p><a href="https://blog.csdn.net/emithfla/article/details/104461976">https://blog.csdn.net/emithfla/article/details/104461976</a></p><p><code>vim /etc/asound.conf</code></p><p>然后在pcm.playback下添加下面内容即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> capture.pcm &#123;</span><br><span class="line">type plug</span><br><span class="line">slave.pcm &quot;hw:1,0&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果出错，直接修改成上面csdn文章里的一样。</p>]]></content>
    
    
    <summary type="html">&lt;img src=&quot;https://picbed.tangspoon.cn/uPic/image-20220303100857343.png&quot; alt=&quot;image-20220303100857343&quot; style=&quot;zoom: 33%;&quot; /&gt;
&lt;p&gt;很久很久之前，打算用树莓派做个具有语音识别功能的语音闹钟，但难度是意想不到的大，且该模块的唤醒距离要非常近。但其中遇到了一个问题非常值得记录：在类似树莓派、香橙派这种开发版中声卡的设置问题。&lt;/p&gt;</summary>
    
    
    
    <category term="树莓派" scheme="https://blog.tangspoon.cn/categories/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
    
    <category term="linux" scheme="https://blog.tangspoon.cn/tags/linux/"/>
    
    <category term="树莓派" scheme="https://blog.tangspoon.cn/tags/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
    <category term="声卡配置" scheme="https://blog.tangspoon.cn/tags/%E5%A3%B0%E5%8D%A1%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>Python学习日志-07｜数据结构</title>
    <link href="https://blog.tangspoon.cn/2022/02/14/Python%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%BF%97-07%EF%BD%9C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    <id>https://blog.tangspoon.cn/2022/02/14/Python%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%BF%97-07%EF%BD%9C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</id>
    <published>2022-02-14T13:32:51.000Z</published>
    <updated>2022-03-03T02:39:16.674Z</updated>
    
    <content type="html"><![CDATA[<img src="https://picbed.tangspoon.cn/uPic/image-20220212213658145.png" alt="image-20220212213658145" style="zoom:50%;" /><p>栈、单链表。</p><p>会进修 Coursera 的 Data Structures 课程，日后完善丰富。</p><a id="more"></a><blockquote><ol><li>学习数据结构的好助手：<a href="https://pythontutor.com/">Python Tutor</a>。可以展示python代码的每一步执行。</li><li>非常好的博客：<a href="https://nemo.cool/254.html">多种数据结构的python实现形式</a></li><li><a href="https://github.com/facert/python-data-structure-cn/tree/master/3.%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/3.21.%E5%AE%9E%E7%8E%B0%E6%97%A0%E5%BA%8F%E5%88%97%E8%A1%A8%EF%BC%9A%E9%93%BE%E8%A1%A8">python-data-structrue-cn</a></li><li><a href="https://codingdict.com/article/4850">CodingDict的Python数据结构</a></li></ol></blockquote><p>理解：数据结构：数据以哪种方式、组织形式存储在电脑中，每一种储存方式都有其特点。</p><p>在设计一个程序/模块前，通常需要选择好数据结构，然后再设计算法。举个不太恰当的例子：我在做网易云闹钟时，需要储存<code>uid</code>和<code>url</code>，使用列表存储和读取都比较缓慢，但使用字典就非常快速的。（列表是数据结构「序列」的一种类型，而字典则是一种「可变形容器」。关于数据类型和数据结构的区别可详细查看知乎的提问：<a href="https://www.zhihu.com/question/21165020">「数据结构」和「数据类型」两个概念的本质，区别与联系</a>。里面一位叫「沈兄」的回答很好理解。）</p><h2 id="一-栈"><a class="markdownIt-Anchor" href="#一-栈"></a> 一、栈</h2><img src="https://picbed.tangspoon.cn/uPic/image-20220210102612544.png" alt="image-20220210102612544" style="zoom: 50%;" /><ul><li>也叫后进先出表</li><li>栈顶top：插入删除操作的顶端</li><li>栈底bottom</li><li>栈元素个数为0时：空栈</li><li>插入：push</li><li>删除：pop</li><li>时间复杂度为O（1）</li></ul><p>我们用python来构造出栈这个数据结构：进栈、出栈、查看最顶元素、判断是否为空、返回栈的大小。</p><p>实现原理就是用数组以左为基点，逆时针旋转90度，结合数组的append和pop操作，就是一个栈了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stack</span>(<span class="params">object</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, limit=<span class="number">10</span></span>):</span></span><br><span class="line">        self.stack = []  <span class="comment"># 存放元素</span></span><br><span class="line">        self.limit = limit  <span class="comment"># 栈容量极限</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">push</span>(<span class="params">self, data</span>):</span>  <span class="comment"># 判断栈是否溢出</span></span><br><span class="line">        <span class="keyword">if</span> len(self.stack) &gt;= self.limit:</span><br><span class="line">            print(<span class="string">&#x27;StackOverflowError&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        self.stack.append(data)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pop</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">if</span> self.stack:</span><br><span class="line">            <span class="keyword">return</span> self.stack.pop()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> IndexError(<span class="string">&#x27;pop from an empty stack&#x27;</span>)  <span class="comment"># 空栈不能被弹出</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">peek</span>(<span class="params">self</span>):</span>  <span class="comment"># 查看堆栈的最上面的元素</span></span><br><span class="line">        <span class="keyword">if</span> self.stack:</span><br><span class="line">            <span class="keyword">return</span> self.stack[<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_empty</span>(<span class="params">self</span>):</span>  <span class="comment"># 判断栈是否为空</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">not</span> bool(self.stack)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">size</span>(<span class="params">self</span>):</span>  <span class="comment"># 返回栈的大小</span></span><br><span class="line">        <span class="keyword">return</span> len(self.stack)</span><br></pre></td></tr></table></figure><p>题目：根据栈的结构特点，检查括号是否完全匹配。</p><p>我们可以利用「左括号」进栈，在遍历到「右括号」时，就出栈。括号匹配的情况是：当pop完最后一个元素后，栈是empty的，这种情况就是True的。括号不匹配有两种情况：左括号&gt;右括号，左括号&lt;右括号。第一种栈is not empty的时候就是不匹配的。第二种当栈is empty的时候括号不匹配。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 连接上面的stack代码。</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">balanced_parenthesses</span>(<span class="params">parenthesses</span>):</span></span><br><span class="line">stack=Stack(len(parenthesses))</span><br><span class="line">    <span class="keyword">for</span> parenthess <span class="keyword">in</span> parenthesses:</span><br><span class="line">        <span class="keyword">if</span> parenthess==<span class="string">&#x27;(&#x27;</span>:</span><br><span class="line">            stack.push(parenthess)</span><br><span class="line">        <span class="keyword">elif</span> parenthess==<span class="string">&#x27;)&#x27;</span>:</span><br><span class="line">            <span class="keyword">if</span> stack.is_empty:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            stack.pop()</span><br><span class="line">    <span class="keyword">return</span> stack.is_empty </span><br><span class="line"><span class="comment"># 如果True就是对称的。对称的情况是左括号刚好被pop完，没有右括号了，直接跳出循环判断是否为空即可。</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    examples = [<span class="string">&#x27;()&#x27;</span>, <span class="string">&#x27;((())&#x27;</span>, <span class="string">&#x27;()))&#x27;</span>]</span><br><span class="line">    print(<span class="string">&#x27;Balanced parentheses demonstration:&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> example <span class="keyword">in</span> examples:</span><br><span class="line">        print(example + <span class="string">&#x27;: &#x27;</span> + str(balanced_parentheses(example)))</span><br></pre></td></tr></table></figure><h2 id="二-链表"><a class="markdownIt-Anchor" href="#二-链表"></a> 二、链表</h2><h3 id="1-单链表"><a class="markdownIt-Anchor" href="#1-单链表"></a> 1. 单链表</h3><blockquote><p>参考：<a href="https://blog.csdn.net/chenmozhe22/article/details/108751941">Python—链表基础（小白入门系列）—节点 &amp; 单向链表</a></p></blockquote><h4 id="链表组成"><a class="markdownIt-Anchor" href="#链表组成"></a> 链表组成</h4><p>链表实际上由两部分组成：head 和 节点node。head永远指向第一个node；node由元素和下一节点的指向next两部分组成。</p><p><img src="https://picbed.tangspoon.cn/uPic/image-20220212155951415.png" alt="image-20220212155951415" /></p><p><img src="https://picbed.tangspoon.cn/uPic/image-20220212155924559.png" alt="image-20220212155924559" /></p><h4 id="链表的用处优势和劣势"><a class="markdownIt-Anchor" href="#链表的用处优势和劣势"></a> 链表的用处（优势和劣势）</h4><p>对于列表，是一块大的连续内存空间，每次初始化都需要开辟一大块内存，空间利用率低。更重要的是，插入一个元素，所有其他元素的位置都变了。所以在插入、删除元素的时候效率比较低。</p><p>优势：</p><ul><li>链表是非连续的内存空间，每个节点单独存在自己的内存空间，通过指针指向下一个节点。</li><li>如果在某个地方插入一个节点，只需要改变指针的指向即可，不用其他元素都变动。</li></ul><p>劣势：</p><ul><li>每次查找一个元素，都必须从头指针开始一个一个往下查找。</li><li>如果中间某个节点指向断开，那错误节点后面的所有其他节点就都找不到了。</li></ul><p>从上面可以看出，插入数据 链表胜于列表。</p><p>我们在明白了链表的组成之后，我们用python来实现实现该数据结构。</p><h4 id="node节点的理解"><a class="markdownIt-Anchor" href="#node节点的理解"></a> node节点的理解</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创造一个node类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">singleNode</span>(<span class="params">object</span>):</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,item</span>):</span></span><br><span class="line">        <span class="comment"># item存放数据元素</span></span><br><span class="line">        self.item=item</span><br><span class="line">        <span class="comment"># next是下一个节点node的指向</span></span><br><span class="line">    self.next=<span class="literal">None</span></span><br></pre></td></tr></table></figure><p>我们尝试利用链表的原理，来应用一下next的指向</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">node1 = singleNode(<span class="number">5</span>)</span><br><span class="line">node2 = singleNode(<span class="number">8</span>)</span><br><span class="line">node1.next = node2</span><br><span class="line">print(node1.item) <span class="comment"># 5</span></span><br><span class="line">print(node1.next.item) <span class="comment"># 8</span></span><br><span class="line">print(node2) </span><br></pre></td></tr></table></figure><p>由<code>line5</code>输出8，可以知道我们是可以通过<code>node1</code>来实现<code>node2</code>的输出的，表示链接成功。</p><p><code>line3</code>的作用很重要：把<code>node1</code>指向<code>node2</code>。其实就是把<code>node2</code>的内存地址赋值给<code>node1.next</code>。</p><h4 id="添加节点的真实过程"><a class="markdownIt-Anchor" href="#添加节点的真实过程"></a> 添加节点的真实过程</h4><p>链表对象具有的功能必须有：添加节点。但添加节点应该是先把新元素指向给<code>node1</code>，然后再把<code>head</code>移动到新元素上。如果先移动<code>head</code>，新的元素还没有指向<code>node1</code>，这时候指向已经断裂了。</p><p><img src="https://picbed.tangspoon.cn/uPic/image-20220212170801427.png" alt="image-20220212170801427" /></p><p><img src="https://picbed.tangspoon.cn/uPic/image-20220212170828666.png" alt="image-20220212170828666" /></p><p>下面我们开始定义链表。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">singleLinkedlist</span>(<span class="params">object</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.__head = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">self, item</span>):</span></span><br><span class="line">        <span class="comment"># 新node</span></span><br><span class="line">        node = singleNode(item)</span><br><span class="line">        <span class="comment"># 先把新的链接域指向头及节点，也就是__head的指向位置</span></span><br><span class="line">        node.next = self.__head</span><br><span class="line">        <span class="comment"># 将链表的头__head指向新节点</span></span><br><span class="line">        self.__head = node</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_first_node</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.__head</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s = singleLinkedlist()</span><br><span class="line">s.add(<span class="number">6</span>)</span><br><span class="line">s.add(<span class="number">1</span>)</span><br><span class="line">fn=s.get_first_node()</span><br><span class="line">print(fn.item)</span><br></pre></td></tr></table></figure><p>有些概念要明确：在设计程序时，我们应该以程序最小规模来思考设计。我们设计<code>add()</code>方法，链表的最小规模是一个节点都没有。所以<code>add()</code>方法可以这样思考：在创建了一个新node之后，就先处理这个node的指向next（不然就断了连接），也就是指向下一个<strong>node的地址：其实就是head</strong>。然后移动head指向node的地址。</p><h4 id="链表的其他方法"><a class="markdownIt-Anchor" href="#链表的其他方法"></a> 链表的其他方法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment"># 判断是否为空</span></span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">is_empty</span>(<span class="params">self</span>):</span></span><br><span class="line"><span class="keyword">return</span> self.__head=<span class="literal">None</span></span><br><span class="line">   </span><br><span class="line">   <span class="comment"># 计算长度</span></span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">length</span>(<span class="params">self</span>):</span></span><br><span class="line">       count=<span class="number">0</span></span><br><span class="line">       cur=self.__head</span><br><span class="line">       <span class="keyword">while</span> cur!=<span class="literal">None</span>:</span><br><span class="line">           count+=<span class="number">1</span></span><br><span class="line">           cur=cur.next <span class="comment"># cur.next代表下一个元素，所以这个操作代表着__head的后移</span></span><br><span class="line">           </span><br><span class="line">       <span class="keyword">return</span> count</span><br><span class="line">   </span><br><span class="line">   <span class="comment"># 遍历链表的信息</span></span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">travel</span>(<span class="params">self</span>):</span></span><br><span class="line">       cur=self.__head</span><br><span class="line">       <span class="keyword">while</span> cur!=<span class="literal">None</span>:</span><br><span class="line">           print(cur.item)</span><br><span class="line">           cur=cur.next</span><br><span class="line">           </span><br><span class="line">   <span class="comment"># 在末尾添加节点</span></span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">append</span>(<span class="params">self</span>):</span></span><br><span class="line">       node=singleLinkedlist()</span><br><span class="line">       <span class="keyword">if</span> self.is_empty():</span><br><span class="line">           self.__head=node</span><br><span class="line">       <span class="keyword">else</span>:</span><br><span class="line">           cur=self.__haed</span><br><span class="line">           <span class="keyword">while</span> cur.next!=<span class="literal">None</span>: <span class="comment"># 最后一个node的node.next是None</span></span><br><span class="line">               cur=cur.next</span><br><span class="line">           cur.next=node</span><br><span class="line"><span class="comment"># 插入节点</span></span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">insert</span>(<span class="params">self,pos,item</span>):</span></span><br><span class="line">       <span class="comment"># 若指定位置pos为第一个元素之前，则执行头部插入，也就是一开始写的add操作</span></span><br><span class="line">       <span class="keyword">if</span> pos&lt;=<span class="number">0</span>:</span><br><span class="line">           self.add(item)</span><br><span class="line">       <span class="keyword">elif</span> pos&gt;(self.length()<span class="number">-1</span>): <span class="comment"># 尾部</span></span><br><span class="line">           self.pop(item)</span><br><span class="line">       <span class="keyword">else</span>: <span class="comment"># 中部</span></span><br><span class="line">           node = singleLinkedlist(item)</span><br><span class="line">           cur=self.__head</span><br><span class="line">           count=<span class="number">0</span></span><br><span class="line">           </span><br><span class="line">           <span class="keyword">while</span> count&lt;(pos<span class="number">-1</span>):</span><br><span class="line">               count+=<span class="number">1</span></span><br><span class="line">               cur=cur.next</span><br><span class="line">               </span><br><span class="line">           node.next=cur.next <span class="comment"># 先把新node指向pos的后一个数,也就是cur.next</span></span><br><span class="line">           cur.next=node <span class="comment"># 然后再把在pos的node指向新node</span></span><br><span class="line">   <span class="comment"># 查找    </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">search</span>(<span class="params">self,item</span>):</span></span><br><span class="line">       cur=self.__head</span><br><span class="line">       <span class="keyword">while</span> cur!=<span class="literal">None</span>:</span><br><span class="line">           <span class="keyword">if</span> cur.item==item:</span><br><span class="line">               <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">           cur=cur.next</span><br><span class="line">       <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><p>由上面可以总结出几种操作：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cur=self.head</span><br><span class="line"><span class="comment"># cur.next 代表的是下一个node的一个整体</span></span><br><span class="line"><span class="comment"># head 代表当前的node</span></span><br><span class="line"><span class="comment"># 指针移动</span></span><br><span class="line">cur=cur.next <span class="comment"># 直接后一个的节点的地址传给了cur，这就达到了指针后移的目的。</span></span><br></pre></td></tr></table></figure><h3 id="2-双链表"><a class="markdownIt-Anchor" href="#2-双链表"></a> 2. 双链表</h3><blockquote><p>参考：<a href="https://blog.csdn.net/chenmozhe22/article/details/108772812">Python—链表基础（小白入门系列）—节点 &amp; 双向链表</a></p></blockquote>]]></content>
    
    
    <summary type="html">&lt;img src=&quot;https://picbed.tangspoon.cn/uPic/image-20220212213658145.png&quot; alt=&quot;image-20220212213658145&quot; style=&quot;zoom:50%;&quot; /&gt;
&lt;p&gt;栈、单链表。&lt;/p&gt;
&lt;p&gt;会进修 Coursera 的 Data Structures 课程，日后完善丰富。&lt;/p&gt;</summary>
    
    
    
    <category term="Python" scheme="https://blog.tangspoon.cn/categories/Python/"/>
    
    
    <category term="Python" scheme="https://blog.tangspoon.cn/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>macOS重装Homebrew</title>
    <link href="https://blog.tangspoon.cn/2022/02/12/macOS%E5%AE%89%E8%A3%85aira2%E5%AF%BC%E8%87%B4Homebrew%E5%8F%97%E6%8D%9F%EF%BD%9C%E4%BF%AE%E5%A4%8D/"/>
    <id>https://blog.tangspoon.cn/2022/02/12/macOS%E5%AE%89%E8%A3%85aira2%E5%AF%BC%E8%87%B4Homebrew%E5%8F%97%E6%8D%9F%EF%BD%9C%E4%BF%AE%E5%A4%8D/</id>
    <published>2022-02-12T07:25:49.000Z</published>
    <updated>2022-02-14T06:33:40.806Z</updated>
    
    <content type="html"><![CDATA[<img src="https://picbed.tangspoon.cn/uPic/image-20220205152726453.png" alt="image-20220205152726453" style="zoom:50%;" /><p>Homebrew可谓是macOS的大杀器，aira2是下载届的大杀器。前两天安装aria2的时候，出现了openssl版本错误的问题，我就使用<code>brew install openssl</code>的命令升级到<code>openssl3</code>，结果越搞越乱，到最后直接brew命令都是用不了。刚好能不能通过重新安装brew来解决问题？可是一系列问题随之出现。</p><a id="more"></a><h2 id="一-解决方法一"><a class="markdownIt-Anchor" href="#一-解决方法一"></a> 一、解决方法一</h2><p>使用官方命令重装Homebrew，无法连接到github。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;bin&#x2F;bash -c &quot;$(curl -fsSL https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;Homebrew&#x2F;install&#x2F;HEAD&#x2F;install.sh)&quot;</span><br></pre></td></tr></table></figure><p><img src="https://picbed.tangspoon.cn/uPic/image-20220205153314436.png" alt="image-20220205153314436" /></p><blockquote><p>curl: (7) Failed to connect to <a href="http://raw.githubusercontent.com">raw.githubusercontent.com</a> port 443: Connection refused</p></blockquote><p>更换了阿里云的源也无法解决问题。</p><p>最后bilibili一个up主<code>mintimate</code>，他自己写了一个自动安装脚本，一下子帮我完美解决问题。</p><p>mintimate的blog地址：<a href="https://mintimate.cn/2020/04/05/Homebrew/">https://mintimate.cn/2020/04/05/Homebrew/</a></p><img src="https://picbed.tangspoon.cn/uPic/image-20220205153750700.png" alt="image-20220205153750700" style="zoom:50%;" /><h2 id="一-解决方法二"><a class="markdownIt-Anchor" href="#一-解决方法二"></a> 一、解决方法二</h2><p>详情请查看：<a href="https://blog.tangspoon.cn/2022/02/05/macOS%E8%AE%A9%E7%BB%88%E7%AB%AF%E8%B5%B0%E4%BB%A3%E7%90%86%EF%BC%8C%E8%A7%A3%E5%86%B3curl%E5%A4%B1%E8%B4%A5%E9%97%AE%E9%A2%98/">macOS 让终端走代理，解决 curl 失败问题</a></p>]]></content>
    
    
    <summary type="html">&lt;img src=&quot;https://picbed.tangspoon.cn/uPic/image-20220205152726453.png&quot; alt=&quot;image-20220205152726453&quot; style=&quot;zoom:50%;&quot; /&gt;
&lt;p&gt;Homebrew可谓是macOS的大杀器，aira2是下载届的大杀器。前两天安装aria2的时候，出现了openssl版本错误的问题，我就使用&lt;code&gt;brew install openssl&lt;/code&gt;的命令升级到&lt;code&gt;openssl3&lt;/code&gt;，结果越搞越乱，到最后直接brew命令都是用不了。刚好能不能通过重新安装brew来解决问题？可是一系列问题随之出现。&lt;/p&gt;</summary>
    
    
    
    <category term="macOS" scheme="https://blog.tangspoon.cn/categories/macOS/"/>
    
    
    <category term="troubleshooting" scheme="https://blog.tangspoon.cn/tags/troubleshooting/"/>
    
    <category term="macOS" scheme="https://blog.tangspoon.cn/tags/macOS/"/>
    
  </entry>
  
  <entry>
    <title>Python学习日志-06｜算法-排序</title>
    <link href="https://blog.tangspoon.cn/2022/02/12/Python%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%BF%97-06%EF%BD%9C%E7%AE%97%E6%B3%95-%E6%8E%92%E5%BA%8F/"/>
    <id>https://blog.tangspoon.cn/2022/02/12/Python%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%BF%97-06%EF%BD%9C%E7%AE%97%E6%B3%95-%E6%8E%92%E5%BA%8F/</id>
    <published>2022-02-12T06:45:23.000Z</published>
    <updated>2022-02-12T06:51:16.829Z</updated>
    
    <content type="html"><![CDATA[<img src="https://picbed.tangspoon.cn/uPic/image-20220212144332679.png" alt="image-20220212144332679" style="zoom:85%;" /><p>冒泡、选择、插入、快速排序</p><a id="more"></a><blockquote><h3 id="排序算法的稳定性"><a class="markdownIt-Anchor" href="#排序算法的稳定性"></a> 排序算法的稳定性</h3><p>排序算法的稳定性是指，在排序过程中，值相同的元素间的相对位置跟排序前的相对位置是一样的。举个例子，排序前一个数组为{3, 2, 1, 2’, 4}，我们用2’来区分第二个2和第一个2，假如是稳定的排序算法，它的结果一定是这样{1, 2, 2’, 3, 4}，而如果不稳定的算法，它的结果有可能是这样{1, 2’, 2, 3, 4}。</p><p>为什么我们要强调稳定性呢？举个例子，假如我们需要排序一个订单，需要按照时间和价格进行升序排序，首先会先将所有订单按时间升序排序，然后再进行价格的升序排序，假如价格排序不是一个稳定的排序，那么订单的时间就有可能不会按升序排列，所以在特定情况下，排序算法的稳定性是一个比较重要的考虑因素。</p><p>作者：特雷西多士<br />链接：<a href="https://juejin.cn/post/6844903966514348040">https://juejin.cn/post/6844903966514348040</a><br />来源：稀土掘金<br />著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p></blockquote><h3 id="一-冒泡排序"><a class="markdownIt-Anchor" href="#一-冒泡排序"></a> 一、冒泡排序</h3><blockquote><p>参考：<a href="https://github.com/facert/python-data-structure-cn/tree/master/5.%E6%8E%92%E5%BA%8F%E5%92%8C%E6%90%9C%E7%B4%A2">https://github.com/facert/python-data-structure-cn/tree/master/5.排序和搜索</a></p></blockquote><p>「冒泡」这个命名十分形象：越小的元素会逐渐冒泡到数列的前端。</p><p><img src="https://picbed.tangspoon.cn/uPic/image-20220211111950717.png" alt="image-20220211111950717" /></p><p>缺点：低效</p><ul><li>每个数据都得经过若干次交换才能找到自己的位置。特别是对于大号靠前的数据。</li><li>假如数组在冒泡排序的途中已经排好了正确的顺序，算法还是会迭代到最后一个元素，浪费性能和时间。</li></ul><p>优点：稳定性好</p><p>因为只有当两个数不相等时才会交换，所以例如像5和5`这样的（前后不一样，值一样）是不会交换的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bubbleSort</span>(<span class="params">data</span>):</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(data)<span class="number">-1</span>,<span class="number">0</span>,<span class="number">-1</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(i):</span><br><span class="line">            <span class="keyword">if</span> data[i]&gt;data[i+<span class="number">1</span>]:</span><br><span class="line">                data[i],data[i+<span class="number">1</span>]=data[i+<span class="number">1</span>],data[i]</span><br><span class="line">data = [<span class="number">3</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">99</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">44</span>]</span><br><span class="line">bubbleSrot(data)</span><br><span class="line">print(<span class="string">&#x27;冒泡排序：&#x27;</span>, data)</span><br></pre></td></tr></table></figure><h3 id="二-选择排序"><a class="markdownIt-Anchor" href="#二-选择排序"></a> 二、选择排序</h3><blockquote><p>参考：<a href="https://github.com/facert/python-data-structure-cn/tree/master/5.%E6%8E%92%E5%BA%8F%E5%92%8C%E6%90%9C%E7%B4%A2">https://github.com/facert/python-data-structure-cn/tree/master/5.排序和搜索</a></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">selectSort</span>(<span class="params">data</span>):</span></span><br><span class="line"><span class="keyword">for</span> now_len <span class="keyword">in</span> range(len(data)<span class="number">-1</span>,<span class="number">0</span>,<span class="number">-1</span>):</span><br><span class="line">    temp_location=<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> now_location <span class="keyword">in</span> range(<span class="number">1</span>,now_len+<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> data[now_location]&gt;data[temp_location]:</span><br><span class="line">                temp_location=now_location</span><br><span class="line">                </span><br><span class="line">data[temp_location],data[now_location]=data[now_location],data[temp_location]</span><br><span class="line">     </span><br><span class="line">data = [<span class="number">3</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">99</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">44</span>]</span><br><span class="line">bubbleSrot(data)</span><br><span class="line">print(<span class="string">&#x27;选择排序：&#x27;</span>, data)  </span><br></pre></td></tr></table></figure><h3 id="三-插入排序"><a class="markdownIt-Anchor" href="#三-插入排序"></a> 三、插入排序</h3><p>目前个人觉得最好理解的教程是Derrick Sherril这位YouTuber</p><blockquote><p><a href="https://www.youtube.com/watch?v=byHi41L9vTM">https://www.youtube.com/watch?v=byHi41L9vTM</a></p></blockquote><p>直接上代码，狗都能看懂。其实就是当数列前一个大于后一个的时候，两个数字交换。但为了持续比较，需要在一个<code>while</code>里面不断判断，每次<code>i-1</code>就可以遍历前面的<code>unsorted</code>的值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">insertSort</span>(<span class="params">data</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,len(data)):</span><br><span class="line">        <span class="keyword">while</span> data[i<span class="number">-1</span>]&gt;data[i] <span class="keyword">and</span> i &gt; <span class="number">0</span>:</span><br><span class="line">            data[i<span class="number">-1</span>],data[i] = data[i], data[i<span class="number">-1</span>]</span><br><span class="line">            i-=<span class="number">1</span></span><br><span class="line">data = [<span class="number">3</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">99</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">44</span>]</span><br><span class="line">insertSrot(data)</span><br><span class="line">print(<span class="string">&#x27;插入排序：&#x27;</span>, data) </span><br></pre></td></tr></table></figure><h3 id="四-快速排序递归排序"><a class="markdownIt-Anchor" href="#四-快速排序递归排序"></a> 四、快速排序（递归排序）</h3><p>快速排序的最简单解释同样来自Derrick Sherril</p><blockquote><p>解学武之快速排序：<a href="https://www.youtube.com/watch?v=kFeXwkgnQ9U">https://www.youtube.com/watch?v=kFeXwkgnQ9U</a></p></blockquote><p>以随便一个数为标准，Derrick用了最后一个。提取出标准数，遍历数组剩下的值，比标准数小的放在左边，大的在右。然后一直递归下去就可以。结束条件是不用比较的最小规模：当数组只剩下1个或0个的时候。这时我们直接返回长度只有1个或0个的数组即可。</p><p>另外有个讲算法很详细的网站：</p><blockquote><p><a href="http://data.biancheng.net/view/117.html">http://data.biancheng.net/view/117.html</a></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">quickSort</span>(<span class="params">data</span>):</span></span><br><span class="line">    length = len(data)</span><br><span class="line">    <span class="keyword">if</span> length &lt;= <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> data</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        pivot = data.pop()</span><br><span class="line"></span><br><span class="line">    items_bigger = []</span><br><span class="line">    items_smaller = []</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> data:</span><br><span class="line">        <span class="keyword">if</span> item &lt; pivot:</span><br><span class="line">            items_smaller.append(item)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            items_bigger.append(item)</span><br><span class="line">    <span class="keyword">return</span> quickSort(items_smaller) + [pivot] + quickSort(items_bigger)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">data = [<span class="number">3</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">99</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">44</span>]</span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27;快速排序：&#x27;</span>, quickSort(data))</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="五-其他"><a class="markdownIt-Anchor" href="#五-其他"></a> 五、其他</h3><p>其他还有归并排序和希尔排序。日后在Coursera的Data Structrues课程中再深入学习。</p><blockquote><p><a href="https://www.coursera.org/learn/python-data?action=enroll">https://www.coursera.org/learn/python-data?action=enroll</a></p></blockquote>]]></content>
    
    
    <summary type="html">&lt;img src=&quot;https://picbed.tangspoon.cn/uPic/image-20220212144332679.png&quot; alt=&quot;image-20220212144332679&quot; style=&quot;zoom:85%;&quot; /&gt;
&lt;p&gt;冒泡、选择、插入、快速排序&lt;/p&gt;</summary>
    
    
    
    <category term="Python" scheme="https://blog.tangspoon.cn/categories/Python/"/>
    
    
    <category term="Python" scheme="https://blog.tangspoon.cn/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>frp内网穿透怎么用？｜访问内网web项目</title>
    <link href="https://blog.tangspoon.cn/2022/02/11/frp%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E6%80%8E%E4%B9%88%E7%94%A8%EF%BC%9F%EF%BD%9C%E8%AE%BF%E9%97%AE%E5%86%85%E7%BD%91web%E9%A1%B9%E7%9B%AE/"/>
    <id>https://blog.tangspoon.cn/2022/02/11/frp%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E6%80%8E%E4%B9%88%E7%94%A8%EF%BC%9F%EF%BD%9C%E8%AE%BF%E9%97%AE%E5%86%85%E7%BD%91web%E9%A1%B9%E7%9B%AE/</id>
    <published>2022-02-11T12:16:13.000Z</published>
    <updated>2022-02-14T06:31:54.514Z</updated>
    
    <content type="html"><![CDATA[<img src="https://picbed.tangspoon.cn/uPic/image-20211224213850815.png" alt="image-20211224213850815" style="zoom:35%;" /><p>想做一个智能快递柜，想法是快递员扫码进入网页，输入信息验证成功后，香橙派就控制打开电磁锁。因为对esp和MQTT协议不熟悉，所以只能选择香橙派+内网穿透曲线救国的方式实现效果。当然，成本也会高很多。（esp几块钱，香橙派二手70+）</p><a id="more"></a><h2 id="一-服务端"><a class="markdownIt-Anchor" href="#一-服务端"></a> 一、服务端</h2><p>服务端应用在vps。（如果是arm系统，需要更改wget的地址）</p><h3 id="1-拉取源代码修改配置"><a class="markdownIt-Anchor" href="#1-拉取源代码修改配置"></a> 1. 拉取源代码&amp;修改配置</h3><p>（我这个是0.38版本）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https:&#x2F;&#x2F;github.com&#x2F;fatedier&#x2F;frp&#x2F;releases&#x2F;download&#x2F;v0.38.0&#x2F;frp_0.38.0_linux_amd64.tar.gz</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf frp_0.38.0_linux_amd64.tar.gz</span><br><span class="line">mv frp_0.38.0_linux_amd64 frps</span><br><span class="line">cd frps</span><br><span class="line">vim frps.ini</span><br></pre></td></tr></table></figure><img src="https://picbed.tangspoon.cn/uPic/image-20211224202926625.png" alt="image-20211224202926625" style="zoom:50%;" /><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[common]</span><br><span class="line">dashboard_port &#x3D; 7500</span><br><span class="line">bind_port &#x3D; 7000</span><br><span class="line">vhost_http_port &#x3D; 8443</span><br></pre></td></tr></table></figure><p><code>bind_port</code>：server端和client端对接端口</p><p><code>dashboard_port</code>：frp面板端口</p><p><code>vhost_http_port</code>：http服务端口</p><h3 id="2-放行端口"><a class="markdownIt-Anchor" href="#2-放行端口"></a> 2. 放行端口</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">iptables -A INPUT -p tcp --dport 8443 -j ACCEPT</span><br><span class="line">iptables -A INPUT -p tcp --dport 7000 -j ACCEPT</span><br><span class="line">iptables -A INPUT -p tcp --dport 7500 -j ACCEPT</span><br><span class="line">iptables-save &gt; &#x2F;etc&#x2F;iptables.up.rules</span><br><span class="line">&#x2F;etc&#x2F;init.d&#x2F;ssh restart</span><br></pre></td></tr></table></figure><h3 id="3-启动"><a class="markdownIt-Anchor" href="#3-启动"></a> 3. 启动</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup .&#x2F;frps -c .&#x2F;frps.ini &gt; frps.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure><p><code>nohup</code>：可以把frps后台启动</p><blockquote><p>关闭</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 关闭frp</span><br><span class="line">ps -aux|grep frp| grep -v grep</span><br><span class="line"># 找出进程id xxx</span><br><span class="line">kill -9 xxx</span><br></pre></td></tr></table></figure></blockquote><p><img src="https://picbed.tangspoon.cn/uPic/image-20211224211757919.png" alt="image-20211224211757919" /></p><h2 id="二-客户端"><a class="markdownIt-Anchor" href="#二-客户端"></a> 二、客户端</h2><p>同样也要下载0.38版本（要和服务端相同）</p><p>macOS下载：<a href="https://github.com/fatedier/frp/releases/download/v0.38.0/frp_0.38.0_darwin_amd64.tar.gz">frp_0.38.0_darwin_amd64.tar.gz</a></p><p>linux下载：<a href="https://github.com/fatedier/frp/releases/download/v0.38.0/frp_0.38.0_linux_amd64.tar.gz">frp_0.38.0_linux_amd64.tar.gz</a></p><p>Windows下载：<a href="https://github.com/fatedier/frp/releases/download/v0.38.0/frp_0.38.0_windows_amd64.zip">frp_0.38.0_windows_amd64.zip</a></p><p>树莓派/香橙派下载：<a href="https://github.com/fatedier/frp/releases/download/v0.38.0/frp_0.38.0_linux_arm.tar.gz">frp_0.38.0_linux_arm.tar.gz</a></p><p><strong>我这里以macOS版演示</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https:&#x2F;&#x2F;github.com&#x2F;fatedier&#x2F;frp&#x2F;releases&#x2F;download&#x2F;v0.38.0&#x2F;frp_0.38.0_darwin_amd64.tar.gz</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf frp_0.38.0_darwin_amd64.tar.gz</span><br><span class="line">mv frp_0.38.0_darwin_amd64 frpc</span><br><span class="line">cd frpc</span><br><span class="line">vim frpc.ini</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[common]</span><br><span class="line">server_addr &#x3D; xxxxx</span><br><span class="line">server_port &#x3D; 7000</span><br><span class="line"></span><br><span class="line">[ssh]</span><br><span class="line">type &#x3D; tcp</span><br><span class="line">local_ip &#x3D; 127.0.0.1</span><br><span class="line">local_port &#x3D; 22</span><br><span class="line">remote_port &#x3D; 6000</span><br><span class="line"></span><br><span class="line">[http]</span><br><span class="line">type &#x3D; http</span><br><span class="line">local_ip &#x3D; 127.0.0.1</span><br><span class="line">local_port &#x3D; 8443</span><br><span class="line">use_encryption &#x3D; false</span><br><span class="line">use_compression &#x3D; true</span><br><span class="line">custom_domains &#x3D; frp.xxxx.cn</span><br></pre></td></tr></table></figure><p><code>server_addr</code>：是服务端的ip，也就是vps的ip</p><p><code>server_port</code>：要和服务端填写的<code>bind_port</code>一致</p><p><code>local_port</code>：要和服务端填写的<code>vhost_http_port</code>一致</p><p><code>custom_domains</code>：服务端的ip/域名</p><h3 id="启动"><a class="markdownIt-Anchor" href="#启动"></a> 启动</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup .&#x2F;frpc -c .&#x2F;frpc.ini &gt; frpc.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure><p><img src="https://picbed.tangspoon.cn/uPic/image-20211224211909398.png" alt="image-20211224211909398" /></p><h3 id="三-面板"><a class="markdownIt-Anchor" href="#三-面板"></a> 三、面板</h3><p>访问地址：ip:7500</p><p>访问不了可能是没有放行端口</p><p><img src="https://picbed.tangspoon.cn/uPic/image-20211224212321698.png" alt="image-20211224212321698" /></p><p><strong>有个HTTP服务证明内网穿透已经成功</strong></p><hr /><p>⚠️注意：内网web项目端口要和<code>vhost_http_port</code>保持一致</p><p><strong>实例</strong></p><p>使用<code>webpy</code>框架建立个demo</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 安装webpy</span><br><span class="line">python3 -m pip install web.py&#x3D;&#x3D;0.61</span><br></pre></td></tr></table></figure><p>在电脑桌面新建个<code>test.py</code>项目，内容为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">import web</span><br><span class="line">import logging</span><br><span class="line"> </span><br><span class="line">urls&#x3D;(&#39;&#x2F;&#39;, &#39;Index&#39;)</span><br><span class="line"> </span><br><span class="line">logging.basicConfig(level&#x3D;logging.NOTSET)</span><br><span class="line"> </span><br><span class="line">app &#x3D; web.application(urls, globals())</span><br><span class="line"> </span><br><span class="line">class Index:</span><br><span class="line">    def GET(self):</span><br><span class="line">        logging.info(&#39;你好世界&#39;)</span><br><span class="line">        web.header(&#39;Content-Type&#39;, &#39;text&#x2F;html;charset&#x3D;UTF-8&#39;)</span><br><span class="line">        return &#39;你好世界&#39;</span><br><span class="line"> </span><br><span class="line">def notfound():</span><br><span class="line">    return web.notfound(&quot;Sorry, the page you were looking for was not found.&quot;)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    app.notfound &#x3D; notfound;</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><p>运行web项目</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python test.py <span class="number">8443</span></span><br></pre></td></tr></table></figure><p>⚠️注意：标明要8443端口</p><p>浏览器访问 ip:8443</p><p><img src="https://picbed.tangspoon.cn/uPic/image-20211224213434793.png" alt="image-20211224213434793" /></p><p><img src="https://picbed.tangspoon.cn/uPic/image-20211224213708050.png" alt="image-20211224213708050" /></p>]]></content>
    
    
    <summary type="html">&lt;img src=&quot;https://picbed.tangspoon.cn/uPic/image-20211224213850815.png&quot; alt=&quot;image-20211224213850815&quot; style=&quot;zoom:35%;&quot; /&gt;
&lt;p&gt;想做一个智能快递柜，想法是快递员扫码进入网页，输入信息验证成功后，香橙派就控制打开电磁锁。因为对esp和MQTT协议不熟悉，所以只能选择香橙派+内网穿透曲线救国的方式实现效果。当然，成本也会高很多。（esp几块钱，香橙派二手70+）&lt;/p&gt;</summary>
    
    
    
    <category term="linux" scheme="https://blog.tangspoon.cn/categories/linux/"/>
    
    <category term="智能快递柜" scheme="https://blog.tangspoon.cn/categories/linux/%E6%99%BA%E8%83%BD%E5%BF%AB%E9%80%92%E6%9F%9C/"/>
    
    
    <category term="linux" scheme="https://blog.tangspoon.cn/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Python学习日志-04｜复习</title>
    <link href="https://blog.tangspoon.cn/2022/02/09/Python%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%BF%97-04%EF%BD%9C%E5%A4%8D%E4%B9%A0/"/>
    <id>https://blog.tangspoon.cn/2022/02/09/Python%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%BF%97-04%EF%BD%9C%E5%A4%8D%E4%B9%A0/</id>
    <published>2022-02-09T10:46:32.000Z</published>
    <updated>2022-02-09T10:48:24.150Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://picbed.tangspoon.cn/uPic/image-20211208153223437-20211208154222323.png" alt="image-20211208153223437" /></p><p>标准库：os、random、time、datetime</p><a id="more"></a><h2 id="一-os模块"><a class="markdownIt-Anchor" href="#一-os模块"></a> 一、os模块</h2><p>os模块是提供的接口可以实现跨平台访问。但有些例外。</p><h3 id="1-系统相关"><a class="markdownIt-Anchor" href="#1-系统相关"></a> 1. 系统相关</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">os.name <span class="comment"># 查看当前操作系统的命令，win--&gt;nt linux--&gt;posix</span></span><br><span class="line">os.environ <span class="comment"># 获取环境变量</span></span><br></pre></td></tr></table></figure><h3 id="2-文件和目录操作"><a class="markdownIt-Anchor" href="#2-文件和目录操作"></a> 2. 文件和目录操作</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">os.getcwd() <span class="comment">## 来获取当前工作目录</span></span><br><span class="line">os.chdir(<span class="string">&#x27;dirname&#x27;</span>) <span class="comment">## 相当于shell下的cd，改变当前脚本的目录</span></span><br><span class="line">os.remove(<span class="string">&#x27;filename&#x27;</span>)</span><br><span class="line">os.rename(<span class="string">&#x27;oldname&#x27;</span>,<span class="string">&#x27;new&#x27;</span>)</span><br><span class="line">os.listdir(<span class="string">&#x27;dirname&#x27;</span>)</span><br><span class="line">os.path.abspath(<span class="string">&#x27;dirname&#x27;</span>) <span class="comment">## 返回绝对路</span></span><br></pre></td></tr></table></figure><h3 id="3-执行命令"><a class="markdownIt-Anchor" href="#3-执行命令"></a> 3. 执行命令</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">os.system(<span class="string">&#x27;command&#x27;</span>)</span><br><span class="line">os.popen(<span class="string">&#x27;command&#x27;</span>)</span><br></pre></td></tr></table></figure><p>两者区别是，前者指返回一个状态码，没有任何其他输出内容。后者会返回command的结果。比如我要执行<code>ls</code>这样的shell命令，就需要时候后者。</p><h2 id="二-random"><a class="markdownIt-Anchor" href="#二-random"></a> 二、random</h2><p>生成随机函数。该模块有在智能快递柜项目中应用：生成六位随机密码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1 0～1浮点数</span></span><br><span class="line">random.random()</span><br><span class="line"><span class="comment">#2 指定范围浮点数</span></span><br><span class="line">random.uniform(<span class="number">10</span>,<span class="number">20</span>)</span><br><span class="line"><span class="comment">#3 指定范围整数</span></span><br><span class="line">random.randint(<span class="number">10</span>,<span class="number">1000</span>)</span><br><span class="line"><span class="comment">#4 固定间隔的随机数</span></span><br><span class="line">random.randrange(<span class="number">10</span>,<span class="number">20</span>,<span class="number">2</span>)</span><br><span class="line"><span class="comment">#5 在固定的sequence中随机生成</span></span><br><span class="line">random.choice([<span class="string">&#x27;aaa&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;cdd&#x27;</span>])</span><br><span class="line"><span class="comment">#6 打乱列表元素</span></span><br><span class="line">ll=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>]</span><br><span class="line">random.shuffle(ll)</span><br><span class="line">print(ll)</span><br><span class="line"><span class="comment">#5 切片返回随机固定长度</span></span><br><span class="line">random.sample(<span class="string">&#x27;list&#x27;</span>,num)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注意：#6中不能直接<code>print('random.shuffle(list)')</code>，该库的作用是打乱列表元素，是直接作用于改变列表的，并不会有任何返回值。</p><h3 id="三-time时间模块"><a class="markdownIt-Anchor" href="#三-time时间模块"></a> 三、time时间模块</h3><p>只支持到2038年，需要更换到datetime。</p><p>在python中有三种方式来表示时间：时间戳、格式化时间字符串、结构化时间。</p><h3 id="1-时间戳"><a class="markdownIt-Anchor" href="#1-时间戳"></a> 1. 时间戳</h3><p>时间戳在<a href="https://blog.tangspoon.cn/2021/12/06/%E5%8E%9F%E5%88%9B%EF%BD%9C%E8%BD%AC%E5%8F%91B%E7%AB%99UP%E4%B8%BB%E5%8A%A8%E6%80%81%E5%88%B0%E5%BE%AE%E4%BF%A1python%E8%84%9A%E6%9C%AC/">《原创｜转发B站UP主动态到微信python脚本》</a>有相关应用，可以通过<code>time.time()</code>获得。获得时间戳后可有用<code>time.localtime(time.time())</code>来转化为结构化时间。</p><img src="https://picbed.tangspoon.cn/uPic/image-20220209155458114.png" alt="image-20220209155458114" style="zoom:50%;" /><p>时间戳可做算术运算：计算程序运行时间。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>():</span></span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">t1=time.time()</span><br><span class="line">func()</span><br><span class="line">t2=time.time()</span><br><span class="line">print(t2-t1)</span><br></pre></td></tr></table></figure><h3 id="2-结构化时间struct_time"><a class="markdownIt-Anchor" href="#2-结构化时间struct_time"></a> 2. 结构化时间(struct_time)</h3><p>一个包含了年月日时分秒的多元元组，例如<code>time.struct_time(tm_year=2017, tm_mon=9, tm_mday=26, tm_hour=9, tm_min=14, tm_sec=50, tm_wday=1, tm_yday=269, tm_isdst=0)</code></p><p>注意：<code>time.localtime()</code>的作用是格式化时间戳为本地时间。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lt = time.localtime()</span><br><span class="line">print(lt[:<span class="number">3</span>])</span><br><span class="line"><span class="comment"># (2022, 2, 9)</span></span><br></pre></td></tr></table></figure><h3 id="3-格式化时间字符串"><a class="markdownIt-Anchor" href="#3-格式化时间字符串"></a> 3. 格式化时间字符串</h3><p>利用<code>time.strftime('%Y-%m-%d %H:%M:%S')</code>类似的方式即可获得格式化时间的字符串。</p><p>比如我用<code>time.localtime(time.time())</code>获得了具有结构化时间，现在我要格式化成我想要的时间格式：20220101，我可以这样做：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">struct_time&#x3D;time.localtime(time.time())</span><br><span class="line">time.strftime(&#39;%Y%m%d&#39;,struct_time)</span><br></pre></td></tr></table></figure><h3 id="4-反向格式化"><a class="markdownIt-Anchor" href="#4-反向格式化"></a> 4. 反向格式化</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">t=<span class="string">&#x27;20220901&#x27;</span></span><br><span class="line">st=time.strptime(t,<span class="string">&#x27;%Y%m%d&#x27;</span>)</span><br><span class="line"><span class="comment">#输出time.struct_time(tm_year=2022, tm_mon=9, tm_mday=1, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=3, tm_yday=244, tm_isdst=-1)</span></span><br></pre></td></tr></table></figure><p>注意：<code>t</code>和<code>st</code>里面的格式必须相同。比如<code>t</code>的年月日使用<code>-</code>隔开，那么<code>%Y-%m</code></p><h3 id="四-datetime"><a class="markdownIt-Anchor" href="#四-datetime"></a> 四、datetime</h3><p>time和datetime的区别：前者到1970～2038年，后者比前者高级了不少，可以理解为是对前者进行了封装，提供了更多的实用函数。</p><p>主要包含有几个类别：</p><ul><li><ol><li>time：只关注时间</li></ol></li><li><ol start="2"><li>date：只关注日期</li></ol></li><li><ol start="3"><li>datetime：以上两者都有</li></ol></li><li><ol start="4"><li>timedelta：计算时间跨度</li></ol></li><li><ol start="5"><li>tzinfo：时区</li></ol></li></ul><p>注意：几个类别都是属于datetime模块的函数，都需要导入使用。</p><p>实际使用中，用的比较多的是<code>3</code>和<code>4</code>，<code>1、2</code>和<code>3</code>并没有太大区别，也就是说基本可以取代。</p><p>所以，我上面图片中的代码其实可以更好的优化为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 通过time.time()获得当前时间戳,通过fromtimestamp转换成date</span></span><br><span class="line">dt=date.fromtimestamp(time.time())</span><br><span class="line">print(dt.strftime(<span class="string">&#x27;%Y%m%d&#x27;</span>))</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://picbed.tangspoon.cn/uPic/image-20211208153223437-20211208154222323.png&quot; alt=&quot;image-20211208153223437&quot; /&gt;&lt;/p&gt;
&lt;p&gt;标准库：os、random、time、datetime&lt;/p&gt;</summary>
    
    
    
    <category term="Python" scheme="https://blog.tangspoon.cn/categories/Python/"/>
    
    
    <category term="Python" scheme="https://blog.tangspoon.cn/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>macOS让终端走代理，解决curl失败问题</title>
    <link href="https://blog.tangspoon.cn/2022/02/09/macOS%E8%AE%A9%E7%BB%88%E7%AB%AF%E8%B5%B0%E4%BB%A3%E7%90%86%EF%BC%8C%E8%A7%A3%E5%86%B3curl%E5%A4%B1%E8%B4%A5%E9%97%AE%E9%A2%98/"/>
    <id>https://blog.tangspoon.cn/2022/02/09/macOS%E8%AE%A9%E7%BB%88%E7%AB%AF%E8%B5%B0%E4%BB%A3%E7%90%86%EF%BC%8C%E8%A7%A3%E5%86%B3curl%E5%A4%B1%E8%B4%A5%E9%97%AE%E9%A2%98/</id>
    <published>2022-02-09T07:59:28.000Z</published>
    <updated>2022-02-14T06:29:47.902Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://picbed.tangspoon.cn/uPic/image-20220205160123197.png" alt="image-20220205160123197" /></p><a id="more"></a><p>前提是你得有代理</p><p>我使用的是<code>ClashX.app</code>软件，可以看到HTTP端口是7892</p><p><img src="https://picbed.tangspoon.cn/uPic/image-20220205155421631.png" alt="image-20220205155421631" /></p><p>那么我们要让终端走HTTP代理，在终端执行下面的代码即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export http_proxy&#x3D;http:&#x2F;&#x2F;127.0.0.1:7892;export https_proxy&#x3D;http:&#x2F;&#x2F;127.0.0.1:7892</span><br></pre></td></tr></table></figure><p>注意：只是在当前页面终端页面有效。</p><p>测试是否生效</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl ip.gs</span><br></pre></td></tr></table></figure><p><img src="https://picbed.tangspoon.cn/uPic/image-20220205155734830.png" alt="image-20220205155734830" /></p><p>现在就应该可以<code>curl</code>github的内容了。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://picbed.tangspoon.cn/uPic/image-20220205160123197.png&quot; alt=&quot;image-20220205160123197&quot; /&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="macOS" scheme="https://blog.tangspoon.cn/categories/macOS/"/>
    
    
    <category term="macOS" scheme="https://blog.tangspoon.cn/tags/macOS/"/>
    
  </entry>
  
  <entry>
    <title>Python学习日志-05｜查漏补缺</title>
    <link href="https://blog.tangspoon.cn/2022/02/05/Python%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%BF%97-05%EF%BD%9C%E6%9F%A5%E6%BC%8F%E8%A1%A5%E7%BC%BA/"/>
    <id>https://blog.tangspoon.cn/2022/02/05/Python%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%BF%97-05%EF%BD%9C%E6%9F%A5%E6%BC%8F%E8%A1%A5%E7%BC%BA/</id>
    <published>2022-02-05T10:49:26.000Z</published>
    <updated>2022-02-14T06:29:43.280Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://picbed.tangspoon.cn/uPic/image-20211208153223437-20211208154222323-20220209184953475.png" alt="image-20211208153223437" /></p><p>数据类型和变量、递归、切片、range</p><a id="more"></a><h2 id="一-基础"><a class="markdownIt-Anchor" href="#一-基础"></a> 一、基础</h2><h3 id="1-数据类型和变量"><a class="markdownIt-Anchor" href="#1-数据类型和变量"></a> 1. 数据类型和变量</h3><h4 id="整数"><a class="markdownIt-Anchor" href="#整数"></a> 整数</h4><p>对于很大的数，可以用100_000_000表示</p><h4 id="浮点数"><a class="markdownIt-Anchor" href="#浮点数"></a> 浮点数</h4><p>会出现四舍五入的情况</p><h4 id="字符串"><a class="markdownIt-Anchor" href="#字符串"></a> 字符串</h4><ul><li><p>转义字符：\ +需要转的字符。例如我要在’ '里输出&quot;&quot;，\&quot;即可</p></li><li><p><strong>r’ '内部的不会被转义</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">&#x27;111&#x27;</span><span class="string">r&#x27;\t&#x27;</span><span class="string">&#x27;1111&#x27;</span>)</span><br><span class="line"><span class="comment"># 111\t1111</span></span><br></pre></td></tr></table></figure></li><li><p>多行输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">&#x27;&#x27;&#x27;第一行</span></span><br><span class="line"><span class="string">第二行</span></span><br><span class="line"><span class="string">第三行&#x27;&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第一行</span></span><br><span class="line">第二行</span><br><span class="line">第三行</span><br></pre></td></tr></table></figure><h4 id="变量"><a class="markdownIt-Anchor" href="#变量"></a> 变量</h4><p>变量在内存中的表示</p><p><img src="https://picbed.tangspoon.cn/uPic/image-20220208141522481.png" alt="image-20220208141522481" /></p><p><img src="https://picbed.tangspoon.cn/uPic/image-20220208141533655.png" alt="image-20220208141533655" /></p></li></ul><h3 id="2-编码"><a class="markdownIt-Anchor" href="#2-编码"></a> 2. 编码</h3><p>ASCII是美国一开始设计计算机制定的，用不了其他语言。Unicode可以解决所有语言的编码问题，但是长度是固定的。UTF-8是可变的，可以节省许多空间。</p><p>在计算机内存中，统一使用Unicode编码，当需要保存到硬盘或者需要传输的时候，就要转化为UTF-8编码。所以在当你打开一个txt文件时，计算机会把UTF-8的文件转换为Unicode的，然后交给内存处理，当编辑完成后，再转换为UTF-8保存到硬盘。</p><h4 id="格式化"><a class="markdownIt-Anchor" href="#格式化"></a> 格式化</h4><h5 id="s"><a class="markdownIt-Anchor" href="#s"></a> %s</h5><p>最方便的格式化方式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">&#x27;name:%s,age:%s&#x27;</span> %(<span class="string">&#x27;tang&#x27;</span>,<span class="number">25</span>))</span><br></pre></td></tr></table></figure><p>在python中，当<code>%</code>是个普通字符时，需要加多一个%来显示。例如我需要输出<code>7%</code>时</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">&#x27;%s%%&#x27;</span> %<span class="number">7</span>)</span><br></pre></td></tr></table></figure><h5 id="f-string"><a class="markdownIt-Anchor" href="#f-string"></a> f-string</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># f&#x27;&#123;变量&#125;&#x27;</span></span><br><span class="line">r=<span class="number">3</span></span><br><span class="line">s=<span class="number">22</span>*r</span><br><span class="line">print(<span class="string">f&#x27;r is:<span class="subst">&#123;r&#125;</span>,s is:<span class="subst">&#123;s&#125;</span>)</span></span><br></pre></td></tr></table></figure><p>#####保留小数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.1f 一位</span><br><span class="line">.2f 两位</span><br></pre></td></tr></table></figure><h3 id="3-list和tuple"><a class="markdownIt-Anchor" href="#3-list和tuple"></a> 3. list和tuple</h3><h4 id="list的增删改"><a class="markdownIt-Anchor" href="#list的增删改"></a> list的增删改</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 增加</span></span><br><span class="line">list.append()</span><br><span class="line">list.insert(i,string)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除</span></span><br><span class="line">list.pop() <span class="comment">#删除最后一个</span></span><br><span class="line">list.pop(i)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 改</span></span><br><span class="line">list[i]=string</span><br></pre></td></tr></table></figure><h4 id="tuple的特性"><a class="markdownIt-Anchor" href="#tuple的特性"></a> tuple的特性</h4><ul><li>不能更改</li><li>优点：安全。能用tuple即用tuple</li></ul><p>不过注意</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">t=(<span class="number">1</span>) <span class="comment">#代表的是整数1，不是tuple只有1这个元素</span></span><br><span class="line"><span class="comment">#正确表示应该是在后面加个逗号</span></span><br><span class="line">t=(<span class="number">1</span>,)</span><br></pre></td></tr></table></figure><p>可变的tuple</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">t&#x3D;(1,2,[&#39;a&#39;,&#39;b&#39;])</span><br><span class="line">t[2][0]&#x3D;&#39;A&#39;</span><br><span class="line">print(t)</span><br></pre></td></tr></table></figure><h4 id="dict和set"><a class="markdownIt-Anchor" href="#dict和set"></a> dict和set</h4><p>具体在《草根学python》复习中查看。</p><h3 id="4运算符"><a class="markdownIt-Anchor" href="#4运算符"></a> 4.运算符</h3><h4 id="身份运算符-is-is-not"><a class="markdownIt-Anchor" href="#身份运算符-is-is-not"></a> 身份运算符 is 、is not</h4><p>判断两个表示符是不是引用自同一个对象，就像<code>id(x)==id(y)</code>一个道理。</p><p>而<code>==</code>则是判断两个<code>值</code>是否相等。</p><h2 id="二-函数-递归"><a class="markdownIt-Anchor" href="#二-函数-递归"></a> 二、函数-递归</h2><p>递归知识重复执行操作的方法。只需要理解到最小规模的逻辑，设计出等价关系式即可。</p><p>递归的特征：自己调用自己，有一定的结束条件，效率不高</p><p>斐波函数</p><blockquote><p>1,1,2,3,5,8,13</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 非递归方法（普通循环）</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib1</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span> <span class="keyword">or</span> n == <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    a = <span class="number">1</span></span><br><span class="line">    b = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n - <span class="number">2</span>):</span><br><span class="line">        temp = a + b</span><br><span class="line">        a = b</span><br><span class="line">        b = temp</span><br><span class="line">    <span class="keyword">return</span> b</span><br><span class="line"><span class="comment"># 核心思想就是把a,b从第一位开始，整体向后移一位。a=b，b=temp就可以实现整体向后移的目的。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 递归方法</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib2</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">if</span> n&lt;=<span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span> <span class="comment">## 结束条件</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> fib2(n<span class="number">-2</span>)+fib2(n<span class="number">-1</span>) <span class="comment">## 等价关系式</span></span><br><span class="line">     </span><br></pre></td></tr></table></figure><p>可以看到两种算法的思想是不一样的。非递归方法需要抽象出一定的规律，根据这个规律来设计算法。比如上面的a,b整体向后移，根据这个规律来设计出用一个temp来储存后面b需要的数据。而递归的思想是指设计出口和缩小规模的逻辑，具体后面怎么实现不管。比如上面我们只需要想清楚是前一个数+后一个数即可，那么我们就可以直接设计出<code>fib(n-1)+fib(n-2)</code>这种超级简约的算法。</p><p>关于递归的最好理解是来自知乎的一篇文章：<a href="https://www.zhihu.com/question/31412436">对于递归有没有什么好的理解方法？</a></p><blockquote><h3 id="递归的三大要素"><a class="markdownIt-Anchor" href="#递归的三大要素"></a> 递归的三大要素</h3><p><strong>第一要素：明确你这个函数想要干什么</strong></p><p><strong>第二要素：寻找递归结束条件</strong></p><p>当n=1或者n=2时的一些特殊情况</p><p><strong>第三要素：找出函数的等价关系式</strong>(最难)</p><p>求递归结束的条件，你直接把 n 压缩到很小很小就行了，因为 n 越小，我们就越容易直观着算出 f(n) 的多少</p></blockquote><h2 id="三-高级特性"><a class="markdownIt-Anchor" href="#三-高级特性"></a> 三、高级特性</h2><h3 id="切片"><a class="markdownIt-Anchor" href="#切片"></a> 切片</h3><p>应用于<code>list</code>和<code>tuple</code>取部分元素。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list&#x3D;[1,2,3,4,5]</span><br></pre></td></tr></table></figure><p>取前面三个数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list[0,3]</span><br></pre></td></tr></table></figure><p>取倒数第一个</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list[-1]</span><br></pre></td></tr></table></figure><p>取倒数两个（就是从<code>-2</code>一直到最后）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list[-2:]</span><br></pre></td></tr></table></figure><p>前十个，每两个取一个</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list[:<span class="number">10</span>:<span class="number">2</span>]</span><br></pre></td></tr></table></figure><p>所有数，每5个取一个</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(l[::5])</span><br></pre></td></tr></table></figure><h2 id="四-range"><a class="markdownIt-Anchor" href="#四-range"></a> 四、range()</h2><p>range(start,stop,step)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">range(100,0,-1) # 从100倒数回0，每次步进1</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://picbed.tangspoon.cn/uPic/image-20211208153223437-20211208154222323-20220209184953475.png&quot; alt=&quot;image-20211208153223437&quot; /&gt;&lt;/p&gt;
&lt;p&gt;数据类型和变量、递归、切片、range&lt;/p&gt;</summary>
    
    
    
    <category term="Python" scheme="https://blog.tangspoon.cn/categories/Python/"/>
    
    
    <category term="Python" scheme="https://blog.tangspoon.cn/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>The following packages have unmet dependencies: Depends: xxx but is to be installed</title>
    <link href="https://blog.tangspoon.cn/2022/01/26/The-following-packages-have-unmet-dependencies-Depends-xxx-but-is-to-be-installed/"/>
    <id>https://blog.tangspoon.cn/2022/01/26/The-following-packages-have-unmet-dependencies-Depends-xxx-but-is-to-be-installed/</id>
    <published>2022-01-26T06:47:20.000Z</published>
    <updated>2022-02-09T06:16:58.366Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://picbed.tangspoon.cn/uPic/image-20220126144850057.png" alt="image-20220126144850057" /></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">The following packages have unmet dependencies:</span><br><span class="line"> libxml2-dev : Depends: libxml2 (&#x3D; 2.9.3+dfsg1-1ubuntu0.7) but 2.9.4+dfsg1-7+deb10u2 is to be installed</span><br><span class="line">E: Unable to correct problems, you have held broken packages.</span><br></pre></td></tr></table></figure><p>今天在安装shairplay的时候出现了以上问题</p><p>原因是以来版本不一样</p><p>解决方法很简单——卸载、重装即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt remove libxml2-dev</span><br><span class="line">apt install libxml2-dev</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://picbed.tangspoon.cn/uPic/image-20220126144850057.png&quot; alt=&quot;image-20220126144850057&quot; /&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight pla</summary>
      
    
    
    
    <category term="linux" scheme="https://blog.tangspoon.cn/categories/linux/"/>
    
    
    <category term="linux" scheme="https://blog.tangspoon.cn/tags/linux/"/>
    
    <category term="troubleshooting" scheme="https://blog.tangspoon.cn/tags/troubleshooting/"/>
    
  </entry>
  
  <entry>
    <title>原创｜自建房没有丰巢？自己造一个！｜打造智能快递柜</title>
    <link href="https://blog.tangspoon.cn/2022/01/14/%E5%8E%9F%E5%88%9B%EF%BD%9C%E8%87%AA%E5%BB%BA%E6%88%BF%E6%B2%A1%E6%9C%89%E4%B8%B0%E5%B7%A2%EF%BC%9F%E8%87%AA%E5%B7%B1%E9%80%A0%E4%B8%80%E4%B8%AA%EF%BC%81%EF%BD%9C%E6%89%93%E9%80%A0%E6%99%BA%E8%83%BD%E5%BF%AB%E9%80%92%E6%9F%9C/"/>
    <id>https://blog.tangspoon.cn/2022/01/14/%E5%8E%9F%E5%88%9B%EF%BD%9C%E8%87%AA%E5%BB%BA%E6%88%BF%E6%B2%A1%E6%9C%89%E4%B8%B0%E5%B7%A2%EF%BC%9F%E8%87%AA%E5%B7%B1%E9%80%A0%E4%B8%80%E4%B8%AA%EF%BC%81%EF%BD%9C%E6%89%93%E9%80%A0%E6%99%BA%E8%83%BD%E5%BF%AB%E9%80%92%E6%9F%9C/</id>
    <published>2022-01-14T02:51:58.000Z</published>
    <updated>2022-03-04T02:12:27.051Z</updated>
    
    <content type="html"><![CDATA[<img src="https://picbed.tangspoon.cn/uPic/image-20220126161032850.png" alt="image-20220126161032850" style="zoom:30%;" /><p>前些日子家里装修，网购了好多好多东西。但城中村里没有类似丰巢那样的投递柜（对，我这条村真的没有），放在村里的代收点1块一个小件，2块一个大件，比丰巢还贵？而且感觉要跑超过500m去那个快递很麻烦。所以，我为什么不能自己造一个“丰巢”呢？</p><a id="more"></a><p><img src="https://picbed.tangspoon.cn/uPic/image-20220126161110667.png" alt="image-20220126161110667" /></p><p>物料：</p><p>香橙派、USB继电器、5v电磁锁、单门柜子。</p><h2 id="一-思路"><a class="markdownIt-Anchor" href="#一-思路"></a> 一、思路</h2><p>投递员扫描二维码进入网页，填密码，打开柜子。所以项目主要分为两部分：</p><ol><li>软件：验证密码和控制电磁锁的系统</li><li>硬件：托管系统的硬件，电磁锁</li></ol><p>系统实际上就只有一个密码校验功能，很简单。用flask写超级快。</p><p>硬件部分我选择了香橙派托管flask网页，内网穿透让在外网的投递员访问系统，配合USB继电器来控制电磁锁的开关。</p><h2 id="二-硬件"><a class="markdownIt-Anchor" href="#二-硬件"></a> 二、硬件</h2><h3 id="1-香橙派zero-512mb"><a class="markdownIt-Anchor" href="#1-香橙派zero-512mb"></a> 1. 香橙派zero 512mb</h3><p>闲鱼70包邮</p><h3 id="2-电磁锁"><a class="markdownIt-Anchor" href="#2-电磁锁"></a> 2. 电磁锁</h3><p>购买5v的即可</p><p><img src="https://picbed.tangspoon.cn/uPic/image-20220126150623931.png" alt="image-20220126150623931" /></p><h3 id="3-usb继电器"><a class="markdownIt-Anchor" href="#3-usb继电器"></a> 3. USB继电器</h3><p>优点：免驱、5V供电、商家提供详细说明</p><p><img src="https://picbed.tangspoon.cn/uPic/image-20220126150308608.png" alt="image-20220126150308608" /></p><p><img src="https://picbed.tangspoon.cn/uPic/image-20220126150521278.png" alt="image-20220126150521278" /></p><h2 id="三-软件系统"><a class="markdownIt-Anchor" href="#三-软件系统"></a> 三、软件系统</h2><p><img src="https://picbed.tangspoon.cn/uPic/image-20220103113637980.png" alt="image-20220103113637980" /></p><h3 id="1-flask-主程序-apppy"><a class="markdownIt-Anchor" href="#1-flask-主程序-apppy"></a> 1. flask 主程序 <a href="http://app.py">app.py</a></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template, request, redirect, url_for</span><br><span class="line"><span class="keyword">import</span> decrypt</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(&#x27;/&#x27;, methods=[&#x27;GET&#x27;, &#x27;POST&#x27;])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        password = request.form[<span class="string">&#x27;password&#x27;</span>]</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;result&#x27;</span>,</span><br><span class="line">                                password=password))</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(&#x27;/result&#x27;, methods=[&#x27;GET&#x27;])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">result</span>():</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">&#x27;/root/express_system/password.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        encrypt_text = f.read()</span><br><span class="line">    password = request.args.get(<span class="string">&#x27;password&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> password == decrypt.decrypt_data(encrypt_text):</span><br><span class="line">        os.system(<span class="string">&#x27;bash /root/express_system/open.sh&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&quot;correct.html&quot;</span>,</span><br><span class="line">                               password=password)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&#x27;error.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>, port=<span class="number">8443</span>)</span><br></pre></td></tr></table></figure><p>注意：上面 line20 要放<code>password.txt</code>的绝对路径</p><h3 id="2-opensh"><a class="markdownIt-Anchor" href="#2-opensh"></a> 2. <a href="http://open.sh">open.sh</a></h3><p>插入usb电磁继电器之后，香橙派会识别出USB设备。我购买的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line">echo -n -e &quot;\xA0\x01\x01\xA2&quot; &gt;&#x2F;dev&#x2F;ttyUSB0</span><br><span class="line">sleep 0.5s</span><br><span class="line">echo -n -e &quot;\xA0\x01\x00\xA1&quot; &gt;&#x2F;dev&#x2F;ttyUSB0</span><br></pre></td></tr></table></figure><h3 id="3-decryptpy"><a class="markdownIt-Anchor" href="#3-decryptpy"></a> 3. <a href="http://decrypt.py">decrypt.py</a></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 不用做任何修改</span></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> PKCS1_v1_5 <span class="keyword">as</span> PKCS1_cipher</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_key</span>(<span class="params">key_file</span>):</span></span><br><span class="line">    <span class="keyword">with</span> open(key_file) <span class="keyword">as</span> f:</span><br><span class="line">        data = f.read()</span><br><span class="line">        key = RSA.importKey(data)</span><br><span class="line">    <span class="keyword">return</span> key</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt_data</span>(<span class="params">encrypt_msg</span>):</span></span><br><span class="line">    private_key = get_key(<span class="string">&#x27;xxxx/xxxx/rsa_private_key.pem&#x27;</span>)</span><br><span class="line">    cipher = PKCS1_cipher.new(private_key)</span><br><span class="line">    back_text = cipher.decrypt(base64.b64decode(encrypt_msg), <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> back_text.decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br></pre></td></tr></table></figure><p>注意：line15 填写绝对路径</p><h3 id="4-每周更换密码并发送到微信-randpwdweeklypy"><a class="markdownIt-Anchor" href="#4-每周更换密码并发送到微信-randpwdweeklypy"></a> 4. 每周更换密码并发送到微信 <a href="http://randPwdWeekly.py">randPwdWeekly.py</a></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> PKCS1_v1_5 <span class="keyword">as</span> PKCS1_cipher</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 此脚本设置每周执行一次</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_key</span>(<span class="params">key_file</span>):</span></span><br><span class="line">    <span class="keyword">with</span> open(key_file) <span class="keyword">as</span> f:</span><br><span class="line">        data = f.read()</span><br><span class="line">        key = RSA.importKey(data)</span><br><span class="line">    <span class="keyword">return</span> key</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt_data</span>(<span class="params">msg</span>):</span></span><br><span class="line">    public_key = get_key(<span class="string">&#x27;rsa_public_key.pem&#x27;</span>)</span><br><span class="line">    cipher = PKCS1_cipher.new(public_key)</span><br><span class="line">    encrypt_text = base64.b64encode(cipher.encrypt(bytes(msg.encode(<span class="string">&quot;utf8&quot;</span>))))</span><br><span class="line">    <span class="keyword">return</span> encrypt_text.decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    server_url = <span class="string">&#x27;https://sctapi.ftqq.com/xxxxxxxx.send&#x27;</span></span><br><span class="line">    randPwd = str(random.randint(<span class="number">100000</span>, <span class="number">1000000</span>))</span><br><span class="line">    print(randPwd)</span><br><span class="line">    <span class="comment"># server酱发送到wechat</span></span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&#x27;title&#x27;</span>: <span class="string">&#x27;智能快递柜密码已更新!!&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;desp&#x27;</span>: <span class="string">&#x27;新密码是：&#x27;</span> + randPwd</span><br><span class="line">    &#125;</span><br><span class="line">    requests.post(server_url, params=data)</span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">&#x27;/root/express_system/password2.txt&#x27;</span>, <span class="string">&#x27;w+&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(randPwd)</span><br><span class="line">    encrypt_data(randPwd)</span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">&#x27;/root/express_system/password.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(encrypt_data(randPwd))</span><br></pre></td></tr></table></figure><p>注意：<code>line24</code> 要改成自己的server酱的<code>key</code></p><h3 id="5-生成rsa的两种key-creatersa_keypy"><a class="markdownIt-Anchor" href="#5-生成rsa的两种key-creatersa_keypy"></a> 5. 生成RSA的两种key  createRSA_Key.py</h3><p>该脚本只执行一次即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto <span class="keyword">import</span> Random</span><br><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line"></span><br><span class="line"><span class="comment"># 只用一次！！</span></span><br><span class="line"></span><br><span class="line">random_generator = Random.new().read</span><br><span class="line">rsa = RSA.generate(<span class="number">2048</span>, random_generator)</span><br><span class="line"><span class="comment"># 生成私钥</span></span><br><span class="line">private_key = rsa.exportKey()</span><br><span class="line">print(private_key.decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"><span class="comment"># 生成公钥</span></span><br><span class="line">public_key = rsa.publickey().exportKey()</span><br><span class="line">print(public_key.decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">&#x27;/root/express_system/rsa_private_key.pem&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(private_key)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">&#x27;/root/express_system/rsa_public_key.pem&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(public_key)</span><br></pre></td></tr></table></figure><h2 id="四-项目运行"><a class="markdownIt-Anchor" href="#四-项目运行"></a> 四、项目运行</h2><h3 id="1-获取项目"><a class="markdownIt-Anchor" href="#1-获取项目"></a> 1. 获取项目</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;tangspoon66&#x2F;express_sys.git</span><br></pre></td></tr></table></figure><h3 id="2-安装flask"><a class="markdownIt-Anchor" href="#2-安装flask"></a> 2. 安装flask</h3><p>参考：<a href="https://blog.tangspoon.cn/2020/12/26/Flask-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B001-Hello/">Flask 学习笔记 - Hello</a></p><h3 id="3-flask后台运行"><a class="markdownIt-Anchor" href="#3-flask后台运行"></a> 3. flask后台运行</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">screen -S express_sys</span><br></pre></td></tr></table></figure><p>在新弹出的screen里输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python &#x2F;root&#x2F;express_sys&#x2F;app.py</span><br></pre></td></tr></table></figure><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 列出所有screen</span><br><span class="line">screen -ls</span><br><span class="line"># 返回screen</span><br><span class="line">screen -d screen</span><br></pre></td></tr></table></figure></blockquote><p>随后可以关闭会话窗口，flask项目还是可以访问的。</p><h3 id="4-配置内网穿透frp"><a class="markdownIt-Anchor" href="#4-配置内网穿透frp"></a> 4. 配置内网穿透frp</h3><p>参考：<a href="https://blog.tangspoon.cn/2021/12/24/frp%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E6%80%8E%E4%B9%88%E7%94%A8%EF%BC%9F%EF%BD%9C%E8%AE%BF%E9%97%AE%E5%86%85%E7%BD%91web%E9%A1%B9%E7%9B%AE/">frp 内网穿透怎么用？｜访问内网 web 项目</a></p><h3 id="5-flask-和-frp开机自启"><a class="markdownIt-Anchor" href="#5-flask-和-frp开机自启"></a> 5. flask 和 frp开机自启</h3><p>参考：<a href="https://blog.tangspoon.cn/2022/01/04/linux%E4%BD%BF%E7%94%A8supervisor%E5%AE%9E%E7%8E%B0%E5%BC%80%E6%9C%BA%E8%87%AA%E5%90%AF/">linux 使用 supervisor 实现开机自启</a></p><h3 id="6-还需要更改一些绝对路径之类的"><a class="markdownIt-Anchor" href="#6-还需要更改一些绝对路径之类的"></a> 6. 还需要更改一些绝对路径之类的。</h3>]]></content>
    
    
    <summary type="html">&lt;img src=&quot;https://picbed.tangspoon.cn/uPic/image-20220126161032850.png&quot; alt=&quot;image-20220126161032850&quot; style=&quot;zoom:30%;&quot; /&gt;
&lt;p&gt;前些日子家里装修，网购了好多好多东西。但城中村里没有类似丰巢那样的投递柜（对，我这条村真的没有），放在村里的代收点1块一个小件，2块一个大件，比丰巢还贵？而且感觉要跑超过500m去那个快递很麻烦。所以，我为什么不能自己造一个“丰巢”呢？&lt;/p&gt;</summary>
    
    
    
    <category term="硬件" scheme="https://blog.tangspoon.cn/categories/%E7%A1%AC%E4%BB%B6/"/>
    
    
    <category term="linux" scheme="https://blog.tangspoon.cn/tags/linux/"/>
    
    <category term="Flask" scheme="https://blog.tangspoon.cn/tags/Flask/"/>
    
    <category term="Python" scheme="https://blog.tangspoon.cn/tags/Python/"/>
    
    <category term="OrangePi" scheme="https://blog.tangspoon.cn/tags/OrangePi/"/>
    
  </entry>
  
  <entry>
    <title>linux使用supervisor实现开机自启</title>
    <link href="https://blog.tangspoon.cn/2022/01/04/linux%E4%BD%BF%E7%94%A8supervisor%E5%AE%9E%E7%8E%B0%E5%BC%80%E6%9C%BA%E8%87%AA%E5%90%AF/"/>
    <id>https://blog.tangspoon.cn/2022/01/04/linux%E4%BD%BF%E7%94%A8supervisor%E5%AE%9E%E7%8E%B0%E5%BC%80%E6%9C%BA%E8%87%AA%E5%90%AF/</id>
    <published>2022-01-04T06:39:02.000Z</published>
    <updated>2022-02-09T06:31:47.927Z</updated>
    
    <content type="html"><![CDATA[<img src="https://picbed.tangspoon.cn/uPic/image-20220104144501685.png" alt="image-20220104144501685" style="zoom:30%;" /><p>智能快递柜项目需要flask和内网穿透实现开机自启，使用supervisor非常方便。</p><a id="more"></a><p>相关Introduce在<a href="http://supervisord.org/introduction.html#overview">官网</a>有，这里只记录在<strong>香橙派</strong>armbian环境下的使用方法。</p><h2 id="安装"><a class="markdownIt-Anchor" href="#安装"></a> 安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install supervisor</span><br></pre></td></tr></table></figure><h2 id="配置"><a class="markdownIt-Anchor" href="#配置"></a> 配置</h2><h3 id="查看项目安装位置"><a class="markdownIt-Anchor" href="#查看项目安装位置"></a> 查看项目安装位置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">whereis supervisor</span><br></pre></td></tr></table></figure><p><img src="https://picbed.tangspoon.cn/uPic/image-20220104145552053.png" alt="image-20220104145552053" /></p><h3 id="配置conf"><a class="markdownIt-Anchor" href="#配置conf"></a> 配置conf</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd &#x2F;etc&#x2F;supervisor</span><br><span class="line"># 新建log方便下面使用</span><br><span class="line">touch supervisor.log</span><br><span class="line">vim supervisor.conf</span><br></pre></td></tr></table></figure><p>在文件最后添加以下内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[program:xxx]</span><br><span class="line">command&#x3D;xxxxxxx                                                  </span><br><span class="line">autostart&#x3D;true                                                                        </span><br><span class="line">autorestart&#x3D;true                                                             </span><br><span class="line">stdout_logfile &#x3D; &#x2F;etc&#x2F;supervisor&#x2F;supervisor.log</span><br><span class="line">startsecs &#x3D; 5</span><br><span class="line">stopwaitsecs&#x3D;0</span><br></pre></td></tr></table></figure><p><code>line1</code>: 填写项目名称（例如我的是express_system）</p><p><code>line2</code>：执行脚本的命令（例如我的是python /root/express_system/app.py）</p><p><code>autostart</code>：在 supervisord 启动的时候也自动启动</p><p><code>autorestart</code>：程序异常退出后自动重启</p><p><code>startsecs</code>：启动 5 秒后没有异常退出，就当作已经正常启动了</p><p><code>stopwaitsecs</code>：停止等待时间</p><h3 id="重启"><a class="markdownIt-Anchor" href="#重启"></a> 重启</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">supervisorctl reload</span><br></pre></td></tr></table></figure><h2 id="supervisor其他命令"><a class="markdownIt-Anchor" href="#supervisor其他命令"></a> supervisor其他命令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># 输入查看自启程序的状态</span><br><span class="line">supervisorctl</span><br><span class="line"></span><br><span class="line">#关闭所有任务</span><br><span class="line">supervisorctl shutdown</span><br><span class="line"></span><br><span class="line"># 启动某个进</span><br><span class="line">supervisorctl start programxxx</span><br><span class="line"></span><br><span class="line"># 重启某个进程</span><br><span class="line">supervisorctl restart programxxx</span><br><span class="line"></span><br><span class="line"># 停止全部进程 注：start、restart、stop都不会载入最新的配置文件</span><br><span class="line">supervisorctl stop all</span><br><span class="line"></span><br><span class="line"># 载入最新的配置文件，停止原有进程并按新的配置启动、管理所有进程。</span><br><span class="line">supervisorctl reload</span><br><span class="line"></span><br><span class="line"># 根据最新的配置文件，启动新配置或有改动的进程，配置没有改动的进程不会受影响而重启。</span><br><span class="line">supervisorctl update</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;img src=&quot;https://picbed.tangspoon.cn/uPic/image-20220104144501685.png&quot; alt=&quot;image-20220104144501685&quot; style=&quot;zoom:30%;&quot; /&gt;
&lt;p&gt;智能快递柜项目需要flask和内网穿透实现开机自启，使用supervisor非常方便。&lt;/p&gt;</summary>
    
    
    
    <category term="linux" scheme="https://blog.tangspoon.cn/categories/linux/"/>
    
    <category term="智能快递柜" scheme="https://blog.tangspoon.cn/categories/linux/%E6%99%BA%E8%83%BD%E5%BF%AB%E9%80%92%E6%9F%9C/"/>
    
    
    <category term="linux" scheme="https://blog.tangspoon.cn/tags/linux/"/>
    
    <category term="supervisor" scheme="https://blog.tangspoon.cn/tags/supervisor/"/>
    
  </entry>
  
  <entry>
    <title>Flask-学习笔记02-模版与表单</title>
    <link href="https://blog.tangspoon.cn/2021/12/27/Flask-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B002-%E6%A8%A1%E7%89%88%E4%B8%8E%E8%A1%A8%E5%8D%95/"/>
    <id>https://blog.tangspoon.cn/2021/12/27/Flask-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B002-%E6%A8%A1%E7%89%88%E4%B8%8E%E8%A1%A8%E5%8D%95/</id>
    <published>2021-12-27T09:22:41.000Z</published>
    <updated>2022-02-09T06:32:33.164Z</updated>
    
    <content type="html"><![CDATA[<img src="https://picbed.tangspoon.cn/uPic/image-20201226170026026.png" alt="image-20201226170026026" style="zoom:50%;" /><p>应用于智能快递柜的密码校验web</p><a id="more"></a><p>最简单的flask项目</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(&#x27;/&#x27;)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_world</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello, World!&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ ==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>,port=<span class="number">8080</span>)</span><br></pre></td></tr></table></figure><h2 id="一-模版"><a class="markdownIt-Anchor" href="#一-模版"></a> 一、模版</h2><p>在flask项目内新建一个<code>templates</code>文件夹放置html，新建static文件夹放置css。</p><img src="https://picbed.tangspoon.cn/uPic/image-20211227172852877.png" alt="image-20211227172852877" style="zoom:50%;" /><h3 id="1-html"><a class="markdownIt-Anchor" href="#1-html"></a> 1. html</h3><p>在视图函数<code>return</code>就行，如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> render_template(<span class="string">&#x27;xxx.html&#x27;</span>,params)</span><br><span class="line"><span class="comment"># params为传递给html页面的参数</span></span><br></pre></td></tr></table></figure><h3 id="2-css"><a class="markdownIt-Anchor" href="#2-css"></a> 2. css</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 在html <span class="tag">&lt;<span class="name">head</span>&gt;</span>内添加：</span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&#123;&#123; url_for(&#x27;static&#x27;,filename=&#x27;style.css&#x27;) &#125;&#125;&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-参数"><a class="markdownIt-Anchor" href="#3-参数"></a> 3. 参数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># app.py</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(&#x27;/&#x27;)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_world</span>():</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>,name=<span class="string">&#x27;test&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ ==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>,port=<span class="number">8443</span>)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--index.html--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Hello &#123;&#123; name &#125;&#125;.<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="二-表单"><a class="markdownIt-Anchor" href="#二-表单"></a> 二、表单</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--index.html--&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">dir</span>=<span class="string">&quot;ltr&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>智能快递柜<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&#123;&#123; url_for(&#x27;static&#x27;,filename=&#x27;style.css&#x27;) &#125;&#125;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span> <span class="attr">action</span>=<span class="string">&quot;result&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>请联系收件人<span class="tag">&lt;<span class="name">br</span>&gt;</span>获取密码<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入密码&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">name</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;确认&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>关注body内部：</p><p><code>action</code>：post请求重定向到<code>result路由</code></p><p><code>input name</code>：input的name一定要写，用于app.py获取input里的值。</p><p><code>form action</code>：处理form数据的路由页面（视图函数）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(&#x27;/&#x27;,methods=[&#x27;GET&#x27;,&#x27;POST&#x27;])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="keyword">if</span> request.method==<span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        password = request.form[<span class="string">&#x27;password&#x27;</span>]</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;result&#x27;</span>),password=password)</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(&#x27;/result&#x27;,methods=&#x27;GET&#x27;)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">result</span>():</span></span><br><span class="line">    pwd=<span class="string">&#x27;123&#x27;</span></span><br><span class="line">    password=request.args.get(<span class="string">&#x27;password&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> password==pwd:</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&#x27;correct.html&#x27;</span>,password=password)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&#x27;error.html&#x27;</span>)</span><br></pre></td></tr></table></figure><p>其实整个流程很好理解：首先路由<code>'/'</code>首先渲染index.html，然后得先获取input里面的值，也就是<code>request.form[]</code>。当我们submit之后，<code>POST请求</code>得把我们获取到<code>input的值</code> <code>return</code>到新的路由<code>result</code>页面中，这就是<code>redirect(url_for(),args)</code>的作用。然后新的路由页面，得接收POST过来的信息，所以method是<code>GET</code>，获取信息的方法是<code>request.args.get['args']</code>。所以我们在html里的form的action中，必须得明确我们要把信息提交到那个路由<code>/result</code></p>]]></content>
    
    
    <summary type="html">&lt;img src=&quot;https://picbed.tangspoon.cn/uPic/image-20201226170026026.png&quot; alt=&quot;image-20201226170026026&quot; style=&quot;zoom:50%;&quot; /&gt;
&lt;p&gt;应用于智能快递柜的密码校验web&lt;/p&gt;</summary>
    
    
    
    <category term="智能快递柜" scheme="https://blog.tangspoon.cn/categories/%E6%99%BA%E8%83%BD%E5%BF%AB%E9%80%92%E6%9F%9C/"/>
    
    <category term="Python" scheme="https://blog.tangspoon.cn/categories/%E6%99%BA%E8%83%BD%E5%BF%AB%E9%80%92%E6%9F%9C/Python/"/>
    
    
    <category term="Flask" scheme="https://blog.tangspoon.cn/tags/Flask/"/>
    
    <category term="Python" scheme="https://blog.tangspoon.cn/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>解决｜UnicodeDecodeError: &#39;ascii&#39; codec can&#39;t decode byte 0xe8 in position 0: ordinal not in range(128)</title>
    <link href="https://blog.tangspoon.cn/2021/12/18/%E8%A7%A3%E5%86%B3%EF%BD%9CUnicodeDecodeError-ascii-codec-can-t-decode-byte-0xe8-in-position-0-ordinal-not-in-range-128/"/>
    <id>https://blog.tangspoon.cn/2021/12/18/%E8%A7%A3%E5%86%B3%EF%BD%9CUnicodeDecodeError-ascii-codec-can-t-decode-byte-0xe8-in-position-0-ordinal-not-in-range-128/</id>
    <published>2021-12-18T04:31:04.000Z</published>
    <updated>2022-02-09T06:17:55.388Z</updated>
    
    <content type="html"><![CDATA[<p>换成python3即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 删除&#x2F;usr&#x2F;bin目录下的python link文件</span><br><span class="line">sudo rm -rf &#x2F;usr&#x2F;bin&#x2F;python</span><br><span class="line"></span><br><span class="line"># 删除后再建立新的链接关系：</span><br><span class="line">sudo ln -s &#x2F;usr&#x2F;bin&#x2F;python3.5 &#x2F;usr&#x2F;bin&#x2F;python</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;换成python3即可&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/s</summary>
      
    
    
    
    <category term="linux" scheme="https://blog.tangspoon.cn/categories/linux/"/>
    
    
    <category term="linux" scheme="https://blog.tangspoon.cn/tags/linux/"/>
    
    <category term="troubleshooting" scheme="https://blog.tangspoon.cn/tags/troubleshooting/"/>
    
  </entry>
  
  <entry>
    <title>Debian开启crontab日志</title>
    <link href="https://blog.tangspoon.cn/2021/12/18/Debian%E5%BC%80%E5%90%AFcrontab%E6%97%A5%E5%BF%97/"/>
    <id>https://blog.tangspoon.cn/2021/12/18/Debian%E5%BC%80%E5%90%AFcrontab%E6%97%A5%E5%BF%97/</id>
    <published>2021-12-18T03:37:39.000Z</published>
    <updated>2021-12-24T13:46:01.494Z</updated>
    
    <content type="html"><![CDATA[<img src="https://picbed.tangspoon.cn/uPic/image-20211218114909331.png" alt="image-20211218114909331" style="zoom: 43%;" /><p>搭建网易云闹钟需要查看crontab的运行情况，在此记录下如何实时监控log</p><a id="more"></a><p>实时查看crontab的log</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tail -f &#x2F;var&#x2F;log&#x2F;cron.log</span><br></pre></td></tr></table></figure><p>但debian是默认不开启的，我们需要手动开启</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;rsyslog.conf </span><br></pre></td></tr></table></figure><p>找到👇，然后把<code>#</code>去掉</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#cron.* &#x2F;var&#x2F;log&#x2F;cron.log</span><br></pre></td></tr></table></figure><p>重启日志服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;etc&#x2F;init.d&#x2F;rsyslog restart</span><br></pre></td></tr></table></figure><p>重启crontab服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;etc&#x2F;init.d&#x2F;crond restart</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;img src=&quot;https://picbed.tangspoon.cn/uPic/image-20211218114909331.png&quot; alt=&quot;image-20211218114909331&quot; style=&quot;zoom: 43%;&quot; /&gt;
&lt;p&gt;搭建网易云闹钟需要查看crontab的运行情况，在此记录下如何实时监控log&lt;/p&gt;</summary>
    
    
    
    <category term="linux" scheme="https://blog.tangspoon.cn/categories/linux/"/>
    
    
    <category term="linux" scheme="https://blog.tangspoon.cn/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>N1盒子部署我的网易云闹钟折腾记</title>
    <link href="https://blog.tangspoon.cn/2021/12/18/N1%E7%9B%92%E5%AD%90%E9%83%A8%E7%BD%B2%E6%88%91%E7%9A%84%E7%BD%91%E6%98%93%E4%BA%91%E9%97%B9%E9%92%9F%E6%8A%98%E8%85%BE%E8%AE%B0/"/>
    <id>https://blog.tangspoon.cn/2021/12/18/N1%E7%9B%92%E5%AD%90%E9%83%A8%E7%BD%B2%E6%88%91%E7%9A%84%E7%BD%91%E6%98%93%E4%BA%91%E9%97%B9%E9%92%9F%E6%8A%98%E8%85%BE%E8%AE%B0/</id>
    <published>2021-12-18T01:50:32.000Z</published>
    <updated>2021-12-24T13:46:19.609Z</updated>
    
    <content type="html"><![CDATA[<p>前面N1盒子刷armbian的目的之一就是为了更好的安装我的网易云闹钟，早上更好的叫醒我。</p><p>但一路可谓是遇到了非常多坑。</p><p><img src="https://picbed.tangspoon.cn/uPic/image-20211218122647253.png" alt="image-20211218122647253" /></p><img src="https://picbed.tangspoon.cn/uPic/image-20211218121833554.png" alt="image-20211218121833554" style="zoom:43%;" /><a id="more"></a><h2 id="一-背景介绍"><a class="markdownIt-Anchor" href="#一-背景介绍"></a> 一、背景介绍</h2><p>一开始我刷了带桌面的ubuntu，把我坑得不要不要的！在桌面版终端命令执行python脚本或者鼠标点击mp4文件都有声音出来，但是一旦ssh或者在crontab中执行python脚本就没有声音！！！前前后后折腾了一个晚上毫无结果。</p><p>分析大概是桌面端的问题，也有可能是armbian和N1盒子不那么适配。所以还是换成了没有桌面端的debian。</p><h2 id="二-系统配置"><a class="markdownIt-Anchor" href="#二-系统配置"></a> 二、系统配置</h2><h3 id="1-更新apt"><a class="markdownIt-Anchor" href="#1-更新apt"></a> 1. 更新apt</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt-get update</span><br><span class="line">apt-get upgrade</span><br></pre></td></tr></table></figure><h3 id="2-换python3"><a class="markdownIt-Anchor" href="#2-换python3"></a> 2. 换python3</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 删除&#x2F;usr&#x2F;bin目录下的python link文件</span><br><span class="line">sudo rm -rf &#x2F;usr&#x2F;bin&#x2F;python</span><br><span class="line"></span><br><span class="line"># 删除后再建立新的链接关系：</span><br><span class="line">sudo ln -s &#x2F;usr&#x2F;bin&#x2F;python3.5 &#x2F;usr&#x2F;bin&#x2F;python</span><br></pre></td></tr></table></figure><h3 id="3-安装pip3"><a class="markdownIt-Anchor" href="#3-安装pip3"></a> 3. 安装pip3</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install python3-pip</span><br></pre></td></tr></table></figure><h3 id="4-baidu-aip"><a class="markdownIt-Anchor" href="#4-baidu-aip"></a> 4. baidu-aip</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install baidu-aip</span><br></pre></td></tr></table></figure><h3 id="5-mpg123或mplayer"><a class="markdownIt-Anchor" href="#5-mpg123或mplayer"></a> 5. mpg123或mplayer</h3><p>在树莓派上我是用mplayer的，但在N1盒子上使用mplayer播放音乐一卡一卡的。结果换成了mpg123就没问题了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># mpg123</span><br><span class="line">apt-get install mpg123</span><br><span class="line"></span><br><span class="line"># mplayer</span><br><span class="line">apt-get install mplayer</span><br></pre></td></tr></table></figure><h2 id="三-配置声卡"><a class="markdownIt-Anchor" href="#三-配置声卡"></a> 三、配置声卡</h2><p>在pdd买了一个免驱的usb网卡，可以直接接3.5mm的音频。但使用mpg123播放音乐没有声音。根据前面树莓派的经验，应该是网卡配置有问题。因为armbian默认是card0的声卡，可能是一开始插了HDMI默认了是card0。我们要做的就是修改我们的usb设备为默认声卡就行。</p><h3 id="1-查看所有声卡信息"><a class="markdownIt-Anchor" href="#1-查看所有声卡信息"></a> 1. 查看所有声卡信息</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aplay -l </span><br></pre></td></tr></table></figure><p><img src="https://picbed.tangspoon.cn/uPic/image-20211218122844083.png" alt="image-20211218122844083" /></p><p>我们需要usb声卡的 card 数字<code>1</code> 和 device数字<code>0</code></p><h3 id="2-修改默认声卡文件"><a class="markdownIt-Anchor" href="#2-修改默认声卡文件"></a> 2. 修改默认声卡文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;asound.conf</span><br></pre></td></tr></table></figure><p>默认是没有asound.conf文件的，不要紧，直接新建添加就行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">defaults.pcm.card 1  </span><br><span class="line">defaults.pcm.device 0 </span><br><span class="line">defaults.ctl.card 1</span><br></pre></td></tr></table></figure><h3 id="3-测试声卡"><a class="markdownIt-Anchor" href="#3-测试声卡"></a> 3. 测试声卡</h3><p>upload一段mp3文件，然后使用mpg123播放查看有没有声音。如果没有，就reboot一下。大概率是OK的。</p><h2 id="四-部署网易云闹钟项目"><a class="markdownIt-Anchor" href="#四-部署网易云闹钟项目"></a> 四、部署网易云闹钟项目</h2><p>前面工具和相关依赖环境已经配置好了。直接git clone项目，然后修改相关配置就行。</p><p>详细请看GitHub项目：<a href="https://github.com/tangspoon66/NeteaseCloud-Clock#%E4%BA%94%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA">开始搭建</a></p><h2 id="五-相关文章"><a class="markdownIt-Anchor" href="#五-相关文章"></a> 五、相关文章</h2><p><a href="https://blog.csdn.net/hunanchenxingyu/article/details/48399585">alsa设置默认声卡</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;前面N1盒子刷armbian的目的之一就是为了更好的安装我的网易云闹钟，早上更好的叫醒我。&lt;/p&gt;
&lt;p&gt;但一路可谓是遇到了非常多坑。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://picbed.tangspoon.cn/uPic/image-20211218122647253.png&quot; alt=&quot;image-20211218122647253&quot; /&gt;&lt;/p&gt;
&lt;img src=&quot;https://picbed.tangspoon.cn/uPic/image-20211218121833554.png&quot; alt=&quot;image-20211218121833554&quot; style=&quot;zoom:43%;&quot; /&gt;</summary>
    
    
    
    <category term="linux" scheme="https://blog.tangspoon.cn/categories/linux/"/>
    
    
    <category term="linux" scheme="https://blog.tangspoon.cn/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>N1盒子折腾记</title>
    <link href="https://blog.tangspoon.cn/2021/12/18/N1%E7%9B%92%E5%AD%90%E6%8A%98%E8%85%BE%E8%AE%B0/"/>
    <id>https://blog.tangspoon.cn/2021/12/18/N1%E7%9B%92%E5%AD%90%E6%8A%98%E8%85%BE%E8%AE%B0/</id>
    <published>2021-12-18T00:42:36.000Z</published>
    <updated>2021-12-24T13:46:29.985Z</updated>
    
    <content type="html"><![CDATA[<p>这段时间看到树莓派涨价太厉害，然后感觉我的树莓派3b+好像吃灰了一段时间，还有性能实在太过剩。之前有留意到斐讯的N1盒子性能也很强，也可以刷armbian，其实是可以用来替代树莓派的。在pdd 110💰入手了一台，包电源。</p><img src="https://picbed.tangspoon.cn/uPic/image-20211218121833554.png" alt="image-20211218121833554" style="zoom:33%;" /><a id="more"></a><h2 id="一-刷机armbian"><a class="markdownIt-Anchor" href="#一-刷机armbian"></a> 一、刷机armbian</h2><p>在pdd手上拿回来的是<code>openwrt</code>，但我还是喜欢armbian多一点，因为可自定义程度可以非常高。所以本教程是在openwrt的基础上刷armbian。刷其他系统大同小异，都是先制作好系统U盘👉插入N1盒子👉开机👉执行sh脚本或者nand-sata-install写入emmc。</p><h3 id="1-前期准备"><a class="markdownIt-Anchor" href="#1-前期准备"></a> 1. 前期准备</h3><h4 id="11-物料"><a class="markdownIt-Anchor" href="#11-物料"></a> 1.1 物料</h4><p>HDMI线、16g U盘（不需要usb公对公）</p><h4 id="12-系统-577-debian"><a class="markdownIt-Anchor" href="#12-系统-577-debian"></a> 1.2 系统 5.77 Debian</h4><p><a href="https://pan.baidu.com/s/1kivlyMxyiZfGG3YTMI4NMw">https://pan.baidu.com/s/1kivlyMxyiZfGG3YTMI4NMw</a></p><p>提取码: e3cm</p><p><strong>强烈不建议选择Ubuntu的桌面版！强烈不建议选择Ubuntu的桌面版！因为到后面的python脚本和crontab会有问题。用 5.77 Debian 命令版5分钟就刷完，后期安装任何工具和依赖都非常快速。反倒Ubuntu桌面版有一大堆的问题。</strong></p><h4 id="13-其他工具下载"><a class="markdownIt-Anchor" href="#13-其他工具下载"></a> 1.3 其他工具下载</h4><p>U盘系统制作工具：<a href="https://www.balena.io/etcher/">balenaEtcher</a></p><p>dbt文件：在5.77 Debian下载链接里面有</p><h3 id="2-制作系统u盘"><a class="markdownIt-Anchor" href="#2-制作系统u盘"></a> 2. 制作系统U盘</h3><h4 id="21-烧录"><a class="markdownIt-Anchor" href="#21-烧录"></a> 2.1 烧录</h4><p>这一步直接使用balenaEtcher烧录就行，非常简单。</p><h4 id="22-拷贝dbt文件"><a class="markdownIt-Anchor" href="#22-拷贝dbt文件"></a> 2.2 拷贝dbt文件</h4><p>在烧录后的U盘里面，有个dbt文件夹。把下载下来的dbt文件👉复制到U盘的dbt文件夹内</p><p><img src="https://picbed.tangspoon.cn/uPic/image-20211218122227863.png" alt="image-20211218122227863" /></p><h4 id="23-修改uenv文件"><a class="markdownIt-Anchor" href="#23-修改uenv文件"></a> 2.3 修改uEnv文件</h4><p>在U盘系统目录里，有个uEnv.ini文件，把data_name=xxx修改成</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dtb_name&#x3D;&#x2F;dtb&#x2F;meson-gxl-s905d-phicomm-n1-xiangsm.dtb</span><br></pre></td></tr></table></figure><p><img src="https://picbed.tangspoon.cn/uPic/image-20211218122320412.png" alt="image-20211218122320412" /></p><p><strong>至此，启动U盘制作完成。</strong></p><h2 id="二-写入emmc"><a class="markdownIt-Anchor" href="#二-写入emmc"></a> 二、写入emmc</h2><p>插入U盘就会自动加载，debian默认是root，密码1234。后面会要你更改。</p><p>然后执行下面命令就可以写入emmc了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nand-sata-install</span><br></pre></td></tr></table></figure><p>网上有的教程说执行/root/install.sh可以，但还是建议以我上面的方式写入。</p><p>重启</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reboot</span><br></pre></td></tr></table></figure><h2 id="三-其他配置"><a class="markdownIt-Anchor" href="#三-其他配置"></a> 三、其他配置</h2><p>Wi-Fi、时区、apt源等等</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">armbian-config</span><br></pre></td></tr></table></figure><p>到这里，N1盒子的armbian系统基本配置好啦～</p><h2 id="四-相关文章"><a class="markdownIt-Anchor" href="#四-相关文章"></a> 四、相关文章</h2><p><a href="https://yuerblog.cc/2019/10/23/%E6%96%90%E8%AE%AFn1-%E5%AE%8C%E7%BE%8E%E5%88%B7%E6%9C%BAarmbian%E6%95%99%E7%A8%8B/">斐讯N1 – 完美刷机Armbian教程</a>(建议阅读)</p><p><a href="https://www.twoeggz.com/info/745423.html">秒变万能家庭服务器！斐讯N1 armbian安装指南</a></p><p><a href="https://www.right.com.cn/forum/forum.php?mod=forumdisplay&amp;fid=158&amp;filter=typeid&amp;typeid=21">N1盒子Armbian-5.77 on N1, so far so good</a></p><p><a href="https://wh0.is/p/%E6%96%90%E8%AE%AFn1%E8%A3%85ubuntuarmbian-%E5%B0%B4%E5%B0%AC%E5%A4%8D%E6%B4%BB%E8%AE%B0%E5%BD%95/">斐讯N1装Ubuntu(Armbian)+尴尬复活记录</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;这段时间看到树莓派涨价太厉害，然后感觉我的树莓派3b+好像吃灰了一段时间，还有性能实在太过剩。之前有留意到斐讯的N1盒子性能也很强，也可以刷armbian，其实是可以用来替代树莓派的。在pdd 110💰入手了一台，包电源。&lt;/p&gt;
&lt;img src=&quot;https://picbed.tangspoon.cn/uPic/image-20211218121833554.png&quot; alt=&quot;image-20211218121833554&quot; style=&quot;zoom:33%;&quot; /&gt;</summary>
    
    
    
    <category term="硬件" scheme="https://blog.tangspoon.cn/categories/%E7%A1%AC%E4%BB%B6/"/>
    
    
    <category term="硬件" scheme="https://blog.tangspoon.cn/tags/%E7%A1%AC%E4%BB%B6/"/>
    
  </entry>
  
</feed>
