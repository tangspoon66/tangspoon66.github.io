<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>tang&#39;s blog</title>
  
  <subtitle>判断得与失的时限大概要拉长一些，或许是一辈子</subtitle>
  <link href="https://blog.tangspoon.cn/atom.xml" rel="self"/>
  
  <link href="https://blog.tangspoon.cn/"/>
  <updated>2022-01-04T07:14:25.322Z</updated>
  <id>https://blog.tangspoon.cn/</id>
  
  <author>
    <name>tang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>linux使用supervisor实现开机自启</title>
    <link href="https://blog.tangspoon.cn/2022/01/04/linux%E4%BD%BF%E7%94%A8supervisor%E5%AE%9E%E7%8E%B0%E5%BC%80%E6%9C%BA%E8%87%AA%E5%90%AF/"/>
    <id>https://blog.tangspoon.cn/2022/01/04/linux%E4%BD%BF%E7%94%A8supervisor%E5%AE%9E%E7%8E%B0%E5%BC%80%E6%9C%BA%E8%87%AA%E5%90%AF/</id>
    <published>2022-01-04T06:39:02.000Z</published>
    <updated>2022-01-04T07:14:25.322Z</updated>
    
    <content type="html"><![CDATA[<img src="https://picbed.tangspoon.cn/uPic/image-20220104144501685.png" alt="image-20220104144501685" style="zoom:30%;" /><p>智能快递柜项目需要flask和内网穿透实现开机自启，使用supervisor非常方便。</p><a id="more"></a><p>相关Introduce在<a href="http://supervisord.org/introduction.html#overview">官网</a>有，这里只记录在<strong>香橙派</strong>armbian环境下的使用方法。</p><h2 id="安装"><a class="markdownIt-Anchor" href="#安装"></a> 安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install supervisor</span><br></pre></td></tr></table></figure><h2 id="配置"><a class="markdownIt-Anchor" href="#配置"></a> 配置</h2><h3 id="查看项目安装位置"><a class="markdownIt-Anchor" href="#查看项目安装位置"></a> 查看项目安装位置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">whereis supervisor</span><br></pre></td></tr></table></figure><p><img src="https://picbed.tangspoon.cn/uPic/image-20220104145552053.png" alt="image-20220104145552053" /></p><h3 id="配置conf"><a class="markdownIt-Anchor" href="#配置conf"></a> 配置conf</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd &#x2F;etc&#x2F;supervisor</span><br><span class="line"># 新建log方便下面使用</span><br><span class="line">touch supervisor.log</span><br><span class="line">vim supervisor.conf</span><br></pre></td></tr></table></figure><p>在文件最后添加以下内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[program:xxx]</span><br><span class="line">command&#x3D;xxxxxxx                                                  </span><br><span class="line">autostart&#x3D;true                                                                        </span><br><span class="line">autorestart&#x3D;true                                                             </span><br><span class="line">stdout_logfile &#x3D; &#x2F;etc&#x2F;supervisor&#x2F;supervisor.log</span><br><span class="line">startsecs &#x3D; 5</span><br><span class="line">stopwaitsecs&#x3D;0</span><br></pre></td></tr></table></figure><p><code>line1</code>: 填写项目名称（例如我的是express_system）</p><p><code>line2</code>：执行脚本的命令（例如我的是python /root/express_system/app.py）</p><p><code>autostart</code>：在 supervisord 启动的时候也自动启动</p><p><code>autorestart</code>：程序异常退出后自动重启</p><p><code>startsecs</code>：启动 5 秒后没有异常退出，就当作已经正常启动了</p><p><code>stopwaitsecs</code>：停止等待时间</p><h3 id="重启"><a class="markdownIt-Anchor" href="#重启"></a> 重启</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">supervisorctl reload</span><br></pre></td></tr></table></figure><h2 id="supervisor其他命令"><a class="markdownIt-Anchor" href="#supervisor其他命令"></a> supervisor其他命令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># 输入查看自启程序的状态</span><br><span class="line">supervisorctl</span><br><span class="line"></span><br><span class="line">#关闭所有任务</span><br><span class="line">supervisorctl shutdown</span><br><span class="line"></span><br><span class="line"># 启动某个进</span><br><span class="line">supervisorctl start programxxx</span><br><span class="line"></span><br><span class="line"># 重启某个进程</span><br><span class="line">supervisorctl restart programxxx</span><br><span class="line"></span><br><span class="line"># 停止全部进程 注：start、restart、stop都不会载入最新的配置文件</span><br><span class="line">supervisorctl stop all</span><br><span class="line"></span><br><span class="line"># 载入最新的配置文件，停止原有进程并按新的配置启动、管理所有进程。</span><br><span class="line">supervisorctl reload</span><br><span class="line"></span><br><span class="line"># 根据最新的配置文件，启动新配置或有改动的进程，配置没有改动的进程不会受影响而重启。</span><br><span class="line">supervisorctl update</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;img src=&quot;https://picbed.tangspoon.cn/uPic/image-20220104144501685.png&quot; alt=&quot;image-20220104144501685&quot; style=&quot;zoom:30%;&quot; /&gt;
&lt;p&gt;智能快递柜项目需要flask和内网穿透实现开机自启，使用supervisor非常方便。&lt;/p&gt;</summary>
    
    
    
    <category term="linux" scheme="https://blog.tangspoon.cn/categories/linux/"/>
    
    <category term="智能快递柜" scheme="https://blog.tangspoon.cn/categories/linux/%E6%99%BA%E8%83%BD%E5%BF%AB%E9%80%92%E6%9F%9C/"/>
    
    
    <category term="linux" scheme="https://blog.tangspoon.cn/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Flask-学习笔记02-模版与表单</title>
    <link href="https://blog.tangspoon.cn/2021/12/27/Flask-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B002-%E6%A8%A1%E7%89%88%E4%B8%8E%E8%A1%A8%E5%8D%95/"/>
    <id>https://blog.tangspoon.cn/2021/12/27/Flask-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B002-%E6%A8%A1%E7%89%88%E4%B8%8E%E8%A1%A8%E5%8D%95/</id>
    <published>2021-12-27T09:22:41.000Z</published>
    <updated>2022-01-03T02:48:14.960Z</updated>
    
    <content type="html"><![CDATA[<img src="https://picbed.tangspoon.cn/uPic/image-20201226170026026.png" alt="image-20201226170026026" style="zoom:50%;" /><p>应用于智能快递柜的密码校验web</p><a id="more"></a><p>最简单的flask项目</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(&#x27;/&#x27;)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_world</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello, World!&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ ==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>,port=<span class="number">8080</span>)</span><br></pre></td></tr></table></figure><h2 id="一-模版"><a class="markdownIt-Anchor" href="#一-模版"></a> 一、模版</h2><p>在flask项目内新建一个<code>templates</code>文件夹放置html，新建static文件夹放置css。</p><img src="https://picbed.tangspoon.cn/uPic/image-20211227172852877.png" alt="image-20211227172852877" style="zoom:50%;" /><h3 id="1-html"><a class="markdownIt-Anchor" href="#1-html"></a> 1. html</h3><p>在视图函数<code>return</code>就行，如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> render_template(<span class="string">&#x27;xxx.html&#x27;</span>,params)</span><br><span class="line"><span class="comment"># params为传递给html页面的参数</span></span><br></pre></td></tr></table></figure><h3 id="2-css"><a class="markdownIt-Anchor" href="#2-css"></a> 2. css</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 在html <span class="tag">&lt;<span class="name">head</span>&gt;</span>内添加：</span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&#123;&#123; url_for(&#x27;static&#x27;,filename=&#x27;style.css&#x27;) &#125;&#125;&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-参数"><a class="markdownIt-Anchor" href="#3-参数"></a> 3. 参数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># app.py</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(&#x27;/&#x27;)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_world</span>():</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>,name=<span class="string">&#x27;test&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ ==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>,port=<span class="number">8443</span>)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--index.html--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Hello &#123;&#123; name &#125;&#125;.<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="二-表单"><a class="markdownIt-Anchor" href="#二-表单"></a> 二、表单</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--index.html--&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">dir</span>=<span class="string">&quot;ltr&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>智能快递柜<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&#123;&#123; url_for(&#x27;static&#x27;,filename=&#x27;style.css&#x27;) &#125;&#125;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span> <span class="attr">action</span>=<span class="string">&quot;result&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>请联系收件人<span class="tag">&lt;<span class="name">br</span>&gt;</span>获取密码<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入密码&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">name</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;确认&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>关注body内部：</p><p><code>action</code>：post请求重定向到<code>result路由</code></p><p><code>input name</code>：input的name一定要写，用于app.py获取input里的值。</p><p><code>form action</code>：处理form数据的路由页面（视图函数）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(&#x27;/&#x27;,methods=[&#x27;GET&#x27;,&#x27;POST&#x27;])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="keyword">if</span> request.method==<span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        password = request.form[<span class="string">&#x27;password&#x27;</span>]</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;result&#x27;</span>),password=password)</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(&#x27;/result&#x27;,methods=&#x27;GET&#x27;)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">result</span>():</span></span><br><span class="line">    pwd=<span class="string">&#x27;123&#x27;</span></span><br><span class="line">    password=request.args.get(<span class="string">&#x27;password&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> password==pwd:</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&#x27;correct.html&#x27;</span>,password=password)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&#x27;error.html&#x27;</span>)</span><br></pre></td></tr></table></figure><p>其实整个流程很好理解：首先路由<code>'/'</code>首先渲染index.html，然后得先获取input里面的值，也就是<code>request.form[]</code>。当我们submit之后，<code>POST请求</code>得把我们获取到<code>input的值</code> <code>return</code>到新的路由<code>result</code>页面中，这就是<code>redirect(url_for(),args)</code>的作用。然后新的路由页面，得接收POST过来的信息，所以method是<code>GET</code>，获取信息的方法是<code>request.args.get['args']</code>。所以我们在html里的form的action中，必须得明确我们要把信息提交到那个路由<code>/result</code></p>]]></content>
    
    
    <summary type="html">&lt;img src=&quot;https://picbed.tangspoon.cn/uPic/image-20201226170026026.png&quot; alt=&quot;image-20201226170026026&quot; style=&quot;zoom:50%;&quot; /&gt;
&lt;p&gt;应用于智能快递柜的密码校验web&lt;/p&gt;</summary>
    
    
    
    <category term="Flask" scheme="https://blog.tangspoon.cn/categories/Flask/"/>
    
    <category term="只能快递柜" scheme="https://blog.tangspoon.cn/categories/Flask/%E5%8F%AA%E8%83%BD%E5%BF%AB%E9%80%92%E6%9F%9C/"/>
    
    
    <category term="Flask" scheme="https://blog.tangspoon.cn/tags/Flask/"/>
    
  </entry>
  
  <entry>
    <title>frp内网穿透怎么用？｜访问内网web项目</title>
    <link href="https://blog.tangspoon.cn/2021/12/24/frp%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E6%80%8E%E4%B9%88%E7%94%A8%EF%BC%9F%EF%BD%9C%E8%AE%BF%E9%97%AE%E5%86%85%E7%BD%91web%E9%A1%B9%E7%9B%AE/"/>
    <id>https://blog.tangspoon.cn/2021/12/24/frp%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E6%80%8E%E4%B9%88%E7%94%A8%EF%BC%9F%EF%BD%9C%E8%AE%BF%E9%97%AE%E5%86%85%E7%BD%91web%E9%A1%B9%E7%9B%AE/</id>
    <published>2021-12-24T12:16:13.000Z</published>
    <updated>2022-01-03T02:48:38.131Z</updated>
    
    <content type="html"><![CDATA[<img src="https://picbed.tangspoon.cn/uPic/image-20211224213850815.png" alt="image-20211224213850815" style="zoom:35%;" /><p>想做一个智能快递柜，想法是快递员扫码进入网页，输入信息验证成功后，香橙派就控制打开电磁锁。因为对esp和MQTT协议不熟悉，所以只能选择香橙派+内网穿透曲线救国的方式实现效果。当然，成本也会高很多。（esp几块钱，香橙派二手70+）</p><a id="more"></a><h2 id="一-服务端"><a class="markdownIt-Anchor" href="#一-服务端"></a> 一、服务端</h2><p>服务端应用在vps。（如果是arm系统，需要更改wget的地址）</p><h3 id="1-拉取源代码修改配置"><a class="markdownIt-Anchor" href="#1-拉取源代码修改配置"></a> 1. 拉取源代码&amp;修改配置</h3><p>（我这个是0.38版本）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https:&#x2F;&#x2F;github.com&#x2F;fatedier&#x2F;frp&#x2F;releases&#x2F;download&#x2F;v0.38.0&#x2F;frp_0.38.0_linux_amd64.tar.gz</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf frp_0.38.0_linux_amd64.tar.gz</span><br><span class="line">mv frp_0.38.0_linux_amd64 frps</span><br><span class="line">cd frps</span><br><span class="line">vim frps.ini</span><br></pre></td></tr></table></figure><img src="https://picbed.tangspoon.cn/uPic/image-20211224202926625.png" alt="image-20211224202926625" style="zoom:50%;" /><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[common]</span><br><span class="line">dashboard_port &#x3D; 7500</span><br><span class="line">bind_port &#x3D; 7000</span><br><span class="line">vhost_http_port &#x3D; 8443</span><br></pre></td></tr></table></figure><p><code>bind_port</code>：server端和client端对接端口</p><p><code>dashboard_port</code>：frp面板端口</p><p><code>vhost_http_port</code>：http服务端口</p><h3 id="2-放行端口"><a class="markdownIt-Anchor" href="#2-放行端口"></a> 2. 放行端口</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">iptables -A INPUT -p tcp --dport 8443 -j ACCEPT</span><br><span class="line">iptables -A INPUT -p tcp --dport 7000 -j ACCEPT</span><br><span class="line">iptables -A INPUT -p tcp --dport 7500 -j ACCEPT</span><br><span class="line">iptables-save &gt; &#x2F;etc&#x2F;iptables.up.rules</span><br><span class="line">&#x2F;etc&#x2F;init.d&#x2F;ssh restart</span><br></pre></td></tr></table></figure><h3 id="3-启动"><a class="markdownIt-Anchor" href="#3-启动"></a> 3. 启动</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup .&#x2F;frps -c .&#x2F;frps.ini &gt; frps.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure><p><code>nohup</code>：可以把frps后台启动</p><blockquote><p>关闭</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 关闭frp</span><br><span class="line">ps -aux|grep frp| grep -v grep</span><br><span class="line"># 找出进程id xxx</span><br><span class="line">kill -9 xxx</span><br></pre></td></tr></table></figure></blockquote><p><img src="https://picbed.tangspoon.cn/uPic/image-20211224211757919.png" alt="image-20211224211757919" /></p><h2 id="二-客户端"><a class="markdownIt-Anchor" href="#二-客户端"></a> 二、客户端</h2><p>同样也要下载0.38版本（要和服务端相同）</p><p>macOS下载：<a href="https://github.com/fatedier/frp/releases/download/v0.38.0/frp_0.38.0_darwin_amd64.tar.gz">frp_0.38.0_darwin_amd64.tar.gz</a></p><p>linux下载：<a href="https://github.com/fatedier/frp/releases/download/v0.38.0/frp_0.38.0_linux_amd64.tar.gz">frp_0.38.0_linux_amd64.tar.gz</a></p><p>Windows下载：<a href="https://github.com/fatedier/frp/releases/download/v0.38.0/frp_0.38.0_windows_amd64.zip">frp_0.38.0_windows_amd64.zip</a></p><p>树莓派/香橙派下载：<a href="https://github.com/fatedier/frp/releases/download/v0.38.0/frp_0.38.0_linux_arm.tar.gz">frp_0.38.0_linux_arm.tar.gz</a></p><p><strong>我这里以macOS版演示</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https:&#x2F;&#x2F;github.com&#x2F;fatedier&#x2F;frp&#x2F;releases&#x2F;download&#x2F;v0.38.0&#x2F;frp_0.38.0_darwin_amd64.tar.gz</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf frp_0.38.0_darwin_amd64.tar.gz</span><br><span class="line">mv frp_0.38.0_darwin_amd64 frpc</span><br><span class="line">cd frpc</span><br><span class="line">vim frpc.ini</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[common]</span><br><span class="line">server_addr &#x3D; xxxxx</span><br><span class="line">server_port &#x3D; 7000</span><br><span class="line"></span><br><span class="line">[ssh]</span><br><span class="line">type &#x3D; tcp</span><br><span class="line">local_ip &#x3D; 127.0.0.1</span><br><span class="line">local_port &#x3D; 22</span><br><span class="line">remote_port &#x3D; 6000</span><br><span class="line"></span><br><span class="line">[http]</span><br><span class="line">type &#x3D; http</span><br><span class="line">local_ip &#x3D; 127.0.0.1</span><br><span class="line">local_port &#x3D; 8443</span><br><span class="line">use_encryption &#x3D; false</span><br><span class="line">use_compression &#x3D; true</span><br><span class="line">custom_domains &#x3D; frp.xxxx.cn</span><br></pre></td></tr></table></figure><p><code>server_addr</code>：是服务端的ip，也就是vps的ip</p><p><code>server_port</code>：要和服务端填写的<code>bind_port</code>一致</p><p><code>local_port</code>：要和服务端填写的<code>vhost_http_port</code>一致</p><p><code>custom_domains</code>：服务端的ip/域名</p><h3 id="启动"><a class="markdownIt-Anchor" href="#启动"></a> 启动</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup .&#x2F;frpc -c .&#x2F;frpc.ini &gt; frpc.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure><p><img src="https://picbed.tangspoon.cn/uPic/image-20211224211909398.png" alt="image-20211224211909398" /></p><h3 id="三-面板"><a class="markdownIt-Anchor" href="#三-面板"></a> 三、面板</h3><p>访问地址：ip:7500</p><p>访问不了可能是没有放行端口</p><p><img src="https://picbed.tangspoon.cn/uPic/image-20211224212321698.png" alt="image-20211224212321698" /></p><p><strong>有个HTTP服务证明内网穿透已经成功</strong></p><hr /><p>⚠️注意：内网web项目端口要和<code>vhost_http_port</code>保持一致</p><p><strong>实例</strong></p><p>使用<code>webpy</code>框架建立个demo</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 安装webpy</span><br><span class="line">python3 -m pip install web.py&#x3D;&#x3D;0.61</span><br></pre></td></tr></table></figure><p>在电脑桌面新建个<code>test.py</code>项目，内容为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">import web</span><br><span class="line">import logging</span><br><span class="line"> </span><br><span class="line">urls&#x3D;(&#39;&#x2F;&#39;, &#39;Index&#39;)</span><br><span class="line"> </span><br><span class="line">logging.basicConfig(level&#x3D;logging.NOTSET)</span><br><span class="line"> </span><br><span class="line">app &#x3D; web.application(urls, globals())</span><br><span class="line"> </span><br><span class="line">class Index:</span><br><span class="line">    def GET(self):</span><br><span class="line">        logging.info(&#39;你好世界&#39;)</span><br><span class="line">        web.header(&#39;Content-Type&#39;, &#39;text&#x2F;html;charset&#x3D;UTF-8&#39;)</span><br><span class="line">        return &#39;你好世界&#39;</span><br><span class="line"> </span><br><span class="line">def notfound():</span><br><span class="line">    return web.notfound(&quot;Sorry, the page you were looking for was not found.&quot;)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    app.notfound &#x3D; notfound;</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><p>运行web项目</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python test.py <span class="number">8443</span></span><br></pre></td></tr></table></figure><p>⚠️注意：标明要8443端口</p><p>浏览器访问 ip:8443</p><p><img src="https://picbed.tangspoon.cn/uPic/image-20211224213434793.png" alt="image-20211224213434793" /></p><p><img src="https://picbed.tangspoon.cn/uPic/image-20211224213708050.png" alt="image-20211224213708050" /></p>]]></content>
    
    
    <summary type="html">&lt;img src=&quot;https://picbed.tangspoon.cn/uPic/image-20211224213850815.png&quot; alt=&quot;image-20211224213850815&quot; style=&quot;zoom:35%;&quot; /&gt;
&lt;p&gt;想做一个智能快递柜，想法是快递员扫码进入网页，输入信息验证成功后，香橙派就控制打开电磁锁。因为对esp和MQTT协议不熟悉，所以只能选择香橙派+内网穿透曲线救国的方式实现效果。当然，成本也会高很多。（esp几块钱，香橙派二手70+）&lt;/p&gt;</summary>
    
    
    
    <category term="linux" scheme="https://blog.tangspoon.cn/categories/linux/"/>
    
    <category term="智能快递柜" scheme="https://blog.tangspoon.cn/categories/linux/%E6%99%BA%E8%83%BD%E5%BF%AB%E9%80%92%E6%9F%9C/"/>
    
    
    <category term="linux" scheme="https://blog.tangspoon.cn/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>解决｜UnicodeDecodeError: &#39;ascii&#39; codec can&#39;t decode byte 0xe8 in position 0: ordinal not in range(128)</title>
    <link href="https://blog.tangspoon.cn/2021/12/18/%E8%A7%A3%E5%86%B3%EF%BD%9CUnicodeDecodeError-ascii-codec-can-t-decode-byte-0xe8-in-position-0-ordinal-not-in-range-128/"/>
    <id>https://blog.tangspoon.cn/2021/12/18/%E8%A7%A3%E5%86%B3%EF%BD%9CUnicodeDecodeError-ascii-codec-can-t-decode-byte-0xe8-in-position-0-ordinal-not-in-range-128/</id>
    <published>2021-12-18T04:31:04.000Z</published>
    <updated>2021-12-18T04:33:34.513Z</updated>
    
    <content type="html"><![CDATA[<p>换成python3即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 删除&#x2F;usr&#x2F;bin目录下的python link文件</span><br><span class="line">sudo rm -rf &#x2F;usr&#x2F;bin&#x2F;python</span><br><span class="line"></span><br><span class="line"># 删除后再建立新的链接关系：</span><br><span class="line">sudo ln -s &#x2F;usr&#x2F;bin&#x2F;python3.5 &#x2F;usr&#x2F;bin&#x2F;python</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;换成python3即可&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/s</summary>
      
    
    
    
    <category term="troubleshooting" scheme="https://blog.tangspoon.cn/categories/troubleshooting/"/>
    
    
    <category term="troubleshooting" scheme="https://blog.tangspoon.cn/tags/troubleshooting/"/>
    
  </entry>
  
  <entry>
    <title>Debian开启crontab日志</title>
    <link href="https://blog.tangspoon.cn/2021/12/18/Debian%E5%BC%80%E5%90%AFcrontab%E6%97%A5%E5%BF%97/"/>
    <id>https://blog.tangspoon.cn/2021/12/18/Debian%E5%BC%80%E5%90%AFcrontab%E6%97%A5%E5%BF%97/</id>
    <published>2021-12-18T03:37:39.000Z</published>
    <updated>2021-12-24T13:46:01.494Z</updated>
    
    <content type="html"><![CDATA[<img src="https://picbed.tangspoon.cn/uPic/image-20211218114909331.png" alt="image-20211218114909331" style="zoom: 43%;" /><p>搭建网易云闹钟需要查看crontab的运行情况，在此记录下如何实时监控log</p><a id="more"></a><p>实时查看crontab的log</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tail -f &#x2F;var&#x2F;log&#x2F;cron.log</span><br></pre></td></tr></table></figure><p>但debian是默认不开启的，我们需要手动开启</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;rsyslog.conf </span><br></pre></td></tr></table></figure><p>找到👇，然后把<code>#</code>去掉</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#cron.* &#x2F;var&#x2F;log&#x2F;cron.log</span><br></pre></td></tr></table></figure><p>重启日志服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;etc&#x2F;init.d&#x2F;rsyslog restart</span><br></pre></td></tr></table></figure><p>重启crontab服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;etc&#x2F;init.d&#x2F;crond restart</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;img src=&quot;https://picbed.tangspoon.cn/uPic/image-20211218114909331.png&quot; alt=&quot;image-20211218114909331&quot; style=&quot;zoom: 43%;&quot; /&gt;
&lt;p&gt;搭建网易云闹钟需要查看crontab的运行情况，在此记录下如何实时监控log&lt;/p&gt;</summary>
    
    
    
    <category term="linux" scheme="https://blog.tangspoon.cn/categories/linux/"/>
    
    
    <category term="linux" scheme="https://blog.tangspoon.cn/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>N1盒子部署我的网易云闹钟折腾记</title>
    <link href="https://blog.tangspoon.cn/2021/12/18/N1%E7%9B%92%E5%AD%90%E9%83%A8%E7%BD%B2%E6%88%91%E7%9A%84%E7%BD%91%E6%98%93%E4%BA%91%E9%97%B9%E9%92%9F%E6%8A%98%E8%85%BE%E8%AE%B0/"/>
    <id>https://blog.tangspoon.cn/2021/12/18/N1%E7%9B%92%E5%AD%90%E9%83%A8%E7%BD%B2%E6%88%91%E7%9A%84%E7%BD%91%E6%98%93%E4%BA%91%E9%97%B9%E9%92%9F%E6%8A%98%E8%85%BE%E8%AE%B0/</id>
    <published>2021-12-18T01:50:32.000Z</published>
    <updated>2021-12-24T13:46:19.609Z</updated>
    
    <content type="html"><![CDATA[<p>前面N1盒子刷armbian的目的之一就是为了更好的安装我的网易云闹钟，早上更好的叫醒我。</p><p>但一路可谓是遇到了非常多坑。</p><p><img src="https://picbed.tangspoon.cn/uPic/image-20211218122647253.png" alt="image-20211218122647253" /></p><img src="https://picbed.tangspoon.cn/uPic/image-20211218121833554.png" alt="image-20211218121833554" style="zoom:43%;" /><a id="more"></a><h2 id="一-背景介绍"><a class="markdownIt-Anchor" href="#一-背景介绍"></a> 一、背景介绍</h2><p>一开始我刷了带桌面的ubuntu，把我坑得不要不要的！在桌面版终端命令执行python脚本或者鼠标点击mp4文件都有声音出来，但是一旦ssh或者在crontab中执行python脚本就没有声音！！！前前后后折腾了一个晚上毫无结果。</p><p>分析大概是桌面端的问题，也有可能是armbian和N1盒子不那么适配。所以还是换成了没有桌面端的debian。</p><h2 id="二-系统配置"><a class="markdownIt-Anchor" href="#二-系统配置"></a> 二、系统配置</h2><h3 id="1-更新apt"><a class="markdownIt-Anchor" href="#1-更新apt"></a> 1. 更新apt</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt-get update</span><br><span class="line">apt-get upgrade</span><br></pre></td></tr></table></figure><h3 id="2-换python3"><a class="markdownIt-Anchor" href="#2-换python3"></a> 2. 换python3</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 删除&#x2F;usr&#x2F;bin目录下的python link文件</span><br><span class="line">sudo rm -rf &#x2F;usr&#x2F;bin&#x2F;python</span><br><span class="line"></span><br><span class="line"># 删除后再建立新的链接关系：</span><br><span class="line">sudo ln -s &#x2F;usr&#x2F;bin&#x2F;python3.5 &#x2F;usr&#x2F;bin&#x2F;python</span><br></pre></td></tr></table></figure><h3 id="3-安装pip3"><a class="markdownIt-Anchor" href="#3-安装pip3"></a> 3. 安装pip3</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install python3-pip</span><br></pre></td></tr></table></figure><h3 id="4-baidu-aip"><a class="markdownIt-Anchor" href="#4-baidu-aip"></a> 4. baidu-aip</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install baidu-aip</span><br></pre></td></tr></table></figure><h3 id="5-mpg123或mplayer"><a class="markdownIt-Anchor" href="#5-mpg123或mplayer"></a> 5. mpg123或mplayer</h3><p>在树莓派上我是用mplayer的，但在N1盒子上使用mplayer播放音乐一卡一卡的。结果换成了mpg123就没问题了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># mpg123</span><br><span class="line">apt-get install mpg123</span><br><span class="line"></span><br><span class="line"># mplayer</span><br><span class="line">apt-get install mplayer</span><br></pre></td></tr></table></figure><h2 id="三-配置声卡"><a class="markdownIt-Anchor" href="#三-配置声卡"></a> 三、配置声卡</h2><p>在pdd买了一个免驱的usb网卡，可以直接接3.5mm的音频。但使用mpg123播放音乐没有声音。根据前面树莓派的经验，应该是网卡配置有问题。因为armbian默认是card0的声卡，可能是一开始插了HDMI默认了是card0。我们要做的就是修改我们的usb设备为默认声卡就行。</p><h3 id="1-查看所有声卡信息"><a class="markdownIt-Anchor" href="#1-查看所有声卡信息"></a> 1. 查看所有声卡信息</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aplay -l </span><br></pre></td></tr></table></figure><p><img src="https://picbed.tangspoon.cn/uPic/image-20211218122844083.png" alt="image-20211218122844083" /></p><p>我们需要usb声卡的 card 数字<code>1</code> 和 device数字<code>0</code></p><h3 id="2-修改默认声卡文件"><a class="markdownIt-Anchor" href="#2-修改默认声卡文件"></a> 2. 修改默认声卡文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;asound.conf</span><br></pre></td></tr></table></figure><p>默认是没有asound.conf文件的，不要紧，直接新建添加就行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">defaults.pcm.card 1  </span><br><span class="line">defaults.pcm.device 0 </span><br><span class="line">defaults.ctl.card 1</span><br></pre></td></tr></table></figure><h3 id="3-测试声卡"><a class="markdownIt-Anchor" href="#3-测试声卡"></a> 3. 测试声卡</h3><p>upload一段mp3文件，然后使用mpg123播放查看有没有声音。如果没有，就reboot一下。大概率是OK的。</p><h2 id="四-部署网易云闹钟项目"><a class="markdownIt-Anchor" href="#四-部署网易云闹钟项目"></a> 四、部署网易云闹钟项目</h2><p>前面工具和相关依赖环境已经配置好了。直接git clone项目，然后修改相关配置就行。</p><p>详细请看GitHub项目：<a href="https://github.com/tangspoon66/NeteaseCloud-Clock#%E4%BA%94%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA">开始搭建</a></p><h2 id="五-相关文章"><a class="markdownIt-Anchor" href="#五-相关文章"></a> 五、相关文章</h2><p><a href="https://blog.csdn.net/hunanchenxingyu/article/details/48399585">alsa设置默认声卡</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;前面N1盒子刷armbian的目的之一就是为了更好的安装我的网易云闹钟，早上更好的叫醒我。&lt;/p&gt;
&lt;p&gt;但一路可谓是遇到了非常多坑。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://picbed.tangspoon.cn/uPic/image-20211218122647253.png&quot; alt=&quot;image-20211218122647253&quot; /&gt;&lt;/p&gt;
&lt;img src=&quot;https://picbed.tangspoon.cn/uPic/image-20211218121833554.png&quot; alt=&quot;image-20211218121833554&quot; style=&quot;zoom:43%;&quot; /&gt;</summary>
    
    
    
    <category term="linux" scheme="https://blog.tangspoon.cn/categories/linux/"/>
    
    
    <category term="linux" scheme="https://blog.tangspoon.cn/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>N1盒子折腾记</title>
    <link href="https://blog.tangspoon.cn/2021/12/18/N1%E7%9B%92%E5%AD%90%E6%8A%98%E8%85%BE%E8%AE%B0/"/>
    <id>https://blog.tangspoon.cn/2021/12/18/N1%E7%9B%92%E5%AD%90%E6%8A%98%E8%85%BE%E8%AE%B0/</id>
    <published>2021-12-18T00:42:36.000Z</published>
    <updated>2021-12-24T13:46:29.985Z</updated>
    
    <content type="html"><![CDATA[<p>这段时间看到树莓派涨价太厉害，然后感觉我的树莓派3b+好像吃灰了一段时间，还有性能实在太过剩。之前有留意到斐讯的N1盒子性能也很强，也可以刷armbian，其实是可以用来替代树莓派的。在pdd 110💰入手了一台，包电源。</p><img src="https://picbed.tangspoon.cn/uPic/image-20211218121833554.png" alt="image-20211218121833554" style="zoom:33%;" /><a id="more"></a><h2 id="一-刷机armbian"><a class="markdownIt-Anchor" href="#一-刷机armbian"></a> 一、刷机armbian</h2><p>在pdd手上拿回来的是<code>openwrt</code>，但我还是喜欢armbian多一点，因为可自定义程度可以非常高。所以本教程是在openwrt的基础上刷armbian。刷其他系统大同小异，都是先制作好系统U盘👉插入N1盒子👉开机👉执行sh脚本或者nand-sata-install写入emmc。</p><h3 id="1-前期准备"><a class="markdownIt-Anchor" href="#1-前期准备"></a> 1. 前期准备</h3><h4 id="11-物料"><a class="markdownIt-Anchor" href="#11-物料"></a> 1.1 物料</h4><p>HDMI线、16g U盘（不需要usb公对公）</p><h4 id="12-系统-577-debian"><a class="markdownIt-Anchor" href="#12-系统-577-debian"></a> 1.2 系统 5.77 Debian</h4><p><a href="https://pan.baidu.com/s/1kivlyMxyiZfGG3YTMI4NMw">https://pan.baidu.com/s/1kivlyMxyiZfGG3YTMI4NMw</a></p><p>提取码: e3cm</p><p><strong>强烈不建议选择Ubuntu的桌面版！强烈不建议选择Ubuntu的桌面版！因为到后面的python脚本和crontab会有问题。用 5.77 Debian 命令版5分钟就刷完，后期安装任何工具和依赖都非常快速。反倒Ubuntu桌面版有一大堆的问题。</strong></p><h4 id="13-其他工具下载"><a class="markdownIt-Anchor" href="#13-其他工具下载"></a> 1.3 其他工具下载</h4><p>U盘系统制作工具：<a href="https://www.balena.io/etcher/">balenaEtcher</a></p><p>dbt文件：在5.77 Debian下载链接里面有</p><h3 id="2-制作系统u盘"><a class="markdownIt-Anchor" href="#2-制作系统u盘"></a> 2. 制作系统U盘</h3><h4 id="21-烧录"><a class="markdownIt-Anchor" href="#21-烧录"></a> 2.1 烧录</h4><p>这一步直接使用balenaEtcher烧录就行，非常简单。</p><h4 id="22-拷贝dbt文件"><a class="markdownIt-Anchor" href="#22-拷贝dbt文件"></a> 2.2 拷贝dbt文件</h4><p>在烧录后的U盘里面，有个dbt文件夹。把下载下来的dbt文件👉复制到U盘的dbt文件夹内</p><p><img src="https://picbed.tangspoon.cn/uPic/image-20211218122227863.png" alt="image-20211218122227863" /></p><h4 id="23-修改uenv文件"><a class="markdownIt-Anchor" href="#23-修改uenv文件"></a> 2.3 修改uEnv文件</h4><p>在U盘系统目录里，有个uEnv.ini文件，把data_name=xxx修改成</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dtb_name&#x3D;&#x2F;dtb&#x2F;meson-gxl-s905d-phicomm-n1-xiangsm.dtb</span><br></pre></td></tr></table></figure><p><img src="https://picbed.tangspoon.cn/uPic/image-20211218122320412.png" alt="image-20211218122320412" /></p><p><strong>至此，启动U盘制作完成。</strong></p><h2 id="二-写入emmc"><a class="markdownIt-Anchor" href="#二-写入emmc"></a> 二、写入emmc</h2><p>插入U盘就会自动加载，debian默认是root，密码1234。后面会要你更改。</p><p>然后执行下面命令就可以写入emmc了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nand-sata-install</span><br></pre></td></tr></table></figure><p>网上有的教程说执行/root/install.sh可以，但还是建议以我上面的方式写入。</p><p>重启</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reboot</span><br></pre></td></tr></table></figure><h2 id="三-其他配置"><a class="markdownIt-Anchor" href="#三-其他配置"></a> 三、其他配置</h2><p>Wi-Fi、时区、apt源等等</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">armbian-config</span><br></pre></td></tr></table></figure><p>到这里，N1盒子的armbian系统基本配置好啦～</p><h2 id="四-相关文章"><a class="markdownIt-Anchor" href="#四-相关文章"></a> 四、相关文章</h2><p><a href="https://yuerblog.cc/2019/10/23/%E6%96%90%E8%AE%AFn1-%E5%AE%8C%E7%BE%8E%E5%88%B7%E6%9C%BAarmbian%E6%95%99%E7%A8%8B/">斐讯N1 – 完美刷机Armbian教程</a>(建议阅读)</p><p><a href="https://www.twoeggz.com/info/745423.html">秒变万能家庭服务器！斐讯N1 armbian安装指南</a></p><p><a href="https://www.right.com.cn/forum/forum.php?mod=forumdisplay&amp;fid=158&amp;filter=typeid&amp;typeid=21">N1盒子Armbian-5.77 on N1, so far so good</a></p><p><a href="https://wh0.is/p/%E6%96%90%E8%AE%AFn1%E8%A3%85ubuntuarmbian-%E5%B0%B4%E5%B0%AC%E5%A4%8D%E6%B4%BB%E8%AE%B0%E5%BD%95/">斐讯N1装Ubuntu(Armbian)+尴尬复活记录</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;这段时间看到树莓派涨价太厉害，然后感觉我的树莓派3b+好像吃灰了一段时间，还有性能实在太过剩。之前有留意到斐讯的N1盒子性能也很强，也可以刷armbian，其实是可以用来替代树莓派的。在pdd 110💰入手了一台，包电源。&lt;/p&gt;
&lt;img src=&quot;https://picbed.tangspoon.cn/uPic/image-20211218121833554.png&quot; alt=&quot;image-20211218121833554&quot; style=&quot;zoom:33%;&quot; /&gt;</summary>
    
    
    
    <category term="硬件" scheme="https://blog.tangspoon.cn/categories/%E7%A1%AC%E4%BB%B6/"/>
    
    
    <category term="硬件" scheme="https://blog.tangspoon.cn/tags/%E7%A1%AC%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>Python学习日志-03｜复习</title>
    <link href="https://blog.tangspoon.cn/2021/12/17/Python%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%BF%97-03%EF%BD%9C%E5%A4%8D%E4%B9%A0/"/>
    <id>https://blog.tangspoon.cn/2021/12/17/Python%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%BF%97-03%EF%BD%9C%E5%A4%8D%E4%B9%A0/</id>
    <published>2021-12-17T12:49:22.000Z</published>
    <updated>2021-12-28T13:06:55.260Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://picbed.tangspoon.cn/uPic/image-20211208153223437-20211208154222323.png" alt="image-20211208153223437" /></p><p>第三天：迭代、迭代器、list生成式</p><a id="more"></a><p><code>2021-12-18</code></p><h2 id="一-迭代"><a class="markdownIt-Anchor" href="#一-迭代"></a> 一、迭代</h2><p>python中<code>访问集合元素</code>的方式之一。说白了就是循环</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">dict1=&#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>,<span class="string">&#x27;b&#x27;</span>:<span class="number">2</span>&#125;</span><br><span class="line"><span class="comment"># 遍历 dict 的key</span></span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> dict1.keys():</span><br><span class="line">    print(key)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 遍历 dict 的values</span></span><br><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> dict1.values():</span><br><span class="line">    print(values)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问 字符串 集合里的元素</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">&#x27;test&#x27;</span>:</span><br><span class="line">    print(i)</span><br><span class="line">    </span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="二-迭代器"><a class="markdownIt-Anchor" href="#二-迭代器"></a> 二、迭代器</h2><h3 id="1-iter"><a class="markdownIt-Anchor" href="#1-iter"></a> 1. <code>iter()</code></h3><p>Python 的 <code>for</code> 循环就是先通过内置函数 <code>iter()</code> 获得一个迭代器，然后再不断调用 <code>next()</code> 函数实现的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">list1=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">it=iter(list1)</span><br><span class="line">print(it)</span><br></pre></td></tr></table></figure><img src="https://picbed.tangspoon.cn/uPic/image-20211218164251631.png" alt="image-20211218164251631" style="zoom:50%;" /><p>可以看到并不是直接通过<code>iter()</code>就可以迭代的。还是要通过for或者while打印出list1</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">list1=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">it=iter(list1)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> it:</span><br><span class="line">print(i)</span><br></pre></td></tr></table></figure><p>iter()只是获得了一个迭代对象，还需要通过循环遍历。</p><h3 id="2-next"><a class="markdownIt-Anchor" href="#2-next"></a> 2. <code>next()</code></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">list1=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">it=iter(list1)</span><br><span class="line">print(next(it))</span><br></pre></td></tr></table></figure><img src="https://picbed.tangspoon.cn/uPic/image-20211218165518356.png" alt="image-20211218165518356" style="zoom:50%;" /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">list1=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">it=iter(list1)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span> :</span><br><span class="line">    <span class="keyword">try</span> :</span><br><span class="line">        <span class="keyword">print</span> ( next ( iter3 ) )</span><br><span class="line">    <span class="keyword">except</span> StopIteration :</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">        </span><br><span class="line"><span class="comment"># for i in (0,len(list1)):</span></span><br><span class="line"><span class="comment">#print(next(it))</span></span><br></pre></td></tr></table></figure><h2 id="三-list生成式"><a class="markdownIt-Anchor" href="#三-list生成式"></a> 三、list生成式</h2><p>只是一种更简洁的写法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[expression <span class="keyword">for</span> iterable_var <span class="keyword">in</span> iterable]</span><br><span class="line">[expression <span class="keyword">for</span> iterable_var <span class="keyword">in</span> iterable <span class="keyword">if</span> cond_expression]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">list1=[(x,y) <span class="keyword">for</span> x <span class="keyword">in</span> rang(<span class="number">5</span>) <span class="keyword">for</span> y <span class="keyword">in</span> range(<span class="number">5</span>) <span class="keyword">if</span> i%<span class="number">2</span>==<span class="number">0</span>]</span><br><span class="line">print(list1)</span><br></pre></td></tr></table></figure><p>注意：<code>y</code>是嵌套在<code>x</code>里面的for循环</p><h2 id="四-生成器generator"><a class="markdownIt-Anchor" href="#四-生成器generator"></a> 四、生成器generator</h2><p><strong>一边循环一遍计算，不必创建完整的<code>list</code>。</strong></p><p>以<code>()</code>的生成式/有<code>yield</code>存在就叫生成器。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># （）</span></span><br><span class="line">gen = (x*x <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 函数形式</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span>()</span></span><br><span class="line"><span class="function"><span class="title">for</span> <span class="title">i</span> <span class="title">in</span> <span class="title">range</span>(<span class="params"><span class="number">5</span></span>):</span></span><br><span class="line"><span class="keyword">yield</span> i</span><br><span class="line">print(test())</span><br><span class="line"><span class="comment"># 结果：&lt;generator object test at 0x105603660&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-为什么需要生成器"><a class="markdownIt-Anchor" href="#1-为什么需要生成器"></a> 1. 为什么需要生成器</h3><p>（1）生成一个非常大的<code>list</code>非常耗费储存空间</p><p>（2）如果我们只需要列表的前面一些值，就需要生成整个列表，后面部分的空间就被浪费了。</p><p>生成器表达式使用了一种叫lazy evaluation（惰性计算）的计算方法，调用方式是<code>call by need</code>。<strong>只有在被检索时才会被赋值</strong>。因此在列表比较长时使用内存会有效。</p><h3 id="2-遍历生成器的元素"><a class="markdownIt-Anchor" href="#2-遍历生成器的元素"></a> 2. 遍历生成器的元素</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">gen=(x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">5</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> gen:</span><br><span class="line">print(i)</span><br></pre></td></tr></table></figure><h3 id="3-以函数的形式实现生成器"><a class="markdownIt-Anchor" href="#3-以函数的形式实现生成器"></a> 3. 以函数的形式实现生成器</h3><p>在实际运用中，大多数的generator都是通过函数来实现的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span>():</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line"><span class="keyword">yield</span> i </span><br><span class="line">print(test())</span><br></pre></td></tr></table></figure><p>但上面的例子非常不适合使用generator，因为generator最好的应用是——不想同一时间 将大量的结果 都分配到内存里。特别是结果集里还包含循环。</p><p>另外注意：在用函数生成的生成器中，执行过程是——遇到<code>yield</code>就中断，返回值。所以在一个函数中有多个<code>yield</code>时，无论多少次调用这个函数，每调用一次<code>yield</code>，这个<code>yield</code>就被抛弃掉。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span>():</span></span><br><span class="line">print(<span class="string">&#x27;step 1&#x27;</span>)</span><br><span class="line"><span class="keyword">yield</span>(<span class="number">1</span>)</span><br><span class="line">print(<span class="string">&#x27;step 2&#x27;</span>)</span><br><span class="line"><span class="keyword">yield</span>(<span class="number">2</span>)</span><br><span class="line">print(<span class="string">&#x27;step 3&#x27;</span>)</span><br><span class="line"><span class="keyword">yield</span>(<span class="number">3</span>)</span><br><span class="line">t=test()</span><br><span class="line">print(next(t))</span><br><span class="line">print(next(t))</span><br><span class="line">print(next(t))</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">step 1</span><br><span class="line">1</span><br><span class="line">step 2</span><br><span class="line">2</span><br><span class="line">step 3</span><br><span class="line">3</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://picbed.tangspoon.cn/uPic/image-20211208153223437-20211208154222323.png&quot; alt=&quot;image-20211208153223437&quot; /&gt;&lt;/p&gt;
&lt;p&gt;第三天：迭代、迭代器、list生成式&lt;/p&gt;</summary>
    
    
    
    <category term="Python" scheme="https://blog.tangspoon.cn/categories/Python/"/>
    
    
    <category term="Python" scheme="https://blog.tangspoon.cn/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python学习日志-02｜复习</title>
    <link href="https://blog.tangspoon.cn/2021/12/08/Python%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%BF%97-02%EF%BD%9C%E5%A4%8D%E4%B9%A0/"/>
    <id>https://blog.tangspoon.cn/2021/12/08/Python%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%BF%97-02%EF%BD%9C%E5%A4%8D%E4%B9%A0/</id>
    <published>2021-12-08T07:38:27.000Z</published>
    <updated>2021-12-17T12:41:02.559Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://picbed.tangspoon.cn/uPic/image-20211208153223437-20211208154222323.png" alt="image-20211208153223437" /></p><p>第二天：函数的参数、传值、匿名函数</p><a id="more"></a><p><code>2021-12-17</code></p><p>01和这个02相隔有点久，这段时间在搞从老妈子从垃圾桶旁捡回来的主机，150块把它整复活了～然后把树莓派卖了，换了一台斐讯的N1盒子继续挂网易云闹钟。</p><h2 id="一-函数参数"><a class="markdownIt-Anchor" href="#一-函数参数"></a> 一、函数参数</h2><p>python的函数可以有多个返回值，实际上是先创建了一个元组然后再返回的。</p><h3 id="1-默认参数"><a class="markdownIt-Anchor" href="#1-默认参数"></a> 1. 默认参数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># b是默认参数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span>(<span class="params">a,b=<span class="number">1</span></span>):</span></span><br><span class="line"><span class="keyword">return</span> b</span><br></pre></td></tr></table></figure><h4 id="1要在末尾"><a class="markdownIt-Anchor" href="#1要在末尾"></a> （1）要在末尾</h4><h4 id="2不能使用list这种形式做默认参数默认值必须为不可更改的整数-字符串-true-false-none等"><a class="markdownIt-Anchor" href="#2不能使用list这种形式做默认参数默认值必须为不可更改的整数-字符串-true-false-none等"></a> （2）不能使用<code>list=[]</code>这种形式做默认参数，默认值必须为不可更改的：整数、字符串、True、False、None等。</h4><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span>(<span class="params">a,b=None</span>)</span></span><br><span class="line"><span class="function"><span class="title">return</span> <span class="title">b</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"># <span class="title">def</span> <span class="title">test</span>(<span class="params">a,b=[]</span>) 不会报错，但一旦对<span class="title">b</span>修改，返回结果会出错</span></span><br></pre></td></tr></table></figure></blockquote><h3 id="2-位置参数关键字参数"><a class="markdownIt-Anchor" href="#2-位置参数关键字参数"></a> 2. 位置参数（关键字参数）</h3><p>python中可以根据<strong>参数名</strong>传参，所以不顺序传参也行（但最好顺序）。</p><h3 id="3-不定长参数可变参数"><a class="markdownIt-Anchor" href="#3-不定长参数可变参数"></a> 3. 不定长参数（可变参数）</h3><p>有时候在设计函数时，我们无法确定传入参数的多少，这时候就可以用<code>tuple元组</code>或<code>dist字典</code>来描述那些没有被定义的参数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># tuple</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span>(<span class="params">a=<span class="number">1</span>,*b</span>):</span></span><br><span class="line"><span class="keyword">return</span> b</span><br><span class="line">re=test(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">print(re) <span class="comment">#结果：(2,3,4)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># dist</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span>(<span class="params">a=<span class="number">1</span>,**b</span>):</span></span><br><span class="line"><span class="keyword">return</span> b</span><br><span class="line">re=test(<span class="number">1</span>,b=(,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>))</span><br><span class="line">print(re) <span class="comment">#结果：&#123;&#x27;b&#x27;:(2,3,4,5)&#125;</span></span><br></pre></td></tr></table></figure><p><code>*b</code>返回结果是元组</p><p><code>**b</code>其实是不定长参数里的关键字参数，是通过关键字<code>b</code>确定的。</p><h3 id="4-强制使用关键字参数"><a class="markdownIt-Anchor" href="#4-强制使用关键字参数"></a> 4. 强制使用关键字参数</h3><p>把需要强制使用keyword的参数放在<code>*</code>后面。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span>(<span class="params">a,*,b</span>):</span></span><br><span class="line"><span class="keyword">return</span> b</span><br><span class="line"></span><br><span class="line">re=test(<span class="number">1</span>,b=<span class="number">2</span>)</span><br><span class="line">print(re)</span><br></pre></td></tr></table></figure><img src="https://picbed.tangspoon.cn/uPic/image-20211217172829525.png" alt="image-20211217172829525" style="zoom:50%;" /><h2 id="二-传值"><a class="markdownIt-Anchor" href="#二-传值"></a> 二、传值</h2><p>除了<code>list</code>和<code>dist</code>可变之外，其他像整形、浮点型、字符串、tuple等都不可变。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span>(<span class="params">a</span>):</span></span><br><span class="line">print(a) <span class="comment">#a的值是不会被改变的</span></span><br><span class="line">a=<span class="number">1000</span></span><br><span class="line">print(a) <span class="comment"># 这里的a只是test()外的a的复制体，改变的也只是复制体的值</span></span><br><span class="line"></span><br><span class="line">a=<span class="number">1</span></span><br><span class="line">test(a)</span><br><span class="line">print(a)</span><br><span class="line"><span class="comment"># 1</span></span><br><span class="line"><span class="comment"># 1000</span></span><br><span class="line"><span class="comment"># 1</span></span><br></pre></td></tr></table></figure><h2 id="三-匿名函数"><a class="markdownIt-Anchor" href="#三-匿名函数"></a> 三、匿名函数</h2><p>不用def整体命名整个函数，用最简单的形式写一个回调函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sum=<span class="keyword">lambda</span> num1,num2:num1+num2</span><br><span class="line">print(sum(<span class="number">1</span>,<span class="number">2</span>))</span><br></pre></td></tr></table></figure><p>基本形式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">lambda</span> arg1,arg2 : expression</span><br></pre></td></tr></table></figure><p>有个地方需要注意：下面的结果都是10001。因为num2是一个自由参数，是按<code>执行顺序</code>绑定值，不是定义时就绑定。</p><blockquote><p>可看python的执行顺序：<a href="https://pythontutor.com/visualize.html#mode=display">https://pythontutor.com/visualize.html#mode=display</a></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"></span><br><span class="line">num2 = <span class="number">100</span></span><br><span class="line">sum1 = <span class="keyword">lambda</span> num1 : num1 + num2 ;</span><br><span class="line"></span><br><span class="line">num2 = <span class="number">10000</span></span><br><span class="line">sum2 = <span class="keyword">lambda</span> num1 : num1 + num2 ;</span><br><span class="line"></span><br><span class="line">print( sum1( <span class="number">1</span> ) )</span><br><span class="line">print( sum2( <span class="number">1</span> ) )</span><br></pre></td></tr></table></figure><p><img src="https://picbed.tangspoon.cn/uPic/image-20211217180821420.png" alt="image-20211217180821420" /></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://picbed.tangspoon.cn/uPic/image-20211208153223437-20211208154222323.png&quot; alt=&quot;image-20211208153223437&quot; /&gt;&lt;/p&gt;
&lt;p&gt;第二天：函数的参数、传值、匿名函数&lt;/p&gt;</summary>
    
    
    
    <category term="Python" scheme="https://blog.tangspoon.cn/categories/Python/"/>
    
    
    <category term="Python" scheme="https://blog.tangspoon.cn/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python学习日志-01｜复习</title>
    <link href="https://blog.tangspoon.cn/2021/12/08/Python%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%BF%97-01%EF%BD%9C%E5%A4%8D%E4%B9%A0/"/>
    <id>https://blog.tangspoon.cn/2021/12/08/Python%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%BF%97-01%EF%BD%9C%E5%A4%8D%E4%B9%A0/</id>
    <published>2021-12-08T07:33:43.000Z</published>
    <updated>2021-12-17T12:42:22.300Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://picbed.tangspoon.cn/uPic/image-20211208153223437.png" alt="image-20211208153223437" /></p><p>自己写了好几个python项目之后发现，好多知识都遗忘了，有些没有理解透导致执行效率不高。趁这段时间有空，重新学习一下。</p><p>list、dict、tuple、set</p><a id="more"></a><p><code>2021-12-07</code></p><h2 id="一-list列表"><a class="markdownIt-Anchor" href="#一-list列表"></a> 一、List列表</h2><h3 id="1-在特定位置增加元素"><a class="markdownIt-Anchor" href="#1-在特定位置增加元素"></a> 1. 在特定位置增加元素</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list.insert(index,obj)</span><br></pre></td></tr></table></figure><h3 id="2-扩展"><a class="markdownIt-Anchor" href="#2-扩展"></a> 2. 扩展</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list.extend(seq)</span><br></pre></td></tr></table></figure><p>是直接改变原来的list，不是生成一个新的list。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">list1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="string">&#x27;a&#x27;</span>]</span><br><span class="line">list2 = [<span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>]</span><br><span class="line"></span><br><span class="line">list1.extend(list2)</span><br><span class="line">print(list1)</span><br></pre></td></tr></table></figure><h3 id="3-删除"><a class="markdownIt-Anchor" href="#3-删除"></a> 3. 删除</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 方式一</span></span><br><span class="line"><span class="keyword">del</span> list[index]</span><br><span class="line"><span class="comment"># 方式二</span></span><br><span class="line">list.pop(index) <span class="comment"># 默认最后一个元素，并返回该元素的值</span></span><br><span class="line"><span class="comment"># 方式三</span></span><br><span class="line">list.remove(obj) <span class="comment"># 参数是列表中元素，不返回任何值</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">list1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;x&#x27;</span>]</span><br><span class="line">list2 = [<span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>]</span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27;pop:&#x27;</span>, list1.pop(<span class="number">5</span>)) <span class="comment"># 输出x</span></span><br><span class="line">print(<span class="string">&#x27;remove:&#x27;</span>, lsit1.remove(<span class="string">&#x27;a&#x27;</span>)) <span class="comment"># 输出none</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="4-反向"><a class="markdownIt-Anchor" href="#4-反向"></a> 4. 反向</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list.reverse()</span><br></pre></td></tr></table></figure><h3 id="5-排序"><a class="markdownIt-Anchor" href="#5-排序"></a> 5. 排序</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">list.sort(reverse=<span class="literal">False</span>,key=<span class="literal">None</span>,cmp=<span class="literal">None</span>)</span><br><span class="line"><span class="comment"># reverse=false是默认方式：升序（小到大），True为降序</span></span><br><span class="line"><span class="comment"># key指定元素进行排序</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">takeSecond</span>(<span class="params">elem</span>):</span></span><br><span class="line">    <span class="keyword">return</span> elem[<span class="number">1</span>]</span><br><span class="line">random = [(<span class="number">2</span>, <span class="number">2</span>), (<span class="number">3</span>, <span class="number">4</span>), (<span class="number">4</span>, <span class="number">1</span>), (<span class="number">1</span>, <span class="number">3</span>)]</span><br><span class="line">random.sort(key=takeSecond)</span><br><span class="line">print(random)</span><br><span class="line"><span class="comment"># [(4, 1), (2, 2), (1, 3), (3, 4)]</span></span><br></pre></td></tr></table></figure><h2 id="二-tuple元组"><a class="markdownIt-Anchor" href="#二-tuple元组"></a> 二、tuple元组</h2><h3 id="1-单个元素要加逗号"><a class="markdownIt-Anchor" href="#1-单个元素要加逗号"></a> 1. 单个元素要加逗号</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tuple=(<span class="number">123</span>) <span class="comment"># print结果：123</span></span><br><span class="line">tuple=(<span class="number">123</span>,) <span class="comment"># print结果：(123,)</span></span><br><span class="line"><span class="comment"># 因为()既可以是括号也可以是元组，会有歧义。加个逗号就代表是元组啦</span></span><br></pre></td></tr></table></figure><h3 id="2-tuple的修改"><a class="markdownIt-Anchor" href="#2-tuple的修改"></a> 2. tuple的修改</h3><p><code>tuple是不可修改的</code>指的是每个元素的指向，永远不变。但我们可以嵌入一个数组，间接修改tuple</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tuple=(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,[lsit1])</span><br><span class="line">list1=[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>]</span><br><span class="line">list1[<span class="number">0</span>]=<span class="string">&#x27;x&#x27;</span></span><br><span class="line">print(<span class="string">&#x27;tuple：&#x27;</span>,tuple)</span><br><span class="line"><span class="comment"># print结果 tuple： (1, 2, 3, 4, [&#x27;x&#x27;, &#x27;b&#x27;])</span></span><br></pre></td></tr></table></figure><h3 id="3-读取"><a class="markdownIt-Anchor" href="#3-读取"></a> 3. 读取</h3><p>换成<code>list</code>，再读取</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tuple=(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">list=[]</span><br><span class="line">list=tuple</span><br><span class="line">print(list[<span class="number">0</span>]) <span class="comment"># 获取元组第一个数据</span></span><br></pre></td></tr></table></figure><h2 id="三-dict字典"><a class="markdownIt-Anchor" href="#三-dict字典"></a> 三、dict字典</h2><p>因为list列表越长，查找起来就越慢。用字典dict可以解决问题。</p><p>字典中一个键值重复出现两次，那么以最后一次的值为准。</p><p><code>键</code>不可变，可以用字符串、数字、元祖。但就是不用数组（因为数组是可修改的，这与<code>键</code>是不可修改的冲突）</p><h3 id="1-增加"><a class="markdownIt-Anchor" href="#1-增加"></a> 1. 增加</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dict1 = &#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">2</span>&#125;</span><br><span class="line">dict1[<span class="string">&#x27;c&#x27;</span>] = <span class="number">3</span></span><br></pre></td></tr></table></figure><h3 id="2-修改"><a class="markdownIt-Anchor" href="#2-修改"></a> 2. 修改</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dict1 = &#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">2</span>&#125;</span><br><span class="line">dict1[<span class="string">&#x27;a&#x27;</span>] = <span class="number">3</span></span><br></pre></td></tr></table></figure><h3 id="3-删除-2"><a class="markdownIt-Anchor" href="#3-删除-2"></a> 3. 删除</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">dict1 &#x3D; &#123;&#39;a&#39;: 1, &#39;b&#39;: 2&#125;</span><br><span class="line"># 通过键，删除值</span><br><span class="line">del dict1[&#39;a&#39;]</span><br><span class="line"># 删除所有元素</span><br><span class="line">dict1.clean</span><br><span class="line"># 删除字典</span><br><span class="line">del dict1</span><br></pre></td></tr></table></figure><h3 id="4-copy-浅拷贝"><a class="markdownIt-Anchor" href="#4-copy-浅拷贝"></a> 4. copy() 浅拷贝</h3><p>dict2=dict1这种方式是一引用，简单说就是给dict1起了另一条新名字而已。输出结果与dict1保持一致。</p><p>在介绍浅拷贝前，先认识一下深拷贝会更好。深拷贝是对象的完全拷贝，拷贝后的dist2是不受dist的变化影响的。也就是说，深拷贝后的dist2是独立的。</p><img src="https://picbed.tangspoon.cn/uPic/image-20211207192758608.png" alt="image-20211207192758608" style="zoom:32%;" /><p>而浅拷贝则不是独立的。对浅拷贝的新dist2来说，操作对象是<code>值</code>，<code>键</code>是不会随dist1变的。</p><img src="https://picbed.tangspoon.cn/uPic/image-20211207192102217.png" alt="image-20211207192102217" style="zoom:30%;" /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>]] <span class="comment">#原始对象</span></span><br><span class="line"> </span><br><span class="line">b = a                       <span class="comment">#赋值，传对象的引用</span></span><br><span class="line">c = copy.copy(a)            <span class="comment">#对象拷贝，浅拷贝</span></span><br><span class="line">d = copy.deepcopy(a)        <span class="comment">#对象拷贝，深拷贝</span></span><br><span class="line"> </span><br><span class="line">a.append(<span class="number">5</span>)                 <span class="comment">#修改对象a</span></span><br><span class="line">a[<span class="number">4</span>].append(<span class="string">&#x27;c&#x27;</span>)            <span class="comment">#修改对象a中的[&#x27;a&#x27;, &#x27;b&#x27;]数组对象</span></span><br><span class="line"> </span><br><span class="line">print( <span class="string">&#x27;a = &#x27;</span>, a )</span><br><span class="line">print( <span class="string">&#x27;b = &#x27;</span>, b )</span><br><span class="line">print( <span class="string">&#x27;c = &#x27;</span>, c )</span><br><span class="line">print( <span class="string">&#x27;d = &#x27;</span>, d )</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">(<span class="string">&#x27;a = &#x27;</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>], <span class="number">5</span>])</span><br><span class="line">(<span class="string">&#x27;b = &#x27;</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>], <span class="number">5</span>])</span><br><span class="line">(<span class="string">&#x27;c = &#x27;</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]])</span><br><span class="line">(<span class="string">&#x27;d = &#x27;</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>]])</span><br></pre></td></tr></table></figure><p>可以看到，深拷贝的d是完全不受a的变化而影响；而浅拷贝的c则被改变了<code>值</code>。</p><h2 id="四-set"><a class="markdownIt-Anchor" href="#四-set"></a> 四、set</h2><p>set是一个无序的、不重复的元素集。就像是一个不储存<code>值value</code>，只有<code>键key</code>的字典。</p><h3 id="1-创建"><a class="markdownIt-Anchor" href="#1-创建"></a> 1. 创建</h3><p>set的创建需要用<code>set()</code>方法，然后提供一个<code>list</code>作为输入集合。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set1=set([])</span><br></pre></td></tr></table></figure><h3 id="2-删除"><a class="markdownIt-Anchor" href="#2-删除"></a> 2. 删除</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">set1=set([<span class="number">123</span>,<span class="number">456</span>,<span class="number">789</span>])</span><br><span class="line">set1.remove(<span class="number">123</span>)</span><br><span class="line">print(set1) <span class="comment"># 结果：&#123;456,789&#125;</span></span><br></pre></td></tr></table></figure><h3 id="3-应用"><a class="markdownIt-Anchor" href="#3-应用"></a> 3. 应用</h3><h4 id="1-交集"><a class="markdownIt-Anchor" href="#1-交集"></a> 1. 交集</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">set1=set([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>])</span><br><span class="line">set2=set([<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">6</span>])</span><br><span class="line">set3=set1&amp;set2</span><br><span class="line">print(set3) <span class="comment">#结果：&#123;1,2,3&#125;</span></span><br></pre></td></tr></table></figure><h4 id="2-并集"><a class="markdownIt-Anchor" href="#2-并集"></a> 2. 并集</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">set3=set1|set2</span><br><span class="line">print(set3) <span class="comment">#结果：&#123;1,2,3,4,5,6&#125;</span></span><br></pre></td></tr></table></figure><h4 id="3-差集"><a class="markdownIt-Anchor" href="#3-差集"></a> 3. 差集</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">set3=set1-set2</span><br><span class="line">print(set3) <span class="comment">#结果：&#123;4&#125;</span></span><br><span class="line"></span><br><span class="line">set3=set2-set1</span><br><span class="line">print(set3) <span class="comment">#结果：&#123;5,6&#125;</span></span><br></pre></td></tr></table></figure><h4 id="4-去除海量元素"><a class="markdownIt-Anchor" href="#4-去除海量元素"></a> 4. 去除海量元素</h4><p>这部分是最有意思的。刚好当天看到了有个腾讯三面题，40亿个qq号怎么去重。我在想，用<code>set</code>会怎么样？这里就涉及到<code>set</code>的一个属性——需要提供一个<code>list</code>集合作为数据输入。把40亿的数据变成的list显然不现实。所以这可以看做是用<code>set</code>去除海量元素的限制。</p><p>但是测试了一下1000w个7位数的整数去重，只花了2.3s！这个速度还是快到惊人的！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">list1 = [<span class="number">111</span>,<span class="number">222</span>,<span class="number">333</span>,<span class="number">444</span>,<span class="number">111</span>,<span class="number">222</span>,<span class="number">333</span>,<span class="number">444</span>,<span class="number">555</span>,<span class="number">666</span>]  </span><br><span class="line">set1=set(list1)</span><br><span class="line">print(set1)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://picbed.tangspoon.cn/uPic/image-20211208153223437.png&quot; alt=&quot;image-20211208153223437&quot; /&gt;&lt;/p&gt;
&lt;p&gt;自己写了好几个python项目之后发现，好多知识都遗忘了，有些没有理解透导致执行效率不高。趁这段时间有空，重新学习一下。&lt;/p&gt;
&lt;p&gt;list、dict、tuple、set&lt;/p&gt;</summary>
    
    
    
    <category term="Python" scheme="https://blog.tangspoon.cn/categories/Python/"/>
    
    
    <category term="Python" scheme="https://blog.tangspoon.cn/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>原创｜转发B站UP主动态到微信python脚本</title>
    <link href="https://blog.tangspoon.cn/2021/12/06/%E5%8E%9F%E5%88%9B%EF%BD%9C%E8%BD%AC%E5%8F%91B%E7%AB%99UP%E4%B8%BB%E5%8A%A8%E6%80%81%E5%88%B0%E5%BE%AE%E4%BF%A1python%E8%84%9A%E6%9C%AC/"/>
    <id>https://blog.tangspoon.cn/2021/12/06/%E5%8E%9F%E5%88%9B%EF%BD%9C%E8%BD%AC%E5%8F%91B%E7%AB%99UP%E4%B8%BB%E5%8A%A8%E6%80%81%E5%88%B0%E5%BE%AE%E4%BF%A1python%E8%84%9A%E6%9C%AC/</id>
    <published>2021-12-06T13:32:12.000Z</published>
    <updated>2021-12-17T12:44:38.057Z</updated>
    
    <content type="html"><![CDATA[<img src="https://picbed.tangspoon.cn/uPic/image-20211206213430058.png" alt="image-20211206213430058" style="zoom:40%;" /><h2 id="一-需求"><a class="markdownIt-Anchor" href="#一-需求"></a> 一、需求</h2><p>B站关注了非常多up主，每天动态99+，但其实绝大部分的UP主我都不感兴趣。我每天都得手动寻找那些必看的UP。在寻找的过程中，大数据推荐让我忍不住看了一个又一个的视频，浪费时间不够专注。</p><p>所以，需要开发一个<strong>每天定时把我每天必看的UP主的动态转发到微信</strong>，这样避免了手动寻找和被大数据推荐的干扰，专注力大大提高。</p><a id="more"></a><h2 id="二-思路"><a class="markdownIt-Anchor" href="#二-思路"></a> 二、思路</h2><p>如果动态的发出日和系统当天日期相等，就把动态链接发送到微信。所以我们第一步是要获取到动态的发出日。第二步要完成的是而把信息转发到微信的功能，可以借助**<a href="https://sct.ftqq.com/upgrade?fr=sc">server酱</a>**完成。</p><h2 id="三-获取动态的发出日期"><a class="markdownIt-Anchor" href="#三-获取动态的发出日期"></a> 三、获取动态的发出日期</h2><h3 id="1-抓取动态api"><a class="markdownIt-Anchor" href="#1-抓取动态api"></a> 1. 抓取动态API</h3><p>上网找了一下，好像没有直接提供有关于动态的api，那我们F12看看。想要定位到UP主，api的参数肯定是带有uid，所以我们可以直接筛选出相关的api。</p><img src="https://picbed.tangspoon.cn/uPic/image-20211206191118663.png" alt="image-20211206191118663" style="zoom:50%;" /><p>然后我们在两个api的response数据里面搜索<code>dynamic</code>，可以分析出第二条是应该就是我们可以用到的api了。</p><img src="https://picbed.tangspoon.cn/uPic/image-20211206191429552.png" alt="image-20211206191429552" style="zoom:50%;" /><p><strong>Request URL:</strong></p><p><a href="https://api.vc.bilibili.com/dynamic_svr/v1/dynamic_svr/space_history?visitor_uid=XXXXX&amp;host_uid=XXXXX&amp;offset_dynamic_id=0&amp;need_top=1&amp;platform=web">https://api.vc.bilibili.com/dynamic_svr/v1/dynamic_svr/space_history?visitor_uid=XXXXX&amp;host_uid=XXXXX&amp;offset_dynamic_id=0&amp;need_top=1&amp;platform=web</a></p><p>从上面可以看出，参数有好几个。进一步在postman上测试出只有 <code>host_uid</code>是必须的参数。所以我们得出了Bilibili的动态api与必须参数：</p><blockquote><p><code>api</code>：<a href="https://api.vc.bilibili.com/dynamic_svr/v1/dynamic_svr/space_history">https://api.vc.bilibili.com/dynamic_svr/v1/dynamic_svr/space_history</a></p><p><code>data</code>：host_uid（string，必填）</p></blockquote><h3 id="2-数据分析"><a class="markdownIt-Anchor" href="#2-数据分析"></a> 2. 数据分析</h3><p>在response里面搜索time，找到有个叫<code>timestamp</code>的字段。这很明显是时间戳。</p><img src="https://picbed.tangspoon.cn/uPic/image-20211206194517975.png" alt="image-20211206194517975" style="zoom:30%;" /><p>我们在<a href="https://tool.lu/timestamp/">时间戳在线转换网</a>里查看时间。经过对比，第一个<code>timestamp</code>就是我们需要的数据！</p><img src="https://picbed.tangspoon.cn/uPic/image-20211206200625092.png" alt="image-20211206200625092" style="zoom:33%;" /><img src="https://picbed.tangspoon.cn/uPic/image-20211206200652112.png" alt="image-20211206200652112" style="zoom:34%;" /><h2 id="四-server酱的使用"><a class="markdownIt-Anchor" href="#四-server酱的使用"></a> 四、server酱的使用</h2><p><code>server酱</code>的应用场景：<a href="https://sct.ftqq.com/apps">https://sct.ftqq.com/apps</a></p><p>使用<code>server酱</code>的使用也非常简单，官方有介绍（图中的<code>*</code>，是你们注册后的到的sendkey）</p><img src="https://picbed.tangspoon.cn/uPic/image-20211206201723794.png" alt="image-20211206201723794" style="zoom: 33%;" /><p>我们只需要制造好<code>title</code>和 <code>desp</code>参数的内容即可完成功能。</p><h2 id="五-uid列表的读取与写入"><a class="markdownIt-Anchor" href="#五-uid列表的读取与写入"></a> 五、uid列表的读取与写入</h2><p>因为是个人使用，所以没有写数据库，直接从<code>uid.txt</code>中读取数据。</p><p>但如果想要添加自己喜欢的up主要怎么更快捷的操作？答案可以从我的另一篇文章<a href="https://blog.tangspoon.cn/2020/12/31/%E6%99%BA%E8%83%BD%E9%97%B9%E9%92%9F%EF%BC%88%E4%BA%94%EF%BC%89%EF%BD%9C%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E5%9C%B0%E5%85%B3%E9%97%AD%E9%97%B9%E9%92%9F%EF%BC%9F/">《智能闹钟（五）｜如何优雅地关闭闹钟？》</a>中找到答案——IOS的快捷指令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home</span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">echo</span> xxxx &gt;&gt; uid.txt</span><br></pre></td></tr></table></figure><p>注意，图中的<code>每次均询问</code>是快捷指令的其中一个功能，在编辑脚本的时候可选。</p><img src="https://picbed.tangspoon.cn/uPic/IMG_3759.jpg" alt="IMG_3759" style="zoom: 33%;" /><img src="https://picbed.tangspoon.cn/uPic/IMG_3760.jpg" alt="IMG_3760" style="zoom:25%;" /><h2 id="六-部署到vps"><a class="markdownIt-Anchor" href="#六-部署到vps"></a> 六、部署到vps</h2><h3 id="1-建立uidtxt"><a class="markdownIt-Anchor" href="#1-建立uidtxt"></a> 1. 建立uid.txt</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">touch &#x2F;home&#x2F;uid.txt</span><br><span class="line"># 添加uid</span><br><span class="line">vi &#x2F;home&#x2F;uid.txt</span><br></pre></td></tr></table></figure><h3 id="2-安装requests模块"><a class="markdownIt-Anchor" href="#2-安装requests模块"></a> 2. 安装requests模块</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># debian9</span><br><span class="line">apt-get install python-requests -y</span><br><span class="line"># centos</span><br><span class="line">yum install python-requests -y</span><br></pre></td></tr></table></figure><h3 id="2-换成python3"><a class="markdownIt-Anchor" href="#2-换成python3"></a> 2. 换成python3</h3><p>部署到vps可能会出现如下错误</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">“UnicodeDecodeError: &#39;ascii&#39; codec can&#39;t decode byte 0xc0 in position 7: ordi”</span><br></pre></td></tr></table></figure><p>这是因为出现系统中默认使用python2，换成python3就可以解决问题</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除/usr/bin目录下的python link文件</span></span><br><span class="line">sudo rm -rf /usr/bin/python</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除后再建立新的链接关系：</span></span><br><span class="line">sudo ln -s /usr/bin/python3<span class="number">.5</span> /usr/bin/python</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果想切换回python2.7</span></span><br><span class="line">sudo rm -rf /usr/bin/python</span><br><span class="line">sudo ln -s /usr/bin/ptyhon2<span class="number">.7</span> /usr/bin/python</span><br></pre></td></tr></table></figure><h3 id="3-设置crontab定时任务"><a class="markdownIt-Anchor" href="#3-设置crontab定时任务"></a> 3. 设置crontab定时任务</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">00 22 * * * python BDynamicToWechat.py</span><br><span class="line"># 每天晚上10点执行任务</span><br></pre></td></tr></table></figure><h3 id="4-重启crontab"><a class="markdownIt-Anchor" href="#4-重启crontab"></a> 4. 重启crontab</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service cron restart</span><br></pre></td></tr></table></figure><h2 id="七-效果"><a class="markdownIt-Anchor" href="#七-效果"></a> 七、效果</h2><img src="https://picbed.tangspoon.cn/uPic/IMG_3761.jpg" alt="IMG_3761" style="zoom:33%;" /><img src="https://picbed.tangspoon.cn/uPic/IMG_3762.jpg" alt="IMG_3762" style="zoom:33%;" /><h2 id="八-代码"><a class="markdownIt-Anchor" href="#八-代码"></a> 八、代码</h2><p><strong>欢迎star</strong></p><blockquote><p>github地址：<a href="https://github.com/tangspoon66/BDynamicToWechat">https://github.com/tangspoon66/BDynamicToWechat</a></p></blockquote>]]></content>
    
    
    <summary type="html">&lt;img src=&quot;https://picbed.tangspoon.cn/uPic/image-20211206213430058.png&quot; alt=&quot;image-20211206213430058&quot; style=&quot;zoom:40%;&quot; /&gt;
&lt;h2 id=&quot;一-需求&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#一-需求&quot;&gt;&lt;/a&gt; 一、需求&lt;/h2&gt;
&lt;p&gt;B站关注了非常多up主，每天动态99+，但其实绝大部分的UP主我都不感兴趣。我每天都得手动寻找那些必看的UP。在寻找的过程中，大数据推荐让我忍不住看了一个又一个的视频，浪费时间不够专注。&lt;/p&gt;
&lt;p&gt;所以，需要开发一个&lt;strong&gt;每天定时把我每天必看的UP主的动态转发到微信&lt;/strong&gt;，这样避免了手动寻找和被大数据推荐的干扰，专注力大大提高。&lt;/p&gt;</summary>
    
    
    
    <category term="python" scheme="https://blog.tangspoon.cn/categories/python/"/>
    
    
    <category term="python" scheme="https://blog.tangspoon.cn/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>中国移动电视盒子刷机｜当贝市场</title>
    <link href="https://blog.tangspoon.cn/2021/12/05/%E4%B8%AD%E5%9B%BD%E7%A7%BB%E5%8A%A8%E7%94%B5%E8%A7%86%E7%9B%92%E5%AD%90%E5%88%B7%E6%9C%BA%EF%BD%9C%E5%BD%93%E8%B4%9D%E5%B8%82%E5%9C%BA%E9%9A%8F%E4%BE%BF%E8%A3%85APP/"/>
    <id>https://blog.tangspoon.cn/2021/12/05/%E4%B8%AD%E5%9B%BD%E7%A7%BB%E5%8A%A8%E7%94%B5%E8%A7%86%E7%9B%92%E5%AD%90%E5%88%B7%E6%9C%BA%EF%BD%9C%E5%BD%93%E8%B4%9D%E5%B8%82%E5%9C%BA%E9%9A%8F%E4%BE%BF%E8%A3%85APP/</id>
    <published>2021-12-05T03:08:01.000Z</published>
    <updated>2021-12-05T04:14:31.153Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://picbed.tangspoon.cn/uPic/image-20211205120819625.png" alt="image-20211205120819625" /></p><a id="more"></a><h2 id="一-下载固件"><a class="markdownIt-Anchor" href="#一-下载固件"></a> 一、下载固件</h2><blockquote><p>这一步非常重要，搞不好会变砖。</p></blockquote><h3 id="1-确定机型"><a class="markdownIt-Anchor" href="#1-确定机型"></a> 1. 确定机型</h3><p>我的是：魔百盒CM201-2</p><p><img src="https://picbed.tangspoon.cn/uPic/IMG_3714.JPG" alt="IMG_3714" /></p><h3 id="2-确定芯片型号可跳过但有风险"><a class="markdownIt-Anchor" href="#2-确定芯片型号可跳过但有风险"></a> 2. 确定芯片型号（可跳过，但有风险）</h3><blockquote><p>为什么可跳过呢？因为会有一些型号通刷包，就像我这个CM201-2就有，但可能会有变砖风险。</p></blockquote><p>这一步需要拆开外壳，拧开两个隐藏在脚垫的螺丝就行。我的板子型号：M8273。</p><p><img src="https://picbed.tangspoon.cn/uPic/image-20211205121237365.png" alt="image-20211205121237365" /></p><h3 id="3-寻找-下载固件"><a class="markdownIt-Anchor" href="#3-寻找-下载固件"></a> 3. 寻找、下载固件</h3><p>带着机型、板子型号到搜索引擎搜索固件。在这里给两个比较靠谱的论坛：</p><p>小白刷机网「免费」：<a href="http://xiaobaishuaji.com/">http://xiaobaishuaji.com/</a></p><p>智能电视网「大多付费，但信息多」：<a href="https://www.znds.com/">https://www.znds.com/</a></p><p>麒麟刷机网「内容非常详尽」：<a href="https://www.szjytx.com/">https://www.szjytx.com/</a></p><h3 id="4-后路"><a class="markdownIt-Anchor" href="#4-后路"></a> 4. 后路</h3><p>是在找不到固件的话，可以加入上面三个论坛的交流群，会有很多大佬直接甩个链接给你下载。</p><p>我进了一个「魔百盒（IPTV盒子）技」，群号：517426928，氛围很好。（无广告哈）</p><img src="https://picbed.tangspoon.cn/uPic/image-20211205113956266.png" alt="image-20211205113956266" style="zoom:50%;" /><blockquote><p>CM201-2 ZG M8273版本的固件</p><p>百度云下载链接：<a href="https://pan.baidu.com/s/15Rv34NR4XMg-x2wVgCOPY">https://pan.baidu.com/s/15Rv34NR4XMg-x2wVgCOPY</a> 提取码：5nir</p><p>115：<a href="https://115.com/s/sw3vijh3z1i#">https://115.com/s/sw3vijh3z1i#</a>    访问码：ra18</p><p>腾讯微云：<a href="https://share.weiyun.com/yXW7Czpr">https://share.weiyun.com/yXW7Czpr</a> 密码：o9tkro</p></blockquote><h2 id="二-备份原版固件可跳过"><a class="markdownIt-Anchor" href="#二-备份原版固件可跳过"></a> 二、备份原版固件（可跳过）</h2><p>这一步我是跳过了的，因为需要ttl备份，花的时间太多，而且看了一下闲鱼这种破解好的机顶盒才几十一个。变砖了也不心疼。</p><p>相关备份有很多教程，每个型号都不一样，请自行搜索。</p><h2 id="三-开始刷机"><a class="markdownIt-Anchor" href="#三-开始刷机"></a> 三、开始刷机</h2><blockquote><ol><li>准备一个8G或以下的U盘</li><li>不要看刷机包里面的教程！！有问题！！</li></ol></blockquote><h3 id="1-文件处理"><a class="markdownIt-Anchor" href="#1-文件处理"></a> 1. 文件处理</h3><p>解压文件包后，如下。（第一个文件夹只有两个文件）</p><p><img src="https://picbed.tangspoon.cn/uPic/image-20211205114147760.png" alt="image-20211205114147760" /></p><blockquote><p>这里一定要按照我的步骤操作，<strong>不要</strong>看压缩包里面的“免拆刷机步骤.txt”</p></blockquote><p>在U盘中新建一个LOST.DIR的文件夹，然后把上图中第一个文件夹里面的“full-CM201-2-002.460.006-20180324120441.zip”复制到U盘里刚刚新建的LOST.DIR里面，然后把update.zip直接复制在U盘根目录。（如下）</p><p><img src="https://picbed.tangspoon.cn/uPic/Xnip2021-12-03_23-07-04-20211205110830145.jpg" alt="Xnip2021-12-03_23-07-04" /></p><p><img src="https://picbed.tangspoon.cn/uPic/Xnip2021-12-03_23-07-14.jpg" alt="Xnip2021-12-03_23-07-14" /></p><h3 id="2-机顶盒操作刷机"><a class="markdownIt-Anchor" href="#2-机顶盒操作刷机"></a> 2. 机顶盒操作刷机</h3><p>盒子开机，连续顺序点按遥控菜单键和音量减键，进入Recovery刷机模式。</p><p>选择从u盘刷入full-CM201-2-002.460.006-20180324120441.zip。</p><p>刷完机后重新启动机器，按遥控器的<strong>设置按钮</strong>。</p><p>无线/有线连接网络，查看网络信息，记下盒子的IP地址。（这一步可以直接路由器中查看盒子的ip）</p><p>运行免拆目录里的-双击执行-文件，按要求输入盒子IP地址。（这一步尽量用Windows系统电脑，因为macOS电脑好像会有问题）</p><p>批处理执行完毕后，盒子重启自动刷机直至完毕。</p><p><img src="https://picbed.tangspoon.cn/uPic/IMG_3715.JPG" alt="IMG_3715" /></p><h2 id="四-唠叨几句"><a class="markdownIt-Anchor" href="#四-唠叨几句"></a> 四、唠叨几句</h2><p>刷机有风险，看自己承受能力折腾。</p><p>魔百盒有很多代工厂，每个配件可能都会不一样，都会导致刷机的失败。所以，尽量找那种和所有硬件信息（cpu、wifi模块、闪存类型……）都匹配的固件。</p><p>刷机过程可能不会和教程一模一样，就自己理解整个流程，灵活变通一下吧。而且反正几十块一个而已，变砖了大不了重新买一个，大胆搞，学多点东西。</p><p>（我要看人生一串去了）</p><p><img src="https://picbed.tangspoon.cn/uPic/IMG_3716.JPG" alt="IMG_3716" /></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://picbed.tangspoon.cn/uPic/image-20211205120819625.png&quot; alt=&quot;image-20211205120819625&quot; /&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="硬件" scheme="https://blog.tangspoon.cn/categories/%E7%A1%AC%E4%BB%B6/"/>
    
    
    <category term="硬件" scheme="https://blog.tangspoon.cn/tags/%E7%A1%AC%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>常用linux脚本记录</title>
    <link href="https://blog.tangspoon.cn/2021/12/05/%E5%B8%B8%E7%94%A8%E4%B8%80%E9%94%AE%E8%84%9A%E6%9C%AC%E8%AE%B0%E5%BD%95/"/>
    <id>https://blog.tangspoon.cn/2021/12/05/%E5%B8%B8%E7%94%A8%E4%B8%80%E9%94%AE%E8%84%9A%E6%9C%AC%E8%AE%B0%E5%BD%95/</id>
    <published>2021-12-05T02:51:05.000Z</published>
    <updated>2021-12-18T04:36:04.785Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://picbed.tangspoon.cn/uPic/image-20211205110525139.png" alt="image-20211205110525139" /></p><p>linux有非常多好用的一键脚本加快效率，在此做个记录。</p><a id="more"></a><h2 id="1-添加swap"><a class="markdownIt-Anchor" href="#1-添加swap"></a> 1. 添加swap</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https:&#x2F;&#x2F;files.ioiox.com&#x2F;projects&#x2F;swap&#x2F;swap.sh &amp;&amp; chmod +x swap.sh &amp;&amp; .&#x2F;swap.sh</span><br></pre></td></tr></table></figure><h2 id="2-lnmp一键可选择安装"><a class="markdownIt-Anchor" href="#2-lnmp一键可选择安装"></a> 2. lnmp一键可选择安装</h2><p>oneinstack：<a href="https://oneinstack.com/auto/">https://oneinstack.com/auto/</a></p><h2 id="3-改成上海时间"><a class="markdownIt-Anchor" href="#3-改成上海时间"></a> 3. 改成上海时间</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 1.删除自带的localtime</span><br><span class="line">rm -rf &#x2F;etc&#x2F;localtime</span><br><span class="line"># 2.创建软链接到localtime</span><br><span class="line">ln -s &#x2F;usr&#x2F;share&#x2F;zoneinfo&#x2F;Asia&#x2F;Shanghai &#x2F;etc&#x2F;localtime</span><br></pre></td></tr></table></figure><h2 id="4-卸载python3"><a class="markdownIt-Anchor" href="#4-卸载python3"></a> 4. 卸载python3</h2><p>用于把python3.7换成python3.5</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 卸载</span><br><span class="line">rpm -qa|grep python3|xargs rpm -ev --allmatches --nodeps</span><br><span class="line"># 删除所有残余文件</span><br><span class="line">whereis python3 |xargs rm -frv </span><br><span class="line"># 查看现有安装的python</span><br><span class="line">whereis python </span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://picbed.tangspoon.cn/uPic/image-20211205110525139.png&quot; alt=&quot;image-20211205110525139&quot; /&gt;&lt;/p&gt;
&lt;p&gt;linux有非常多好用的一键脚本加快效率，在此做个记录。&lt;/p&gt;</summary>
    
    
    
    
    <category term="linux" scheme="https://blog.tangspoon.cn/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>智能闹钟（五）｜如何优雅地关闭闹钟？</title>
    <link href="https://blog.tangspoon.cn/2020/12/31/%E6%99%BA%E8%83%BD%E9%97%B9%E9%92%9F%EF%BC%88%E4%BA%94%EF%BC%89%EF%BD%9C%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E5%9C%B0%E5%85%B3%E9%97%AD%E9%97%B9%E9%92%9F%EF%BC%9F/"/>
    <id>https://blog.tangspoon.cn/2020/12/31/%E6%99%BA%E8%83%BD%E9%97%B9%E9%92%9F%EF%BC%88%E4%BA%94%EF%BC%89%EF%BD%9C%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E5%9C%B0%E5%85%B3%E9%97%AD%E9%97%B9%E9%92%9F%EF%BC%9F/</id>
    <published>2020-12-31T09:40:56.000Z</published>
    <updated>2020-12-31T10:03:32.004Z</updated>
    
    <content type="html"><![CDATA[<img src="https://picbed.tangspoon.cn/uPic/image-20201223222003013.png" alt="image-20201223222003013" style="zoom:45%;" /><p>网上相关项目基本都是只有播放功能，没有写关闭音乐，这明显不符合我们真实的使用场景。而日常生活中我们最容易接触的工具是手机，那如何通过手机优雅地关闭闹钟呢？</p><a id="more"></a><h2 id="一-目录结构"><a class="markdownIt-Anchor" href="#一-目录结构"></a> 一、目录结构</h2><p>在<code>clock</code>project内包含有5个脚本，<code>Netease.py</code>是主程序，<code>TextToVoice.py</code>用于文字转语音，<code>VolControl.py</code>实现渐入功能，<code>getWeather.py</code>用于获得每日天气，<code>shtudown.py</code>用于关闭闹钟。</p><img src="https://picbed.tangspoon.cn/uPic/image-20201223184351927.png" alt="image-20201223184351927" style="zoom:50%;" /><h2 id="二-关闭闹钟思路"><a class="markdownIt-Anchor" href="#二-关闭闹钟思路"></a> 二、关闭闹钟思路</h2><p>有人说关闭闹钟不就直接使用<code>pkill</code>命令结束掉mplayer进程不就可以了吗？但是，程序默认是循环播放32首歌曲+2次天气播报的，所以mplayer一共会执行34次。</p><p>由此，我们也很容易可以得出解决方案：<code>pkill</code>34次mplayer即可。</p><p>shutdown.py如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">35</span>):</span><br><span class="line">    os.system(<span class="string">&#x27;pkill -f mplayer&#x27;</span>)</span><br></pre></td></tr></table></figure><p>可是难道我们每次关闭都要经过：打开电脑，进入<code>ssh</code>，然后<code>sudo -i</code>，然后执行<code>python xxx/xxx/shutdown.py</code>？要是这样，我就根本不想用这个闹钟了！</p><p>突然想起之前刷B站时看到一个up主大概介绍了iOS的<strong>快捷指令</strong>！是可以运行脚本的！</p><h2 id="三-ios快捷指令关闭"><a class="markdownIt-Anchor" href="#三-ios快捷指令关闭"></a> 三、iOS快捷指令关闭</h2><p>设置路径：快捷指令主页右上角<code>+</code> – 添加操作 – 脚本 – 通过SSH运行脚本（一直往下拉） – 然后填好信息 – 保存指令<code>sudo python /home/clock/shutdown.py</code>。详细操作可查看下方图片。</p><p>这样我们就可以每天通过快捷指令，直接关闭闹钟了。</p><img src="https://picbed.tangspoon.cn/uPic/image-20201231173454629.png" alt="image-20201231173454629" style="zoom:33%;" /><img src="https://picbed.tangspoon.cn/uPic/image-20201231173544692.png" alt="image-20201231173544692" style="zoom:50%;" /><img src="https://picbed.tangspoon.cn/uPic/image-20201231173749629.png" alt="image-20201231173749629" style="zoom:50%;" /><h2 id="四-安卓怎么办"><a class="markdownIt-Anchor" href="#四-安卓怎么办"></a> 四、安卓怎么办？</h2><p>我在酷安搜索<code>ssh</code>软件，一个都没有？但无意中发现有一个软件用于PC电脑的远程开关机，查看了一下简介，是通过<code>ssh</code>连接到电脑，然后执行关机指令的。那么同样的，也能用于执行我的<code>shutdown.py</code>！</p><img src="https://picbed.tangspoon.cn/uPic/image-20201223225208634.png" alt="image-20201223225208634" style="zoom:33%;" /><br/><p>填写好信息后，点击第三个按钮保存配置，然后点击第二个按钮就可以关闭闹钟了！</p><p>还可以把关闭按钮添加在通知栏中，就可以更快速关闭闹钟了！</p><img src="https://picbed.tangspoon.cn/uPic/image-20201223225549628.png" alt="image-20201223225549628" style="zoom:33%;" /><h2 id="五-相关文章"><a class="markdownIt-Anchor" href="#五-相关文章"></a> 五、相关文章</h2><ol><li><p><a href="https://blog.tangspoon.cn/2020/12/19/%E6%99%BA%E8%83%BD%E9%97%B9%E9%92%9F%EF%BC%88%E4%B8%80%EF%BC%89%EF%BD%9CmacOS%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8%E6%A0%91%E8%8E%93%E6%B4%BE3B/#more">智能闹钟（一）｜macOS 入门使用树莓派 3B+</a></p></li><li><p><a href="http://localhost:4000/2020/12/21/%E6%99%BA%E8%83%BD%E9%97%B9%E9%92%9F%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BD%9C%E4%BD%BF%E7%94%A8%E3%80%8C%E5%92%8C%E9%A3%8E%E5%A4%A9%E6%B0%94%E3%80%81%E7%99%BE%E5%BA%A6%E8%AF%AD%E9%9F%B3%E5%90%88%E6%88%90%E3%80%8DAPI%E8%BF%9B%E8%A1%8C%E5%A4%A9%E6%B0%94%E7%9A%84%E6%92%AD%E6%8A%A5/#more">智能闹钟（二）｜使用「和风天气、百度语音合成」API进行天气的播报</a></p></li><li><p><a href="https://blog.tangspoon.cn/2020/12/22/%E6%99%BA%E8%83%BD%E9%97%B9%E9%92%9F%EF%BC%88%E4%B8%89%EF%BC%89%7C%20%E4%BD%BF%E7%94%A8%E3%80%8C%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90NodeJS%E7%89%88API%E6%8E%A5%E5%8F%A3%E3%80%8D%E8%8E%B7%E5%8F%96%E6%AF%8F%E6%97%A5%E6%8E%A8%E8%8D%90%E6%AD%8C%E6%9B%B2/#more">智能闹钟（三）| 使用「网易云音乐 NodeJS 版 API 接口」播放每日推荐歌曲</a></p></li><li><p><a href="https://blog.tangspoon.cn/2020/12/24/%E6%99%BA%E8%83%BD%E9%97%B9%E9%92%9F%EF%BC%88%E5%9B%9B%EF%BC%89-%E6%95%B4%E5%90%88%E6%90%AD%E5%BB%BA/#more">智能闹钟（四）-整合搭建</a></p></li></ol>]]></content>
    
    
    <summary type="html">&lt;img src=&quot;https://picbed.tangspoon.cn/uPic/image-20201223222003013.png&quot; alt=&quot;image-20201223222003013&quot; style=&quot;zoom:45%;&quot; /&gt;
&lt;p&gt;网上相关项目基本都是只有播放功能，没有写关闭音乐，这明显不符合我们真实的使用场景。而日常生活中我们最容易接触的工具是手机，那如何通过手机优雅地关闭闹钟呢？&lt;/p&gt;</summary>
    
    
    
    <category term="树莓派" scheme="https://blog.tangspoon.cn/categories/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
    
    <category term="树莓派" scheme="https://blog.tangspoon.cn/tags/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
    <category term="Python" scheme="https://blog.tangspoon.cn/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Flask 学习笔记 - Hello</title>
    <link href="https://blog.tangspoon.cn/2020/12/26/Flask-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B001-Hello/"/>
    <id>https://blog.tangspoon.cn/2020/12/26/Flask-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B001-Hello/</id>
    <published>2020-12-26T08:57:47.000Z</published>
    <updated>2021-12-27T09:18:40.809Z</updated>
    
    <content type="html"><![CDATA[<img src="https://picbed.tangspoon.cn/uPic/image-20201226170026026.png" alt="image-20201226170026026" style="zoom:50%;" /><p>如何优雅地在<a href="https://github.com/tangspoon66/NeteaseCloud-Clock">智能闹钟</a>上设定闹钟呢？使用命令行谈和优雅。想着能不能做个内网简单网页，通过web界面控制（增加与删除）<code>crontab</code>呢？了解到python相关的前端框架<code>flask</code>似乎有点意思，先学习看看。</p><a id="more"></a><blockquote><p>书名：<a href="https://read.helloflask.com">Flask 入门教程</a></p><p>作者：<a href="http://greyli.com/">李辉</a></p></blockquote><h2 id="一-虚拟环境的使用"><a class="markdownIt-Anchor" href="#一-虚拟环境的使用"></a> 一、虚拟环境的使用</h2><h3 id="1-创建虚拟环境"><a class="markdownIt-Anchor" href="#1-创建虚拟环境"></a> 1. 创建虚拟环境</h3><ul><li>保持全局环境的干净</li><li>指定不同的依赖版本</li><li>方便记录和管理依赖</li></ul><p>macOS创建虚拟环境方法：到你想要的文件夹，然后打开<code>terminal</code>，输入以下代码。然后在该文件夹会新生成一个<code>env</code>的文件夹。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m venv env</span><br></pre></td></tr></table></figure><blockquote><p><code>venv</code>是python中内置的模块，使用该模块来创建虚拟环境；<code>env</code>是虚拟环境的名字</p></blockquote><h3 id="2-激活虚拟环境"><a class="markdownIt-Anchor" href="#2-激活虚拟环境"></a> 2. 激活虚拟环境</h3><p>网上大部分激活教程都是直接给出<code>. env/bin/activate</code>。但对新手来说似乎有点摸不着头脑：前面的<code>.</code>是啥？</p><p>我们不妨直接打开activate文件试试。原来里面有说明具体用法！我们必须通过<code>source bin/activate</code>的方式激活，不能直接运行<code>activate</code>文件。</p><p><img src="https://picbed.tangspoon.cn/uPic/image-20201225174954727.png" alt="image-20201225174954727" /></p><p>而且，我们要激活<code>env</code>，当然先要进入到<code>env</code>环境当中，所以可得激活方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd env &amp;&amp; source bin&#x2F;activate</span><br></pre></td></tr></table></figure><p>激活成功后，会变成下面这样：</p><p><img src="https://picbed.tangspoon.cn/uPic/image-20201225175417095.png" alt="image-20201225175417095" /></p><h3 id="3-退出虚拟环境"><a class="markdownIt-Anchor" href="#3-退出虚拟环境"></a> 3. 退出虚拟环境</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">deactivate</span><br></pre></td></tr></table></figure><h2 id="二-安装flask"><a class="markdownIt-Anchor" href="#二-安装flask"></a> 二、安装flask</h2><p><strong>以下所有操作均在虚拟环境中进行</strong></p><p><strong>激活虚拟环境后</strong>，执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install falsk</span><br></pre></td></tr></table></figure><h2 id="三-搭建最简单的flask项目"><a class="markdownIt-Anchor" href="#三-搭建最简单的flask项目"></a> 三、搭建最简单的flask项目</h2><p>因为是最简单的项目，所以我们都在<code>terminal</code>内进行吧。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 在env内新建一个app文件夹，同时新建app.py</span><br><span class="line">mkdir app &amp;&amp; touch app.py</span><br><span class="line"># 编辑app.py</span><br><span class="line">vim app.py</span><br></pre></td></tr></table></figure><p>然后粘贴以下内容后，退出并保存。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> flask </span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(&#x27;/&#x27;)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span>():</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">&#x27;你好！&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ ==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>,port=<span class="number">8443</span>)</span><br></pre></td></tr></table></figure><h2 id="四-运行"><a class="markdownIt-Anchor" href="#四-运行"></a> 四、运行</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python app.py</span><br></pre></td></tr></table></figure><p><img src="https://picbed.tangspoon.cn/uPic/image-20211227171644922.png" alt="image-20211227171644922" /></p><p>然后在浏览器访问：`http://localhost:8443</p>]]></content>
    
    
    <summary type="html">&lt;img src=&quot;https://picbed.tangspoon.cn/uPic/image-20201226170026026.png&quot; alt=&quot;image-20201226170026026&quot; style=&quot;zoom:50%;&quot; /&gt;
&lt;p&gt;如何优雅地在&lt;a href=&quot;https://github.com/tangspoon66/NeteaseCloud-Clock&quot;&gt;智能闹钟&lt;/a&gt;上设定闹钟呢？使用命令行谈和优雅。想着能不能做个内网简单网页，通过web界面控制（增加与删除）&lt;code&gt;crontab&lt;/code&gt;呢？了解到python相关的前端框架&lt;code&gt;flask&lt;/code&gt;似乎有点意思，先学习看看。&lt;/p&gt;</summary>
    
    
    
    <category term="Flask" scheme="https://blog.tangspoon.cn/categories/Flask/"/>
    
    
    <category term="Flask" scheme="https://blog.tangspoon.cn/tags/Flask/"/>
    
  </entry>
  
  <entry>
    <title>智能闹钟（四）| 整合搭建</title>
    <link href="https://blog.tangspoon.cn/2020/12/24/%E6%99%BA%E8%83%BD%E9%97%B9%E9%92%9F%EF%BC%88%E5%9B%9B%EF%BC%89-%E6%95%B4%E5%90%88%E6%90%AD%E5%BB%BA/"/>
    <id>https://blog.tangspoon.cn/2020/12/24/%E6%99%BA%E8%83%BD%E9%97%B9%E9%92%9F%EF%BC%88%E5%9B%9B%EF%BC%89-%E6%95%B4%E5%90%88%E6%90%AD%E5%BB%BA/</id>
    <published>2020-12-24T02:37:40.000Z</published>
    <updated>2020-12-31T10:02:06.259Z</updated>
    
    <content type="html"><![CDATA[<p>这是一个可以播放「网易云每日推荐歌曲」的闹钟，还可以给女朋友播报天气🌞☁️☔️</p><img src="https://picbed.tangspoon.cn/uPic/WechatIMG1204.jpeg" alt="WechatIMG1204" style="zoom:50%;" /><a id="more"></a><hr /><p>Linux部署项目肯定会有大大小小的问题出现，不会与我下面提供的步骤完全一致。遇到问题多网络搜索，大部分问题都会有解决方案。搜索结果没有的，就耐下心来多看原始文档，多尝试，多尝试，多尝试！</p><h2 id="一-目录结构"><a class="markdownIt-Anchor" href="#一-目录结构"></a> 一、目录结构</h2><img src="https://picbed.tangspoon.cn/uPic/image-20201223184351927.png" alt="image-20201223184351927" style="zoom: 50%;" /><h2 id="二-材料准备"><a class="markdownIt-Anchor" href="#二-材料准备"></a> 二、材料准备</h2><ol><li>树莓派 / 其他可以运行python脚本的开发板</li><li>音响：pdd 8.8包邮</li></ol><h2 id="三-环境准备"><a class="markdownIt-Anchor" href="#三-环境准备"></a> 三、环境准备</h2><h3 id="1-系统版本"><a class="markdownIt-Anchor" href="#1-系统版本"></a> 1. 系统版本</h3><p>树莓派我用的是Linux raspberrypi 5.4.79-v7+ ，其他版本大同小异。</p><h3 id="2-mplayer"><a class="markdownIt-Anchor" href="#2-mplayer"></a> 2. mplayer</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install mplayer</span><br></pre></td></tr></table></figure><h3 id="3-baidu-api"><a class="markdownIt-Anchor" href="#3-baidu-api"></a> 3. baidu-api</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install baidu-aip</span><br></pre></td></tr></table></figure><h2 id="四-账号准备"><a class="markdownIt-Anchor" href="#四-账号准备"></a> 四、账号准备</h2><ol><li><a href="https://ai.baidu.com/tech/speech/tts">百度TTS</a>：获取<code>APP_ID</code>， <code>API_KEY</code>， <code>SECRET_KEY</code></li><li><a href="https://www.qweather.com/">和风天气</a>：获取城市<code>id</code>，<code>key</code></li></ol><h2 id="五-开始搭建"><a class="markdownIt-Anchor" href="#五-开始搭建"></a> 五、开始搭建</h2><h3 id="1-下载脚本"><a class="markdownIt-Anchor" href="#1-下载脚本"></a> 1. 下载脚本</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo -i</span><br><span class="line">mkdir &#x2F;home&#x2F;clock &amp;&amp; cd &#x2F;home&#x2F;clock</span><br><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;tangspoon66&#x2F;NeteaseCloud-Clock.git</span><br></pre></td></tr></table></figure><h3 id="2-修改参数"><a class="markdownIt-Anchor" href="#2-修改参数"></a> 2. 修改参数</h3><p>脚本内有详细的参数说明，下面只列出需要需要修改的参数，如何修改请参考注释。</p><h4 id="neteasepy"><a class="markdownIt-Anchor" href="#neteasepy"></a> <a href="http://Netease.py">Netease.py</a></h4><ul><li>url</li><li>phone</li><li>pwd</li></ul><h4 id="getweatherpy"><a class="markdownIt-Anchor" href="#getweatherpy"></a> <a href="http://getWeather.py">getWeather.py</a></h4><ul><li>location</li><li>key</li></ul><h4 id="texttovoicepy"><a class="markdownIt-Anchor" href="#texttovoicepy"></a> <a href="http://TextToVoice.py">TextToVoice.py</a></h4><ul><li>APP_ID</li><li>APP_KEY</li><li>SECRET_KEY</li><li>text_normal、text_lowtemp、text_rain</li></ul><h3 id="3-定时执行"><a class="markdownIt-Anchor" href="#3-定时执行"></a> 3. 定时执行</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crontab -e</span><br></pre></td></tr></table></figure><p>定时每天<code>7:00</code>的闹钟：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 一定要填写绝对路径！</span><br><span class="line">00 7 * * * python &#x2F;home&#x2F;clock&#x2F;Netease.py &amp;&gt;&gt; &#x2F;home&#x2F;clock&#x2F;log.log</span><br><span class="line">00 7 * * * python &#x2F;home&#x2F;clock&#x2F;VolControl.py</span><br></pre></td></tr></table></figure><h2 id="六-相关文章"><a class="markdownIt-Anchor" href="#六-相关文章"></a> 六、相关文章</h2><ol><li><p><a href="https://blog.tangspoon.cn/2020/12/19/%E6%99%BA%E8%83%BD%E9%97%B9%E9%92%9F%EF%BC%88%E4%B8%80%EF%BC%89%EF%BD%9CmacOS%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8%E6%A0%91%E8%8E%93%E6%B4%BE3B/#more">智能闹钟（一）｜macOS 入门使用树莓派 3B+</a></p></li><li><p><a href="http://localhost:4000/2020/12/21/%E6%99%BA%E8%83%BD%E9%97%B9%E9%92%9F%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BD%9C%E4%BD%BF%E7%94%A8%E3%80%8C%E5%92%8C%E9%A3%8E%E5%A4%A9%E6%B0%94%E3%80%81%E7%99%BE%E5%BA%A6%E8%AF%AD%E9%9F%B3%E5%90%88%E6%88%90%E3%80%8DAPI%E8%BF%9B%E8%A1%8C%E5%A4%A9%E6%B0%94%E7%9A%84%E6%92%AD%E6%8A%A5/#more">智能闹钟（二）｜使用「和风天气、百度语音合成」API进行天气的播报</a></p></li><li><p><a href="https://blog.tangspoon.cn/2020/12/22/%E6%99%BA%E8%83%BD%E9%97%B9%E9%92%9F%EF%BC%88%E4%B8%89%EF%BC%89%7C%20%E4%BD%BF%E7%94%A8%E3%80%8C%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90NodeJS%E7%89%88API%E6%8E%A5%E5%8F%A3%E3%80%8D%E8%8E%B7%E5%8F%96%E6%AF%8F%E6%97%A5%E6%8E%A8%E8%8D%90%E6%AD%8C%E6%9B%B2/#more">智能闹钟（三）| 使用「网易云音乐 NodeJS 版 API 接口」播放每日推荐歌曲</a></p></li><li><p><a href="https://blog.tangspoon.cn/2020/12/31/%E6%99%BA%E8%83%BD%E9%97%B9%E9%92%9F%EF%BC%88%E4%BA%94%EF%BC%89%EF%BD%9C%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E5%9C%B0%E5%85%B3%E9%97%AD%E9%97%B9%E9%92%9F%EF%BC%9F/#more">智能闹钟（五）｜如何优雅地关闭闹钟？</a></p></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;这是一个可以播放「网易云每日推荐歌曲」的闹钟，还可以给女朋友播报天气🌞☁️☔️&lt;/p&gt;
&lt;img src=&quot;https://picbed.tangspoon.cn/uPic/WechatIMG1204.jpeg&quot; alt=&quot;WechatIMG1204&quot; style=&quot;zoom:50%;&quot; /&gt;</summary>
    
    
    
    <category term="树莓派" scheme="https://blog.tangspoon.cn/categories/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
    
    <category term="树莓派" scheme="https://blog.tangspoon.cn/tags/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
    <category term="Python" scheme="https://blog.tangspoon.cn/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>智能闹钟（三）| 使用「网易云音乐NodeJS版API接口」播放每日推荐歌曲</title>
    <link href="https://blog.tangspoon.cn/2020/12/22/%E6%99%BA%E8%83%BD%E9%97%B9%E9%92%9F%EF%BC%88%E4%B8%89%EF%BC%89|%20%E4%BD%BF%E7%94%A8%E3%80%8C%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90NodeJS%E7%89%88API%E6%8E%A5%E5%8F%A3%E3%80%8D%E8%8E%B7%E5%8F%96%E6%AF%8F%E6%97%A5%E6%8E%A8%E8%8D%90%E6%AD%8C%E6%9B%B2/"/>
    <id>https://blog.tangspoon.cn/2020/12/22/%E6%99%BA%E8%83%BD%E9%97%B9%E9%92%9F%EF%BC%88%E4%B8%89%EF%BC%89|%20%E4%BD%BF%E7%94%A8%E3%80%8C%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90NodeJS%E7%89%88API%E6%8E%A5%E5%8F%A3%E3%80%8D%E8%8E%B7%E5%8F%96%E6%AF%8F%E6%97%A5%E6%8E%A8%E8%8D%90%E6%AD%8C%E6%9B%B2/</id>
    <published>2020-12-22T07:15:59.000Z</published>
    <updated>2020-12-31T10:04:49.722Z</updated>
    
    <content type="html"><![CDATA[<img src="https://picbed.tangspoon.cn/uPic/image-20201222151927493.png" alt="image-20201222151927493" style="zoom:50%;" /><a id="more"></a><hr /><h2 id="准备"><a class="markdownIt-Anchor" href="#准备"></a> 准备</h2><ol><li><p>使用前请仔细查看里面的<a href="https://binaryify.github.io/NeteaseCloudMusicApi/#/?id=%e8%b0%83%e7%94%a8%e5%89%8d%e9%a1%bb%e7%9f%a5">调用前须知</a></p></li><li><p>进行简单的需求分析：</p></li></ol><img src="https://picbed.tangspoon.cn/uPic/image-20201222153644738.png" alt="image-20201222153644738" style="zoom:45%;" /><br/><h2 id="一-搭建api"><a class="markdownIt-Anchor" href="#一-搭建api"></a> 一、搭建API</h2><p>我个人选择了把接口搭建在<strong>VPS</strong>中，7x24x365在线，等调试好语音识别模块后再部署到树莓派上。但如果你的是是国外的服务器，请仔细阅读一下文档内的「<a href="https://binaryify.github.io/NeteaseCloudMusicApi/#/?id=%e8%b0%83%e7%94%a8%e5%89%8d%e9%a1%bb%e7%9f%a5">调用前须知</a>」，里面有提示相关的注意事项。当然，如果仅仅学习API的调用的话，我们可以搭建在本机电脑中。</p><blockquote><p>注意⚠️：<strong>以下所有步骤均默认在管理员（root）用户下进行</strong></p></blockquote><br/><h3 id="1-安装"><a class="markdownIt-Anchor" href="#1-安装"></a> 1. 安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;Binaryify&#x2F;NeteaseCloudMusicApi.git</span><br><span class="line"># 进入到项目文件内</span><br><span class="line">cd xxx&#x2F;xxx&#x2F;NeteaseCloudMusicApi  </span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><br/><h3 id="2-运行"><a class="markdownIt-Anchor" href="#2-运行"></a> 2. 运行</h3><h4 id="1在vps运行"><a class="markdownIt-Anchor" href="#1在vps运行"></a> （1）在「VPS」运行</h4><p>要想API 7x24x365 在线，让项目保持后台运行就可以。我这里运用了比较简单的方法：<code>screen</code>命令。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cd NeteaseCloudMusicApi</span><br><span class="line"># 新建一个名为NeteaseCloud的screen</span><br><span class="line">screen -S NeteaseCloud</span><br><span class="line"># 在新生成的窗口中运行API</span><br><span class="line">node app.js</span><br><span class="line"># 然后就可以放心把窗口关掉了</span><br></pre></td></tr></table></figure><br/><p><strong>在开放<code>3000</code>端口后</strong>，我们尝试访问<code>http://VPS的ip:3000</code>。如无意外，我们会看到：</p><img src="https://picbed.tangspoon.cn/uPic/image-20201222160756839.png" alt="image-20201222160756839" style="zoom:33%;" /><p><br/>那么我们如何恢复<code>screen</code>呢？</p><blockquote><p>注意⚠️：恢复<code>screen</code>一定要在新建<code>screen</code>的用户下进行。我上面是进入到了<code>root</code>中</p></blockquote><br/><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo -i</span><br><span class="line"># 查看所有screen</span><br><span class="line">screen -ls </span><br><span class="line"># 找到我们的NeteaseCloud</span><br><span class="line">screen -r screen的id</span><br></pre></td></tr></table></figure><img src="https://picbed.tangspoon.cn/uPic/image-20201222161602742.png" alt="image-20201222161602742" style="zoom: 50%;" /><p>想要关闭<code>screen</code>，我们可以看到上图有提示：<code>1 Socket in /var/run/screen/S-root</code>，我们进入到这个文件夹删除相应的文件，就可以关闭<code>screen</code>了。</p><br/><h4 id="2在本地电脑运行"><a class="markdownIt-Anchor" href="#2在本地电脑运行"></a> （2）在「本地电脑」运行</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 想要运行项目，仍然要进入项目文件夹中</span><br><span class="line">cd NeteaseCloudMusicApi</span><br><span class="line">node app.js</span><br></pre></td></tr></table></figure><br/><h4 id="3修改端口运行"><a class="markdownIt-Anchor" href="#3修改端口运行"></a> （3）「修改端口」运行</h4><p>服务器启动默认端口为 3000，若想使用其他端口，请先将你的端口放行，然后使用以下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Mac&#x2F;Linux</span><br><span class="line">PORT&#x3D;4000 node app.js</span><br><span class="line"># windows</span><br><span class="line">set PORT&#x3D;4000 &amp;&amp; node app.js</span><br></pre></td></tr></table></figure><hr /><h2 id="二-登陆"><a class="markdownIt-Anchor" href="#二-登陆"></a> 二、登陆</h2><blockquote><p>文档里面提供了手机、邮箱两种登陆方式，但<strong>使用邮箱登陆会返回<code>402</code>错误码</strong>，我们直接使用手机登陆。</p></blockquote><p>接口地址 : <code>/login/cellphone</code></p><p>调用例子 : <code>/login/cellphone?phone=xxx&amp;password=yyy</code></p><p>要注意：下面的大部分接口都要登陆成功后才能使用，而登陆接口<code>response</code>信息中会有带有<code>cookie</code>，所以我们要使用<code>session()</code>来保持登陆状态。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;http://localhost:3000&#x27;</span></span><br><span class="line">phone = <span class="string">&#x27;xxxx&#x27;</span></span><br><span class="line">pwd = <span class="string">&#x27;xxxx&#x27;</span></span><br><span class="line"></span><br><span class="line">s = requests.session()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 登陆</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span>():</span></span><br><span class="line">    login_url = url + <span class="string">&#x27;/login/cellphone&#x27;</span></span><br><span class="line">    login = s.get(login_url, data=&#123;<span class="string">&#x27;phone&#x27;</span>: phone, </span><br><span class="line">                                   <span class="string">&#x27;password&#x27;</span>: pwd&#125;)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> login.status_code <span class="keyword">is</span> <span class="number">200</span>:</span><br><span class="line">            print(<span class="string">&#x27;恭喜！登陆成功！&#x27;</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(<span class="string">&#x27;Exception&#x27;</span>,e)</span><br></pre></td></tr></table></figure><hr /><h2 id="三-获取所有每日推荐歌曲信息"><a class="markdownIt-Anchor" href="#三-获取所有每日推荐歌曲信息"></a> 三、获取所有每日推荐歌曲信息</h2><p><strong>使用该接口需要完成「登陆」后才能使用。</strong></p><p>接口地址 : <code>/recommend/songs</code></p><p>调用例子 : <code>/recommend/songs</code></p><p>我们尝试使用<code>postman</code>请求接口，<code>response</code>信息如下：</p><img src="https://picbed.tangspoon.cn/uPic/image-20201222180112139.png" alt="image-20201222180112139" style="zoom: 33%;" /><br/><p>仔细看会发现会发现，<code>response</code>中是没有歌曲播放<code>url</code>的！那怎么播放歌曲呢？</p><p>别急，我们仔细思考一下，唯一能识别出一首歌的标志只有<code>id</code>，那会不会有其他接口可以通过<code>id</code>获得可流媒体播放的<code>url</code>呢？</p><p>翻遍了文档终于找到<a href="https://binaryify.github.io/NeteaseCloudMusicApi/#/?id=%e8%8e%b7%e5%8f%96%e9%9f%b3%e4%b9%90-url">相关信息</a>。（我觉得作者应该把该接口放在更前面的位置）</p><img src="https://picbed.tangspoon.cn/uPic/image-20201222180707359.png" alt="image-20201222180707359" style="zoom: 33%;" /><br/><p>我们使用postman请求，观察<code>response</code>数据结构。然后开始编码通过<code>id</code>获取播放<code>url</code>，代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取每日推荐歌曲id</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getSongs_id</span>():</span></span><br><span class="line">    <span class="comment"># 获取每日推荐歌曲字典</span></span><br><span class="line">    dailySongs_url = url + <span class="string">&#x27;/recommend/songs&#x27;</span></span><br><span class="line">    dailySongs_object = s.get(dailySongs_url)</span><br><span class="line">    songs_dict = dailySongs_object.json()  </span><br><span class="line">    <span class="comment"># 0~31首</span></span><br><span class="line">    <span class="keyword">for</span> list_index <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">32</span>):</span><br><span class="line">        song_id.append(songs_dict[<span class="string">&#x27;data&#x27;</span>][<span class="string">&#x27;dailySongs&#x27;</span>][list_index][<span class="string">&#x27;id&#x27;</span>])</span><br><span class="line">    <span class="keyword">return</span> song_id</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取播放url</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getSongs_url</span>():</span></span><br><span class="line">    getSongs_url = url + <span class="string">&#x27;/song/url&#x27;</span></span><br><span class="line">    <span class="comment"># 传入song_id[]作为data</span></span><br><span class="line">    song_id = getSongs_id()</span><br><span class="line">    song_url_object = s.post(getSongs_url, data=&#123;<span class="string">&#x27;id&#x27;</span>:song_id&#125;)</span><br><span class="line">    song_url_dict = song_url_object.json()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">32</span>):</span><br><span class="line">        songs_url.append(song_url_dict[<span class="string">&#x27;data&#x27;</span>][i][<span class="string">&#x27;url&#x27;</span>])</span><br><span class="line">    <span class="keyword">return</span> songs_url</span><br></pre></td></tr></table></figure><hr /><h2 id="四-播放音乐"><a class="markdownIt-Anchor" href="#四-播放音乐"></a> 四、播放音乐</h2><p>参考了网络资料，在Linux中播放音乐有几种选择，用得比较多的是<code>pygame</code>和<code>mplayer</code>。但不知什么原因我树莓派一直装不了<code>pygame</code>，所以最终选择了<code>mplayer</code>作为我的播放器。</p><h3 id="1-安装mplayer"><a class="markdownIt-Anchor" href="#1-安装mplayer"></a> 1. 安装mplayer</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install mplayer</span><br></pre></td></tr></table></figure><h3 id="2-调整树莓派声音输出"><a class="markdownIt-Anchor" href="#2-调整树莓派声音输出"></a> 2. 调整树莓派声音输出</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 进入系统设置</span><br><span class="line">sudo raspi-config</span><br></pre></td></tr></table></figure><p>依次进入：<code>System Options</code> - <code>Audio</code> - <code>Headphones</code>，最后一定要选择<code>&lt;Finish&gt;</code></p><img src="https://picbed.tangspoon.cn/uPic/image-20201219181840492.png" alt="image-20201219181840492" style="zoom:50%;" /><h3 id="3-重启"><a class="markdownIt-Anchor" href="#3-重启"></a> 3. 重启！！！</h3><p>设置完声卡之后，一定要重启系统！不然不会生效。在这里卡了挺久的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reboot</span><br></pre></td></tr></table></figure><h3 id="4-基本使用方式"><a class="markdownIt-Anchor" href="#4-基本使用方式"></a> 4. 基本使用方式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mplayer file&#x2F;url</span><br></pre></td></tr></table></figure><p>但要如何在python脚本中调用<code>mplayer</code>呢？使用<code>os.system('cmd' %s)</code>或<code>Subprocess.Popen('cmd')</code>，具体区别可以参考<a href="https://blog.csdn.net/taohuaxinmu123/article/details/48828255">这篇文章</a>，一句话说完就是：前者比较老旧，但会显示<code>cmd</code>命令执行的信息；后者强大，支持多种参数和模式，但没有输出信息。</p><p>在整个项目中我们两个模块都会用到，在播放音乐部分我们使用前者，后面「渐入渐出部分」我们再使用后者。</p><br/><p>先尝试播放日推第一首歌。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">os.system(<span class="string">&#x27;mplayer &quot;%s&quot; &gt; /dev/null 2&gt;&amp;1&#x27;</span> % songs_url[<span class="number">0</span>])</span><br></pre></td></tr></table></figure><blockquote><p>从左到右解析一下代码：单引号<code>''</code>里的内容就是<code>os.system('cmd')</code>中的<code>cmd</code>，<code>&quot;%s&quot;</code>是<code>str</code>类型的参数，输出<code>&gt;</code>（重定向）到<code>/dev/null 2&gt;&amp;1</code>文件，该文件会像黑洞一样吞噬所有的输入，同时也不会获得任何输出，单引号<code>''</code>部分的代码意思是mplayer播放%s的url，且不输出信息。更详细的意思请看<a href="https://blog.csdn.net/ithomer/article/details/9288353">这里</a>。后面的<code>%</code> 和 <code>song_url[0]</code>中间是有个空格的，这个就是传到<code>&quot;%s&quot;</code>的参数。</p></blockquote><br/><p>要播放32首歌曲，可以写个<code>for</code>循环，重复执行mplayer的播放操作即可。</p><p>这部分代码整合到了下方的「优化播放流程」当中。</p><br/><p><strong>至此，文章一开头的需求分析全部模块已经基本完成，但仍有优化空间</strong></p><hr /><h2 id="五-项目优化整合"><a class="markdownIt-Anchor" href="#五-项目优化整合"></a> 五、项目优化整合</h2><p><strong>我们做项目应该更贴近生活考虑，带给用户更好的体验</strong>，所以还得在细节中下点功夫。</p><h3 id="1-优化播放流程"><a class="markdownIt-Anchor" href="#1-优化播放流程"></a> 1. 优化播放流程</h3><p>早上醒来<strong>意识是不清醒</strong>的，第一时间播放「天气」肯定听不清楚，而且完全没让人有个好心情啊！所以「天气播报」应该往后捎捎。由此大概确定项目的完整播放流程为：先播放一到两首歌，然后「天气播报」，然后再播放剩下的歌曲。</p><p>同时，我们大概率会在第一次播放时听不清楚具体温度，所以我们应该做两次天气的播报。</p><blockquote><p>注意⚠️：下方代码<code>line</code> <code>12</code>播放天气文件的py脚本，要填写绝对路径！绝对路径！不然无法播放天气！</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 播放模块</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">playmusic</span>():</span></span><br><span class="line">    <span class="comment"># getSongs_url()函数在上面以实现</span></span><br><span class="line">    songs_url = getSongs_url()</span><br><span class="line">    print(<span class="string">&#x27;开始播放音乐&#x27;</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        print(<span class="string">&#x27;第一首歌&#x27;</span>)</span><br><span class="line">        <span class="comment"># 先播放第一首</span></span><br><span class="line">        os.system(<span class="string">&#x27;mplayer &quot;%s&quot; &gt; /dev/null 2&gt;&amp;1&#x27;</span> % songs_url[<span class="number">0</span>])</span><br><span class="line">        <span class="comment"># 播放两次天气</span></span><br><span class="line">        print(<span class="string">&#x27;播放天气&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">2</span>)</span><br><span class="line">        os.system(<span class="string">&#x27;python /tmp/clock/TextToVoice.py&#x27;</span>)</span><br><span class="line">        <span class="comment"># 开始随机播放2～32首</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">32</span>):</span><br><span class="line">            <span class="comment"># print(&#x27;播放第&#x27; + str(i) + &#x27;首&#x27;)</span></span><br><span class="line">            os.system(<span class="string">&#x27;mplayer &quot;%s&quot; &gt; /dev/null 2&gt;&amp;1&#x27;</span> % songs_url[i])</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(<span class="string">&#x27;Exception&#x27;</span>, e)</span><br></pre></td></tr></table></figure><br/><h3 id="2-渐入播放"><a class="markdownIt-Anchor" href="#2-渐入播放"></a> 2. 渐入播放</h3><p>如果播放的音乐一开始非常大声，我们很容易受惊。</p><p>所以在播放第一首歌时，渐入。我们可以有两种设计方式，第一种是通过mplayer的<code>slave</code>模式修改，另一种通过<code>amixer</code>修改Linux系统的声音。这里我选择后者，相对来说会更简单。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># amxier调音量基本使用</span></span><br><span class="line">amixer sset 声卡名字(str类型) volume音量(volume%)</span><br><span class="line"><span class="comment"># 例如：amixer sset Headphone 20%</span></span><br></pre></td></tr></table></figure><br/><p>思路：使用一个<code>for</code>循环，先从一个低音量开始，在<code>range()</code>里面每次递增%<code>1</code>，在每一次循环（递增）中，都会有0.3秒的延迟，这样就实现了较为顺滑的渐入操作。</p><p>在python里面控制<code>amixer</code>模块，这次我们尝试使用<code>subprocess.Popen(cmd)</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">slowUp</span>():</span></span><br><span class="line">    <span class="comment"># %0 and %100</span></span><br><span class="line">    volume = <span class="number">65</span></span><br><span class="line">    <span class="comment"># 每次增加%1，一直从 %65 ～ %90</span></span><br><span class="line">    <span class="keyword">for</span> volume <span class="keyword">in</span> range(<span class="number">65</span>, <span class="number">100</span>, <span class="number">1</span>):</span><br><span class="line">        <span class="comment"># 延迟 0.3 秒递增</span></span><br><span class="line">        time.sleep(<span class="number">0.3</span>)</span><br><span class="line">        command = [<span class="string">&quot;amixer&quot;</span>, <span class="string">&quot;sset&quot;</span>, <span class="string">&quot;Headphone&quot;</span>, <span class="string">&quot;&#123;&#125;%&quot;</span>.format(volume)]</span><br><span class="line">        subprocess.Popen(command)</span><br></pre></td></tr></table></figure><br/><p><strong>但有个很重要的问题</strong>：我们要怎么使用这个渐入函数呢？直接嵌入到播放第一首歌前面吗？肯定不对的，因为程序会先执行完<code>slowUp()</code>函数完成了音量的递增之后，再开始播放音乐。这样是毫无意义的。</p><p><strong>有两个解决办法。</strong></p><p>第一个是多线程，但对多线程不太熟悉，用不好可能很容易崩，以后详细学习后，再进行代码重构。</p><p>第二种就比较机灵点：设置<strong>两个时间一样</strong>的<code>crontab</code>任务，一个执行播放音乐的py脚本，另一个执行渐入渐入的脚本。也就是把多线程这件事交给了<code>crontab</code>！</p><p><strong>夸夸自己，真是太机智了！</strong></p><hr /><h2 id="六-设置crontab定时执行脚本"><a class="markdownIt-Anchor" href="#六-设置crontab定时执行脚本"></a> 六、设置crontab定时执行脚本</h2><p>说好的是闹钟嘛，我们不能忘记自己最根本的需求。我们把这件事交给<code>crontab</code>就可以。</p><h3 id="1-更改树莓派时间"><a class="markdownIt-Anchor" href="#1-更改树莓派时间"></a> 1. 更改树莓派时间</h3><p>一般树莓派刷机完后，时间都不会是中国时区的时间，所以我们要先更改到中国上海的。如何更改时区请查看：<a href="https://blog.tangspoon.cn/2020/12/19/%E6%99%BA%E8%83%BD%E9%97%B9%E9%92%9F%EF%BC%88%E4%B8%80%EF%BC%89%EF%BD%9CmacOS%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8%E6%A0%91%E8%8E%93%E6%B4%BE3B/#more">智能闹钟（一）｜macOS 入门使用树莓派 3B+</a></p><h3 id="2-设置crontab任务"><a class="markdownIt-Anchor" href="#2-设置crontab任务"></a> 2. 设置crontab任务</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crontab -e</span><br></pre></td></tr></table></figure><blockquote><p><code>&amp;&gt;&gt; /home/clock/log.log</code>表示脚本输出内容到log.log中</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 分 小时 星期 月 年 command</span></span><br><span class="line"><span class="comment"># 执行主脚本Netease.py播放天气，注意要使用绝对路径！</span></span><br><span class="line"><span class="number">00</span> <span class="number">7</span> * * * python /home/clock/Netease.py &amp;&gt;&gt; /home/clock/log.log</span><br><span class="line"><span class="comment"># 执行VolControl.py渐入，注意要使用绝对路径！</span></span><br><span class="line"><span class="number">00</span> <span class="number">7</span> * * * python /home/clock/VolControl.py</span><br></pre></td></tr></table></figure><hr /><h2 id="六-end总结"><a class="markdownIt-Anchor" href="#六-end总结"></a> 六、END&amp;总结</h2><p>这篇文章介绍了如何使用「网易云音乐NodeJS版API接口」播放每日推荐歌曲，看起来顺风顺水，实际上遇到的坑真的数不过来。但我们一定要「<strong>善于思考，善于记录</strong>」，坚持每天输出一些内容，到最后就掌握越来越多技能。</p><p>下一篇文章，详细讲一下部署项目的部署问题。源代码也将整合。</p><br/><br/><h5 id="相关文章"><a class="markdownIt-Anchor" href="#相关文章"></a> 相关文章</h5><ol><li><a href="https://blog.tangspoon.cn/2020/12/19/%E6%99%BA%E8%83%BD%E9%97%B9%E9%92%9F%EF%BC%88%E4%B8%80%EF%BC%89%EF%BD%9CmacOS%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8%E6%A0%91%E8%8E%93%E6%B4%BE3B/#more">智能闹钟（一）｜macOS 入门使用树莓派 3B+</a></li><li><a href="http://localhost:4000/2020/12/21/%E6%99%BA%E8%83%BD%E9%97%B9%E9%92%9F%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BD%9C%E4%BD%BF%E7%94%A8%E3%80%8C%E5%92%8C%E9%A3%8E%E5%A4%A9%E6%B0%94%E3%80%81%E7%99%BE%E5%BA%A6%E8%AF%AD%E9%9F%B3%E5%90%88%E6%88%90%E3%80%8DAPI%E8%BF%9B%E8%A1%8C%E5%A4%A9%E6%B0%94%E7%9A%84%E6%92%AD%E6%8A%A5/#more">智能闹钟（二）｜使用「和风天气、百度语音合成」API进行天气的播报</a></li><li><a href="https://blog.tangspoon.cn/2020/12/24/%E6%99%BA%E8%83%BD%E9%97%B9%E9%92%9F%EF%BC%88%E5%9B%9B%EF%BC%89-%E6%95%B4%E5%90%88%E6%90%AD%E5%BB%BA/#more">智能闹钟（四）-整合搭建</a></li><li><a href="https://blog.tangspoon.cn/2020/12/31/%E6%99%BA%E8%83%BD%E9%97%B9%E9%92%9F%EF%BC%88%E4%BA%94%EF%BC%89%EF%BD%9C%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E5%9C%B0%E5%85%B3%E9%97%AD%E9%97%B9%E9%92%9F%EF%BC%9F/#more">智能闹钟（五）｜如何优雅地关闭闹钟？</a></li></ol>]]></content>
    
    
    <summary type="html">&lt;img src=&quot;https://picbed.tangspoon.cn/uPic/image-20201222151927493.png&quot; alt=&quot;image-20201222151927493&quot; style=&quot;zoom:50%;&quot; /&gt;</summary>
    
    
    
    <category term="树莓派" scheme="https://blog.tangspoon.cn/categories/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
    
    <category term="树莓派" scheme="https://blog.tangspoon.cn/tags/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
    <category term="Python" scheme="https://blog.tangspoon.cn/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>树莓派开启crontab日志</title>
    <link href="https://blog.tangspoon.cn/2020/12/22/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%BC%80%E5%90%AFcrontab%E6%97%A5%E5%BF%97/"/>
    <id>https://blog.tangspoon.cn/2020/12/22/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%BC%80%E5%90%AFcrontab%E6%97%A5%E5%BF%97/</id>
    <published>2020-12-22T04:04:38.000Z</published>
    <updated>2020-12-24T03:12:38.438Z</updated>
    
    <content type="html"><![CDATA[<img src="https://picbed.tangspoon.cn/uPic/image-20201223205438951.png" alt="image-20201223205438951" style="zoom:40%;" /><a id="more"></a><p>今天的树莓派闹钟情况有点问题，想查看一下crontab任务完成情况，结果找了半天找不到log。原来是树莓派系统默认禁止了生成日志文件。解决办法也很简单。</p><br/><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim &#x2F;etc&#x2F;rsyslog.conf</span><br></pre></td></tr></table></figure><p>在文件中找到：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#cron.*                     &#x2F;var&#x2F;log&#x2F;cron.log</span><br></pre></td></tr></table></figure><p>把<code>#</code>去掉，然后’esc’，输入<code>:wq</code></p><p>输入一下代码重新启动日志服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service rsyslog restart</span><br></pre></td></tr></table></figure><p>执行一个crontab任务，再到<code>/var/log/cron.log</code>就可以查看到执行情况</p><hr /><p>参考资料：</p><p><a href="https://my.oschina.net/u/4341499/blog/4280350">https://my.oschina.net/u/4341499/blog/4280350</a></p>]]></content>
    
    
    <summary type="html">&lt;img src=&quot;https://picbed.tangspoon.cn/uPic/image-20201223205438951.png&quot; alt=&quot;image-20201223205438951&quot; style=&quot;zoom:40%;&quot; /&gt;</summary>
    
    
    
    <category term="树莓派" scheme="https://blog.tangspoon.cn/categories/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
    
  </entry>
  
  <entry>
    <title>格式化时间</title>
    <link href="https://blog.tangspoon.cn/2020/12/21/%E6%A0%BC%E5%BC%8F%E5%8C%96%E6%97%B6%E9%97%B4/"/>
    <id>https://blog.tangspoon.cn/2020/12/21/%E6%A0%BC%E5%BC%8F%E5%8C%96%E6%97%B6%E9%97%B4/</id>
    <published>2020-12-21T10:17:43.000Z</published>
    <updated>2020-12-24T03:15:02.056Z</updated>
    
    <content type="html"><![CDATA[<p>在和风天气API获取日落时间时，没仔细看清楚官方文档，绕了一个大圈。但是也学到了时间格式化的一些操作，在这里继续记录下来。</p><p><img src="https://picbed.tangspoon.cn/uPic/image-20201221193040002.png" alt="image-20201221193040002" /></p><a id="more"></a><hr /><h2 id="一-获取系统日期并格式化"><a class="markdownIt-Anchor" href="#一-获取系统日期并格式化"></a> 一、获取系统日期并格式化</h2><p>因为使用sunmoon接口<code>https://devapi.qweather.com/v7/astronomy/sunmoon?</code>需要使用当天日期，格式例如<code>20201218</code>，Linux的时间显示格式为<code>Mon 21 Dec 18:39:36 CST 2020</code>，因此我们需要把系统格式化。</p><img src="https://picbed.tangspoon.cn/uPic/image-20201221191037433.png" alt="image-20201221191037433" style="zoom:70%;" /><p>可以使用Python的<code>datetime</code>模块，使用方式如下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">formatTime</span>():</span></span><br><span class="line"><span class="comment"># 实例化对象</span></span><br><span class="line">    dt = datetime.now()</span><br><span class="line">    year = dt.year</span><br><span class="line">    month = dt.month</span><br><span class="line">    day = dt.day</span><br><span class="line">    <span class="comment"># 组合时间</span></span><br><span class="line">    today = str(year) + str(month) + str(day)</span><br><span class="line">    <span class="comment"># print(&#x27;today: &#x27;,today)</span></span><br><span class="line">    <span class="keyword">return</span> today</span><br></pre></td></tr></table></figure><h2 id="二-发送日落请求"><a class="markdownIt-Anchor" href="#二-发送日落请求"></a> 二、发送日落请求</h2><p>获取了格式化的<code>date</code>之后，我们就可以获取日落时间了。过程如下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getSunsetTime</span>():</span></span><br><span class="line">    sunset_url = <span class="string">&#x27;https://devapi.qweather.com/v7/astronomy/sunmoon?&#x27;</span></span><br><span class="line">    params = &#123;</span><br><span class="line">        <span class="string">&#x27;location&#x27;</span>: <span class="string">&#x27;101280101&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;key&#x27;</span>: <span class="string">&#x27;6dee7771746148fbbee9cedeb9c1ffc4&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;date&#x27;</span>: date,</span><br><span class="line">        <span class="string">&#x27;gzip&#x27;</span>: <span class="string">&#x27;y&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    sun_html = requests.get(sunset_url, params)</span><br><span class="line">    sun_content = sun_html.json()</span><br><span class="line">    sunset_time = sun_content[<span class="string">&#x27;sunset&#x27;</span>]</span><br><span class="line">    print(<span class="string">&#x27;sunset_time:&#x27;</span>, sunset_time)</span><br><span class="line">    print(<span class="string">&#x27;sunset_time is: &#x27;</span>, type(sunset_time))</span><br><span class="line">    <span class="keyword">return</span> sunset_time</span><br></pre></td></tr></table></figure><br/><p>以下红框是我们需要的时间，在使用<code>type()</code>验证了日落时间是<code>str</code>类型后，我们可以通过<strong>正则表达式</strong>来提取我们需要的<code>17:47</code></p><img src="https://picbed.tangspoon.cn/uPic/image-20201221192116078.png" alt="image-20201221192116078" style="zoom:50%;" /><h2 id="三-正则表达式提取做需要的字符串"><a class="markdownIt-Anchor" href="#三-正则表达式提取做需要的字符串"></a> 三、正则表达式提取做需要的字符串</h2><p>使用<code>re</code>模块下的<code>findall</code>配合正则表达式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 分离日落时间，获得几点几分</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getSunsetHM</span>():</span></span><br><span class="line">    <span class="comment"># 使用正则表达式</span></span><br><span class="line">    sunsetime = getSunsetTime()</span><br><span class="line">    sunsetHM = (re.findall(<span class="string">r&quot;T(.+?)\+&quot;</span>, sunsetime))</span><br><span class="line">    print(sunsetHM)</span><br><span class="line">    <span class="keyword">return</span> sunsetHM</span><br></pre></td></tr></table></figure><br/><p>提取结果显示</p><img src="https://picbed.tangspoon.cn/uPic/image-20201221192820537.png" alt="image-20201221192820537" style="zoom:50%;" /><hr /><p>完整代码已上传到Github：</p><p><a href="https://github.com/tangspoon66/MyPythonCode/blob/master/formatTime.py">https://github.com/tangspoon66/MyPythonCode/blob/master/formatTime.py</a></p><br/><p>参考资料：</p><p><a href="https://blog.csdn.net/liao392781/article/details/80181088">https://blog.csdn.net/liao392781/article/details/80181088</a></p><p><a href="https://blog.csdn.net/shomy_liu/article/details/44141483">https://blog.csdn.net/shomy_liu/article/details/44141483</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;在和风天气API获取日落时间时，没仔细看清楚官方文档，绕了一个大圈。但是也学到了时间格式化的一些操作，在这里继续记录下来。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://picbed.tangspoon.cn/uPic/image-20201221193040002.png&quot; alt=&quot;image-20201221193040002&quot; /&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="正则表达式" scheme="https://blog.tangspoon.cn/categories/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
    
    <category term="正则表达式" scheme="https://blog.tangspoon.cn/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>智能闹钟（二）｜使用「和风天气、百度语音合成」API进行天气播报</title>
    <link href="https://blog.tangspoon.cn/2020/12/21/%E6%99%BA%E8%83%BD%E9%97%B9%E9%92%9F%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BD%9C%E4%BD%BF%E7%94%A8%E3%80%8C%E5%92%8C%E9%A3%8E%E5%A4%A9%E6%B0%94%E3%80%81%E7%99%BE%E5%BA%A6%E8%AF%AD%E9%9F%B3%E5%90%88%E6%88%90%E3%80%8DAPI%E8%BF%9B%E8%A1%8C%E5%A4%A9%E6%B0%94%E7%9A%84%E6%92%AD%E6%8A%A5/"/>
    <id>https://blog.tangspoon.cn/2020/12/21/%E6%99%BA%E8%83%BD%E9%97%B9%E9%92%9F%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BD%9C%E4%BD%BF%E7%94%A8%E3%80%8C%E5%92%8C%E9%A3%8E%E5%A4%A9%E6%B0%94%E3%80%81%E7%99%BE%E5%BA%A6%E8%AF%AD%E9%9F%B3%E5%90%88%E6%88%90%E3%80%8DAPI%E8%BF%9B%E8%A1%8C%E5%A4%A9%E6%B0%94%E7%9A%84%E6%92%AD%E6%8A%A5/</id>
    <published>2020-12-21T09:58:25.000Z</published>
    <updated>2020-12-31T10:05:54.152Z</updated>
    
    <content type="html"><![CDATA[<img src="https://picbed.tangspoon.cn/uPic/image-20201221175630831.png" alt="image-20201221175630831" style="zoom:30%;" /><a id="more"></a><br/><p><strong>每日天气提醒</strong>在我的生活中时非常有必要的，对我<strong>每日的出行</strong>会有巨大帮助。因此，智能闹钟项目要考虑加入天气播报功能。该功能可以使用免费的「和风天气」提供的api来实现。</p><hr /><h2 id="一-需求分析"><a class="markdownIt-Anchor" href="#一-需求分析"></a> 一、需求分析</h2><p>首先我们得明白需求：</p><ol><li><p>实况天气：参考出门穿什么衣服、是否需要带伞</p><p>对应「实况天气」开发版接口：<a href="https://devapi.qweather.com/v7/weather/now">https://devapi.qweather.com/v7/weather/now</a>?</p><p>需要获得的数据如下：</p><img src="https://picbed.tangspoon.cn/uPic/image-20201221165538314.png" alt="image-20201221165538314" style="zoom:30%;" /><br/></li><li><p>每天最低、最高温度：参考整体温度</p></li><li><p>日落时间：希望每天都可以看到好看的晚霞</p><p>2、3需求对应「3天预报」开发版接口：<a href="https://devapi.qweather.com/v7/weather/3d">https://devapi.qweather.com/v7/weather/3d</a>?</p><p>需要获得的数据如下：</p><img src="https://picbed.tangspoon.cn/uPic/image-20201221165738406.png" alt="image-20201221165738406" style="zoom:33%;" /></li></ol><blockquote><p>⚠️注意：日落时间可以用「天气预报」、「太阳和月亮」两个接口获得，但使用前者非常简单。</p></blockquote><h2 id="二-功能实现"><a class="markdownIt-Anchor" href="#二-功能实现"></a> 二、功能实现</h2><h3 id="1-获取实况温度与实况状态"><a class="markdownIt-Anchor" href="#1-获取实况温度与实况状态"></a> 1. 获取实况温度与实况状态</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getNowWeather</span>():</span></span><br><span class="line">    <span class="comment"># 开发版接口地址</span></span><br><span class="line">    url = <span class="string">&#x27;https://devapi.qweather.com/v7/weather/now?&#x27;</span></span><br><span class="line">    <span class="comment"># 接口参数</span></span><br><span class="line">    params = &#123;</span><br><span class="line">        <span class="comment"># 你的城市id</span></span><br><span class="line">        <span class="string">&#x27;location&#x27;</span>: <span class="string">&#x27;xxx&#x27;</span>,</span><br><span class="line">        <span class="comment"># 和风天气key</span></span><br><span class="line">        <span class="string">&#x27;key&#x27;</span>: <span class="string">&#x27;xxx&#x27;</span>,</span><br><span class="line">        <span class="comment"># 使用gzip可较少延迟</span></span><br><span class="line">        <span class="string">&#x27;gzip&#x27;</span>: <span class="string">&#x27;y&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    html = requests.get(url, params)</span><br><span class="line">    content = html.json()</span><br><span class="line">    now_temp = content[<span class="string">&#x27;now&#x27;</span>][<span class="string">&#x27;temp&#x27;</span>]</span><br><span class="line">    now_text = content[<span class="string">&#x27;now&#x27;</span>][<span class="string">&#x27;text&#x27;</span>]</span><br><span class="line">    <span class="keyword">return</span> now_temp, now_text</span><br></pre></td></tr></table></figure><h3 id="2-最低-最高温度-日落时间"><a class="markdownIt-Anchor" href="#2-最低-最高温度-日落时间"></a> 2. 最低、最高温度、日落时间</h3><p>我们使用postman对调用接口，对response分析，可以获得第一天的数据</p><img src="https://picbed.tangspoon.cn/uPic/image-20201221171749567.png" alt="image-20201221171749567" style="zoom:40%;" /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get3d</span>():</span></span><br><span class="line">    url = <span class="string">&#x27;https://devapi.qweather.com/v7/weather/3d?&#x27;</span></span><br><span class="line">    <span class="comment"># params与getNowWeather()的一样</span></span><br><span class="line">    html = requests.get(url, params)</span><br><span class="line">    html_content = html.json()</span><br><span class="line">    tempMax = html_content[<span class="string">&#x27;daily&#x27;</span>][<span class="number">0</span>][<span class="string">&#x27;tempMax&#x27;</span>]</span><br><span class="line">    tempMin = html_content[<span class="string">&#x27;daily&#x27;</span>][<span class="number">0</span>][<span class="string">&#x27;tempMin&#x27;</span>]</span><br><span class="line">    sunsetTime = html_content[<span class="string">&#x27;daily&#x27;</span>][<span class="number">0</span>][<span class="string">&#x27;sunset&#x27;</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> tempMax, tempMin, sunsetTime</span><br></pre></td></tr></table></figure><h2 id="三-语音合成播报天气"><a class="markdownIt-Anchor" href="#三-语音合成播报天气"></a> 三、语音合成播报天气</h2><p><a href="https://ai.baidu.com/tech/speech/tts">点击这里</a>，先注册百度TTS。然后创建一个应用，获得三条信息</p><img src="https://picbed.tangspoon.cn/uPic/image-20201224110716260.png" alt="image-20201224110716260" style="zoom:50%;" /><br/><p>结合上面的天气模块，直接合成：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> aip <span class="keyword">import</span> AipSpeech</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> getWeather <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># 百度TTS信息</span></span><br><span class="line">APP_ID = <span class="string">&#x27;xxxx&#x27;</span></span><br><span class="line">API_KEY = <span class="string">&#x27;xxxxxxxxxx&#x27;</span></span><br><span class="line">SECRET_KEY = <span class="string">&#x27;xxxxxxxxxxxxxxxxxx&#x27;</span></span><br><span class="line"></span><br><span class="line">client = AipSpeech(APP_ID, API_KEY, SECRET_KEY)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取天气模块的信息</span></span><br><span class="line">now_temp, now_text = getNowWeather()</span><br><span class="line">tempMax, tempMin, sunsetTime = get3d()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 正常天气</span></span><br><span class="line">text_normal = <span class="string">&#x27;xxx早上好呀！现在外面&#x27;</span> + now_temp + <span class="string">&#x27;度，&#x27;</span> + <span class="string">&#x27;今天最低温度为：&#x27;</span> + tempMin + <span class="string">&#x27;度，&#x27;</span> + <span class="string">&#x27;最高温度为：&#x27;</span> + tempMax + <span class="string">&#x27;度，&#x27;</span> \</span><br><span class="line">              + <span class="string">&#x27;看好温度穿衣哦！&#x27;</span> + <span class="string">&#x27;再提醒一下，今天的日落时间是，&#x27;</span> + sunsetTime + <span class="string">&#x27;，祝您傍晚能看到美丽的日落！拜拜～&#x27;</span></span><br><span class="line"><span class="comment"># 最高温度小于14度时</span></span><br><span class="line">text_lowtemp = <span class="string">&#x27;xxxx早上好呀！现在外面&#x27;</span> + now_temp + <span class="string">&#x27;度，&#x27;</span> + <span class="string">&#x27;今天最低温度为：&#x27;</span> + tempMin + <span class="string">&#x27;度！&#x27;</span> + <span class="string">&#x27;最高温度也才：&#x27;</span> + tempMax + <span class="string">&#x27;度，&#x27;</span> \</span><br><span class="line">               + <span class="string">&#x27;，也是好冷的呢！要多穿衣服哦！&#x27;</span> + <span class="string">&#x27;再提醒一下，今天的日落时间是，&#x27;</span> + sunsetTime + <span class="string">&#x27;祝xxxx傍晚能看到美丽的日落！拜拜～&#x27;</span></span><br><span class="line"><span class="comment"># 下雨</span></span><br><span class="line">text_rain = <span class="string">&#x27;xxxx早上好呀！现在外面&#x27;</span> + now_temp + <span class="string">&#x27;度，&#x27;</span> + <span class="string">&#x27;外边正在下雨呢，记得带伞～&#x27;</span> + <span class="string">&#x27;今天最低温度为：&#x27;</span> + tempMin + <span class="string">&#x27;度，&#x27;</span> + <span class="string">&#x27;最高温度为：&#x27;</span> + tempMax + <span class="string">&#x27;度，&#x27;</span> \</span><br><span class="line">            + <span class="string">&#x27;看好温度穿衣哦！&#x27;</span> + <span class="string">&#x27;再提醒一下，今天的日落时间是，&#x27;</span> + sunsetTime + <span class="string">&#x27;祝xxxx傍晚能看到美丽的日落！拜拜～&#x27;</span> + <span class="string">&#x27;对了，记得带伞哦！再见&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># per: 3是性感大叔 4是妹妹；spd: 是语速，vol是: 音量</span></span><br><span class="line"><span class="keyword">if</span> int(tempMax) &lt; <span class="number">14</span>:</span><br><span class="line">    result = client.synthesis(text_lowtemp, <span class="string">&#x27;zh&#x27;</span>, <span class="number">1</span>, &#123;<span class="string">&#x27;vol&#x27;</span>: <span class="number">10</span>, <span class="string">&#x27;per&#x27;</span>: <span class="number">4</span>, <span class="string">&#x27;spd&#x27;</span>: <span class="number">5</span>&#125;)</span><br><span class="line"><span class="keyword">elif</span> now_text <span class="keyword">is</span> <span class="string">&#x27;雨&#x27;</span>:</span><br><span class="line">    result = client.synthesis(text_rain, <span class="string">&#x27;zh&#x27;</span>, <span class="number">1</span>, &#123;<span class="string">&#x27;vol&#x27;</span>: <span class="number">10</span>, <span class="string">&#x27;per&#x27;</span>: <span class="number">4</span>&#125;)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    result = client.synthesis(text_normal, <span class="string">&#x27;zh&#x27;</span>, <span class="number">1</span>, &#123;<span class="string">&#x27;vol&#x27;</span>: <span class="number">10</span>, <span class="string">&#x27;per&#x27;</span>: <span class="number">4</span>, <span class="string">&#x27;spd&#x27;</span>: <span class="number">5</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 播放模块</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> isinstance(result, dict):</span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">&#x27;/home/clock/weather.mp3&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(result)</span><br><span class="line">os.system(<span class="string">&#x27;mplayer &quot;%s&quot; &gt; /dev/null 2&gt;&amp;1&#x27;</span> % <span class="string">&#x27;/home/clock/weather.mp3&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="三-总结"><a class="markdownIt-Anchor" href="#三-总结"></a> 三、总结</h2><p>在开始做一个项目模块前，一定要做好需求分析，认真阅读开发者文档，了解清楚需求都要用到哪些接口/工具，不然用错接口就会浪费很多很多时间。就像API文档里面的「天气预报」和「太阳和月亮」接口都可以获得日落时间，但是用前者可以简单上十倍！</p><p>一开始的我直冲太阳和月亮，还写了一大堆格式化时间的函数，多此一举。</p><img src="https://picbed.tangspoon.cn/uPic/image-20201221180450233.png" alt="image-20201221180450233" style="zoom:30%;" /><br/><h2 id="四-相关文章"><a class="markdownIt-Anchor" href="#四-相关文章"></a> 四、相关文章</h2><ol><li><a href="https://blog.tangspoon.cn/2020/12/19/%E6%99%BA%E8%83%BD%E9%97%B9%E9%92%9F%EF%BC%88%E4%B8%80%EF%BC%89%EF%BD%9CmacOS%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8%E6%A0%91%E8%8E%93%E6%B4%BE3B/#more">智能闹钟（一）｜macOS 入门使用树莓派 3B+</a></li><li><a href="http://localhost:4000/2020/12/21/%E6%99%BA%E8%83%BD%E9%97%B9%E9%92%9F%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BD%9C%E4%BD%BF%E7%94%A8%E3%80%8C%E5%92%8C%E9%A3%8E%E5%A4%A9%E6%B0%94%E3%80%81%E7%99%BE%E5%BA%A6%E8%AF%AD%E9%9F%B3%E5%90%88%E6%88%90%E3%80%8DAPI%E8%BF%9B%E8%A1%8C%E5%A4%A9%E6%B0%94%E7%9A%84%E6%92%AD%E6%8A%A5/#more">智能闹钟（三）| 使用「网易云音乐 NodeJS 版 API 接口」播放每日推荐歌曲</a></li><li><a href="https://blog.tangspoon.cn/2020/12/24/%E6%99%BA%E8%83%BD%E9%97%B9%E9%92%9F%EF%BC%88%E5%9B%9B%EF%BC%89-%E6%95%B4%E5%90%88%E6%90%AD%E5%BB%BA/#more">智能闹钟（四）-整合搭建</a></li><li><a href="https://blog.tangspoon.cn/2020/12/31/%E6%99%BA%E8%83%BD%E9%97%B9%E9%92%9F%EF%BC%88%E4%BA%94%EF%BC%89%EF%BD%9C%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E5%9C%B0%E5%85%B3%E9%97%AD%E9%97%B9%E9%92%9F%EF%BC%9F/#more">智能闹钟（五）｜如何优雅地关闭闹钟？</a></li></ol>]]></content>
    
    
    <summary type="html">&lt;img src=&quot;https://picbed.tangspoon.cn/uPic/image-20201221175630831.png&quot; alt=&quot;image-20201221175630831&quot; style=&quot;zoom:30%;&quot; /&gt;</summary>
    
    
    
    <category term="树莓派" scheme="https://blog.tangspoon.cn/categories/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
    
    <category term="树莓派" scheme="https://blog.tangspoon.cn/tags/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
    <category term="Python" scheme="https://blog.tangspoon.cn/tags/Python/"/>
    
  </entry>
  
</feed>
